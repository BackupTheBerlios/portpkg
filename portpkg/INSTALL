INSTALL

Step 1: Install the base package
--------------------------------

If you want to have a quick look into what Portpkg does, download the
latest package at
http://developer.berlios.de/project/showfiles.php?group_id=2486 and
install it:

 $ su -c "/sbin/installpkg portpkg-xxx-noarch-1tom.tgz"

You will be ask for the root password here in order to install the  
package. Remember that, password authentication will occur later   
every time a build script needs to be run or a package needs to be   
installed. The first one can be skipped by installing the package   
fakeroot (see step 3).

Step 2: Update the build scripts
--------------------------------

Now that the administration scripts are installed, you can create your
ports tree and fetch the complete current ports collection from our CVS
repository:

 $ portpkg --sync

 Syncing your ports tree with cvs.portpkg.berlios.de:
   --> Updating ports/AUTHORS
   --> Updating ports/COPYING
 (...)
   --> Updating ports/xap/xvid4conf/sources
   --> Updating ports/xap/zinf/SlackBuild
   --> Updating ports/xap/zinf/requires
   --> Updating ports/xap/zinf/slack-desc
   --> Updating ports/xap/zinf/sources

Step 3: Install fakeroot
------------------------

This is optional, but highly recommended. As a result of design of
Slackware's build scripts (SlackBuilds), these scripts need to be run as
root to create proper ownership of each created file. Indeed, this is
obsolete if you install fakeroot. fakeroot simulates to be root, but
does not require root password and disallows the build script to touch
any system file until the package has been built. So you need to type
the root password two times for this action:

 $ portpkg fakeroot

 Building fakeroot-1.2.10-i486-1tom:
   --> Downloading fakeroot_1.2.10.tar.gz
 (...)
   --> Executing d/fakeroot/SlackBuild --cleanup
   --> Gaining root privileges
 Password:
   --> Moving fakeroot-1.2.10-i486-1tom.tgz to /home/user/pkg/d/
   --> Cleaning up

 Password:
 Installing package fakeroot-1.2.10-i486-1tom...
 (...)

Step 4: Check for updates
-------------------------

Now you can check whether there's an update for portpkg itself in the
ports tree available:

 $ portpkg portpkg

 portpkg-0.30-noarch-6tom is already installed. Skipping.

Seems it's up-to-date, allright.

Step 5: List available ports
----------------------------

The Portpkg scripts use the directories /home/USER/ports,
/home/USER/dist and /home/USER/pkg (while USER is your login) to store
the SlackBuild scripts (the "ports tree"), source packages (that will be
downloaded before any compile) and binary packages. You can have a list
of all available ports with:

 $ portpkg --list
 ap/abook-0.5.3-i486-1fu
 ap/athcool-0.3.8-i486-1tom
 ap/bonnie++-1.03a-i486-1tom
 (...)
 xap/video-dvdrip-0.51.1-i486-1tom
 xap/xdaf-A.01.11.01-i486-1tom
 xap/xmbmon-203-i486-1tom
 xap/xvid4conf-1.12-i486-1tom
 xap/zinf-2.2.5-i486-2tom

Step 6: Search for ports by keywords
------------------------------------

Now you can search the ports for specific keywords:

 $ portpkg --find id3 tag
 l/id3lib-3.8.3-i686-2tom
 l/pyid3lib-0.5.1-noarch-1tom
 l/libid3tag-0.15.1b-i486-1
 l/taglib-1.3.1-i486-1

Step 7: Get details
-------------------

View detailed information about certain ports with --info (you can
specify the port with the group and/or the long name to define the port
more precisely or you can imply whole groups also, otherwise portpkg
will use the first port that fits your mask):

 $ portpkg --info id3lib

 PACKAGE NAME:  id3lib-3.8.3-i486-2tom
 SCRIPT LOCATION:  /home/user/ports/l/id3lib/SlackBuild
 SCRIPT REQUIRES:  cxxlibs glibc zlib
 SCRIPT SOURCES:  http://dl.sourceforge.net/id3lib/id3lib-3.8.3.tar.gz
 PACKAGE DESCRIPTION:
 id3lib: id3lib (id3v1/id3v2 tagging library)
 id3lib:
 id3lib: id3lib is a software library for manipulating ID3v1/v1.1 and
 id3lib: ID3v2 tags. id3lib 3.0.x conforms to all ID3v2 standards up to
 id3lib: and including the ID3v2.3.0 informal standard.
 id3lib:

Step 8: Compile and install
---------------------------

To "add" (that is to download the source code if needed, to compile,
package and install) a port to your system, just type in the short name
of the port (it is always recommended to use --dryrun first, to see,
what would happen):

 $ portpkg --dryrun id3lib

 Preparing dependencies of id3lib-3.8.3-i486-2tom:
   --> Downloading zlib-1.2.3-i486-1.tgz
   --> Executing z/bin/slackware/l/zlib.SlackBuild --cleanup
   --> Installing package zlib-1.2.3-i486-1

 Building id3lib-3.8.3-i486-2tom:
   --> Downloading id3lib-3.8.3.tar.gz
 (...)
   --> Executing /home/user/ports/l/id3lib/SlackBuild
   --> Moving id3lib-3.8.3-i486-2tom to /home/user/pkg/l/

 Installing id3lib-3.8.3-i486-2tom...
 (...)

In this example you see the package zlib as a dependecy of id3lib, which
is but part of the Slackware Linux distribution itself. It is downloaded
from a Slackware mirror and installed before the build script is run.

Have fun!
