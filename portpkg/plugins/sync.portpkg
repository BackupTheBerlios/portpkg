#!/bin/sh
#BLURB="Portpkg's build scripts (RECOMMENDED)"
#
# This plugin is basically a "cvs up -dP" in $TREE, but:
#   phase #1: Update CVS
#   phase #2: Retrieve uploaded ports and save them in open/
#     -- stop if no obvious CVS account --
#   phase #3: Retrieve uploaded buildlogs in reports/
#     -- stop if ChangeLog is newer than 48 hours --
#   phase #4: Update and commit ChangeLog

SOURCE=cvs://:pserver:anonymous@cvs.berlios.de:/cvsroot/portpkg/ports
TREE=$PRT_DIR

# check that we're a plug-in
if ! [ "$PRT_DIR" ]; then
  echo "I'm a plugin. Don't run me!"
  exit 1
fi

mkdir -p $TREE 2>/dev/null || die "No write access to $TREE!"

# don't do anything in DRY_RUN
pre=""
$DRY_RUN && pre=:
$DEBUG && $DRY_RUN && pre=debug
mailhost=users.berlios.de
login=`cat $TREE/CVS/Root 2>/dev/null | cut -d @ -f 1`

# sync port dir (avoid error message about missing ~/.cvspass)
row "Syncing $TREE/"
touch ~/.cvspass
export CVS_RSH=ssh
get $SOURCE $TREE && rm -f $CACHE/slk

# import GPG-KEYS
if [ -f $TREE/GPG-KEYS ] && has_prog gpg; then
  row "Updating local GPG keyring"
  gpg -q --import $TREE/GPG-KEYS
fi

# get uploads from http://portpkg.berlios.de/upload
has_prog lynx || die
cd $TREE || die
files=`$pre lynx -dump http://portpkg.berlios.de/upload | grep -o "http://[^ ?]*[^/]$" | sort -u`

if [ "$files" ]; then
uploads=`echo "$files" | grep "\.tar\.bz2$"`
if [ "$uploads" ]; then
  row "Syncing $TREE/open"
  for src in $uploads; do
    pkg=`basename $src`
    [ -f $TREE/open/$pkg ] && continue
    [ -f $TREE/open/$pkg.badsig ] && continue
    [ -d $TREE/open/`basename $pkg .tar.bz2` ] && continue
    row "Downloading $pkg"
    get $src $TREE/open/$pkg || continue
    if echo "$files" | grep -xsq "$src.asc"; then
      row "Downloading $pkg.asc"
      get $src.asc $TREE/open/$pkg.asc || continue
      if has_prog gpg; then
	row "Verifying signature"
	if gpg --verify $TREE/open/$pkg.asc; then
            row "Unpacking $pkg"
            ( cd $TREE/open
              mkdir `basename $pkg .tar.bz2`
              tar xf $pkg -C `basename $pkg .tar.bz2`/
              rm $pkg $pkg.asc
            )
        else
	  mv $TREE/open/$pkg $TREE/open/$pkg.badsig
	  continue
	fi
      fi
    fi
  done
fi

for i in `ls $TREE/open 2>/dev/null`; do
  if ! echo "$uploads" | egrep -sqe "/$i(|\.tar\.bz2)$" \
    -e "/`basename $i .asc`$" -e "/`basename $i .badsig`$"; then
    row "$i is no longer in the repository"
    rm -rf $TREE/open/$i
  fi
done
  rm -f $CACHE/slk
fi

# do a simple test to avoid a chunk of "permission denied" errors
case $login in *anonymous*|*pserver*|"") exit 0;; esac
debug "sync.portpkg: convinced by login $login to do CVS admin tasks"

if [ "$files" ]; then
# get uploaded buildlogs
buildlogs=`echo "$files" | grep -e "\.buildlog$" -e "\.buildlog\.gz$"`
if [ "$buildlogs" ]; then
  row "Syncing $TREE/reports"
  for src in $buildlogs; do
    pkg=`basename $src`
    [ -f $TREE/reports/$pkg ] && continue
    [ -f $TREE/reports/`basename $pkg .gz` ] && continue
    row "Downloading $pkg"
    get $src $TREE/reports/$pkg || continue
    case $src in *.gz) gunzip $TREE/reports/$pkg;; esac
  done
fi

for i in `ls $TREE/reports 2>/dev/null`; do
  if ! echo "$buildlogs" | egrep -sq "/$i(|\.gz)$"; then
    row "$i is no longer in the repository"
    rm -f $TREE/reports/$i
  fi
done
fi

# ChangeLog
if ! [ "${1:-}" = "force" ] && [ "`find $TREE/ChangeLog -mtime -2`" ]; then
  debug "sync.portpkg: ChangeLog is newer than 48 hours, exiting"
  exit 0
fi

# update the ChangeLog
has_prog rcs2log || die
cd $TREE || die
row "Syncing $TREE/ChangeLog"
$pre mv ChangeLog ChangeLog.old
if ! $pre rcs2log -i 2 -h $mailhost >ChangeLog; then
  mv ChangeLog.old ChangeLog
  die "rcs2log failed!"
else
  rm ChangeLog.old
fi

# "Updated." lines are unnecessary
sed -i "/: Updated.$/{N;d}" ChangeLog
$pre cvs ci -m "Updated." ChangeLog
