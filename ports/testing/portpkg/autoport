#!/bin/sh
#
# Autoport -- An Automatic SlackBuild Generator
# Copyright (C) 2004, 2005 Thomas Pfaff <topf@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

source `which portpkg` || exit 1
t=`mktemp -d`

ask()
{
  $i_act || return
  echo
  echo -n "$@ "
  s=""
  read s
}

check()
{
  local pattern=$1
  shift
  local desc=`echo $pattern | sed "s,[\^\$],,g"`
  if egrep -qe "$pattern" "$@" 2>/dev/null; then
    row "Checking for $desc... yes"
    return 0
  else
    row "Checking for $desc... no"
    return 1
  fi
}

snip()
{
  # the #!tag ... #!tag method
  sed -i "/^#\!$1$/,/^#\!$1$/d" $2
  # the xxx ##tag method
  sed -i "/ *##$1$/d" $2
}

encode()
{
  local ver=`echo $version | sed "s,\.,\.,g"`
  local enc=`echo "$@" | sed -e "s,$name,\\$NAME,g" -e "s,$ver,\\$VERSION,g"`
  local test
  local NAME=$name
  local VERSION=$version
  eval test=\"$enc\"
  # try ${NAME} and ${VERSION}
  [ "$test" != "$@" ] && enc=`echo "$@" | sed -e "s,$name,\\${NAME},g" -e "s,$ver,\\${VERSION},g"`
  echo "$enc"
}

decode()
{
#  local dec=`echo "$@" | sed "s,[{}],,g" -e "s,\\$NAME,$name,g" -e "s,\\$VERSION,$version,g"`
#  echo "$dec"
  local NAME=$name
  local VERSION=$version
  eval echo \"$@\"
}

add_inst() # rel/path/to/command_to_add file
{
  local s1=`basename $1`
  local s2=`basename $2`
  # check for old style ("command bla")
  if grep -sq "$s1" $2 && ! grep -sq "^if .*/$s1" $2; then
    # one-liner: remove it
    sed -i "\,$s1,d" $2
  fi
  # remove to make sure, it's correct
  sed -i "/^if .*\/$s1/,/^fi$/d" $2
  # check for new style ("if [ -x command ]; then...")
  if ! grep -sq "$s1" $2; then
    row "Adding $s1 to $s2"
    echo "if [ -x $1 ]; then" >>$2
    echo "  $1 >/dev/null 2>&1" >>$2
    echo "fi" >>$2
  fi
}

remove_inst() # command_to_remove file
{
  local s1=`basename $1`
  local s2=`basename $2`
  if grep -sq "$s1" $2; then
    row "Removing unneeded $s1 from $s2"
    # check for new style ("if [ -x command ]; then...")
    if grep -sq "^if .*/$s1" $2; then
      sed -i "/^if .*\/$s1/,/^fi$/d" $2
    else
      # old style ("command bla")
      sed -i "\,$s1,d" $2
    fi
  fi
}

# first: do we have tags?
[ "$MY_TAG" ] || die "No tag set. Please run 'pp-config'!"

# defaults
i_act=true
sources=""
name=""
group=""
arch=$ARCH
build=""
build_pkg=false

# parse options
if [ "$*" ]; then
  while [ "$1" ]; do
    case $1 in
      -a)
        i_act=false
        shift;;
      -v)
        version=$2
        shift
        shift;;
      -g)
        group=`echo $2 | cut -d / -f 1`
        shift
        shift;;
      -n)
        name=`echo $2 | cut -d / -f 1`
        shift
        shift;;
      -u)
        [ "$group" ] && get_info $group/$name || get_info $name
        # use abstract url
        sources=`encode "$sources"`
        arch=`echo $package | rev | cut -d - -f 2 | rev`
        shift;;
      -b)
        build_pkg=true
        shift;;
      *://*)
        sources=$1
        shift;;
      *)
        # usage
        stanza "Usage: autoport [-a] [-n name] [-u] [-v version] [-g group] [-b] [source url]
Options:
  -a             Run non-interactive (use defaults)
  -n name        Preset name of port
  -u             Update (try to read-in existing settings, use after -n)
  -v version     Preset version of port
  -g group       Preset group of port
  -b             Execute portpkg after port generation
  source url     Preset URL of source code (if not found via -u)"
        exit 1;;
    esac
  done
fi

$i_act && stanza "Autoport -- An Automatic SlackBuild Generator
Copyright (C) 2004, 2005 Thomas Pfaff <topf at users dot berlios dot de>
Autoport comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.

Autoport is quite experimental. A source code URL given, it will download and
unpack the code and searche for different keywords to adjust a suitable
SlackBuild script. If autoport doesn't work as expected, please mail at:
<topf at users dot berlios dot de>"

#[ "$sources" ] || die "No source url specified! Try: autoport --help"
[ "$group" ] || group=local

ask "* First step: Collect information. Continue? (ctrl-c to quit)"

# sources
ask "Source file URL [$sources]:"
sources=${s:-$sources}
[ "$sources" ] || die "Nothing entered. Eh? I can't help you this way!"
sources=`echo "$sources" | sed -e "s,://prdownloads\.,://dl.," -e "s,\?download$,,"`
# we can only handle _one_ source file
src=`echo "$sources" | head -n 1`
# name: guess it, if we haven't yet it
file=`basename $(decode $src)`
raw_name=`echo $file | rev | cut -d - -f 2- | rev`
[ "$name" ] || name=`echo $raw_name | tr "A-Z" "a-z"`
ask "Name [$name]:"
name=${s:-$name}
# group
ask "Group [$group]:"
group=${s:-$group}
# version
if ! [ "$version" ]; then
  # version: should be always guessed
  version=`echo $file | rev | cut -d - -f 1 | rev`
  version=`basename $version .tar.gz`
  version=`basename $version .tar.bz2`
  version=`basename $version .tgz`
fi
ask "Version [$version]:"
version=${s:-$version}
srcver=$version
version=`echo $version | sed "s,-,,g"`
[ "$source_out" ] || source_out=`encode "$sources"`
# arch
ask "Arch [$arch]:"
arch=${s:-$arch}
# build: check if we need to increase it
n=1
gpkg=`ls_slk | slk2loc | loc2gpkg | grep -m 1 "^$group/$name-$version-$arch-[0-9]*$MY_TAG$"`
if [ $gpkg ]; then
  $i_act && stanza "There is already $gpkg."
  # find it
  while [ "$group/$name-$version-$arch-$n$MY_TAG" != $gpkg ]; do
    ((n++))
    [ "$n" == "1000" ] && die "Strange: Cannot find build number!"
  done
  # now that we found it, we can find a bigger number too!
  ((n++))
fi
ask "Build [$n$MY_TAG]:"
build=${s:-$n$MY_TAG}
# desc
if [ "$description" ]; then
  desc1=`echo "$description" | sed "s,^$name:[ ]*,," | head -n 1`
  desc2=`echo "$description" | sed "s,^$name:[ ]*,," | sed "1,2d"`
else
  desc1=$raw_name
fi
ask "Description (1-liner) [$desc1]:"
desc1=${s:-$desc1}
if $i_act; then
  stanza "Description (details) (Write or paste and finish with a single '.')"
  echo "[$desc2]"
  s=""
  while [ "$l" != "." ]; do
    read l
    s="$s
$l"
  done
  s=`echo "$s" | sed -e "1d" -e "/^\.$/d"`
fi
desc2=${s:-$desc2}
# combine $desc1 and $desc2
if [ "$desc2" ]; then
  len=${#name}
  desc=`echo "$name: $desc1"
        echo "$name:"
        echo "$desc2" | fmt -u -w $((75-len)) | sed "s,^,$name: ,"
        echo "$name:"`
else
  desc="$name: $desc1"
fi
if $i_act; then
  echo
  echo "Creating now a port with this information:"
  echo
  echo "PACKAGE NAME:  $name-$version-$arch-$build"
  echo "SCRIPT LOCATION:  $PRT_DIR/$group/$name/SlackBuild"
  echo "SOURCE LOCATION:  $sources" | fmt -u
  echo "PACKAGE DESCRIPTION:"
  echo "$desc"
fi

ask "Last chance to quit. Port scripts will now be written.
* Next step: Downloading and checking source code. Continue? (ctrl-c to quit)"

# now we should redecode the actual source name
sources=`decode "$source_out"`
path=$PRT_DIR/$group/$name
script=$path/SlackBuild
if [ -f $path/stop.autoport ]; then
  stanza "There's a warning not to autoport this source code:"
  echo "==========================================="
  more $path/stop.autoport
  echo "==========================================="
  die
fi
if [ -d $path ]; then
  ask "* This port already exists. Really go on? (ctrl-c to quit)"
fi

# write skeletons
stanza "Autoporting $group/$package:"
failed=false
mkdir -p $path
sed '/^#\!SlackBuild.skel$/,/^#\!SlackBuild.skel$/!d' $0 >$script
echo "$source_out" >$path/sources
echo "$desc" >$path/slack-desc
sed -i "s,%version%,$version," $script
sed -i "s,%build%,$build," $script

# downlaod source file
#file=`basename $src`
if [ -f $SRC_DIR/$file ]; then
  row "$file found in $SRC_DIR/"
else
  row "Downloading $file"
  VERBOSE=true
  output=/dev/stdout
  get `decode $src` $SRC_DIR/$file || die
fi

# format
echo -n "  --> Checking format... "
mkdir -p $t/src
case $file in
  *.tar.bz2)
    format=tarbz2
    tar xjf $SRC_DIR/$file -C $t/src/ || die "Error while unpacking, maybe wrong URL?"
    tar tjf $SRC_DIR/$file >$t/footprint
    echo ".tar.bz2"
    sed -i "s,%tarmode%,j," $script
    snip rpm $script;;
  *tar.gz|*.tgz) # yes, there was one file called "xxxtar.gz"!
    format=targz
    tar xzf $SRC_DIR/$file -C $t/src/ || die "Error while unpacking, maybe wrong URL?"
    tar tzf $SRC_DIR/$file >$t/footprint
    echo ".tar.gz"
    sed -i "s,%tarmode%,z," $script
    snip rpm $script;;
  *.src.rpm)
    format=srpm
    ( cd $t/
      rm -rf `basename $file .rpm`.tar.gz
      cp $SRC_DIR/$file .
      rpm2targz $file
      tar xzf `basename $file .rpm`.tar.gz
      tar xzf `basename $file .src.rpm`/$name-$version.tar.gz -C $t/src/
      tar tzf `basename $file .src.rpm`/$name-$version.tar.gz >$t/footprint ) \
    || die "Error while unpacking, maybe wrong URL?"
    echo ".src.rpm"
    snip tar $script;;
  *)
    echo "unknown!"
    die "Unknown source format, please write SlackBuild by hand!";;
esac
tarball=`encode "$file"`
sed -i "s,%tarball%,$tarball," $script

# source-prefix
echo -n "  --> Checking source-prefix... "
srcdir_prefix=`cat $t/footprint | sed "s,^\./,," | cut -d / -f 1 | sort -u`
if [ `echo "$srcdir_prefix" | wc -l` == 1 ] && [ "$srcdir_prefix" != "." ]; then
  echo "$srcdir_prefix/"
  if [ "$format" == "srpm" ]; then
#    snip cd_sdp $script
    :
  else
    snip extra_sdp $script
  fi
  srcdir_prefix_out=`encode "$srcdir_prefix"`
  sed -i "s,%srcdirprefix%,$srcdir_prefix_out," $script
else
  echo "no prefix"
  snip cd_sdp $script
  srcdir_prefix="."
fi
sed -i "s,^$srcdir_prefix/,," $t/footprint

# are there patches?
for section in config install doc post-config post-install post-doc; do
  if [ -f $path/$section-fix.autoport ]; then
    row "Adding $section-fix"
    sed -i "\,#%$section-fix%,r $path/$section-fix.autoport" $script
    # if it's not a post-xxx, then it's meant to replace the section
    case $section in post-*) ;; *) snip meta-$section $script;; esac
  fi
done
if [ "`ls $path/*.patch 2>/dev/null`" ]; then
  row "Adding patches (Please check them later!)"
else
  snip patch $script
fi

# docs
if grep -sq "#!meta-doc" $script; then
  docs=`egrep "^ABOUT$|^ABOUT-NLS$|^ANNOUNCE$|^AUTHORS$|^CONFIGURATION$|^CHANGES$\
  |^COPYING$|^COPYRIGHT$|^CREDITS$|^ChangeLog$|^Changelog$|^CHANGELOG$\
  |^CONTRIBUTORS$|FAQ|^FEATURES$|^FILES$|^HACKING$|^History$|^HISTORY$|^INSTALL\
  |^LICENSE$|^LSM$|^MANIFEST$|^NEWS$|README|Readme|^SITES$|RELEASE|^RELNOTES$\
  |^THANKS$|^TIPS$|^TODO$|^VERSION$|^CONFIGURATION|^GPL$|^License$|^Doc$|^doc$\
  |^Docs|^docs|^Roadmap$|^ROADMAP$|BUGS|^index.ht|INDEX" $t/footprint \
  | grep -v / | sort -u | xargs`
  if [ "$docs" ]; then
    row "Checking docs... $docs."
    sed -i "s,%docs%,$docs," $script
  else
    row "Checking docs... none."
    snip docs $script
  fi
fi

# configure/make
if grep -sqe "#!meta-config" -e "#!meta-make" $script; then
  if check "^Makefile.PL$" $t/footprint; then
    # Makefile.PL is first choice
    snip cfg_autogen $script
    snip cfg_configure $script
    arch=noarch
  else
    snip cfg_perl $script
    if check "^configure$" $t/footprint; then
      check "--prefix" $t/src/$srcdir_prefix/configure || snip ac_prefix $script
      check "--sysconfdir" $t/src/$srcdir_prefix/configure || snip ac_sysconfdir $script
#      check "--program-prefix" $t/src/$srcdir_prefix/configure || snip ac_program_prefix $script
      check "--localstatedir" $t/src/$srcdir_prefix/configure || snip ac_localstatedir $script
      check "--disable-static" $t/src/$srcdir_prefix/configure || snip ac_disable_static $script
      snip cfg_autogen $script
    elif check "^autogen.sh$" $t/footprint; then
      :
    else
      snip cfg_configure $script
      snip cfg_autogen $script
      if check "^setup\.py$" $t/footprint; then
        snip cfg_mk_hard $script
        snip mk $script
        arch=noarch
      else
        error "Don't know how to build this package."
        failed=true
      fi
    fi
  fi
fi

# installation prefix
if grep -sq "#!meta-install" $script; then
  if ! check "^setup\.py$" $t/footprint; then
    snip inst_python $script
    if check "^Makefile" $t/footprint; then
      if grep -sq "^Makefile.PL$" $t/footprint \
      || check "DESTDIR" $t/src/$srcdir_prefix/Makefile*; then
        snip inst_PREFIX $script
        snip inst_prefix $script
        snip inst $script
        snip cfg_mk_hard $script
      else
        snip inst_destdir $script
        if check "PREFIX" $t/src/$srcdir_prefix/Makefile*; then
          snip inst_prefix $script
          snip inst $script
          snip cfg_mk_hard $script
        else
          snip inst_PREFIX $script
          if check "prefix" $t/src/$srcdir_prefix/Makefile*; then
            snip inst $script
            snip cfg_mk_hard $script
          else
            snip inst_prefix $script
            if check "/usr/local" $t/src/$srcdir_prefix/{,*/}Makefile*; then
              :
            else
              error "Don't know how to install this package (no install-prefix)."
              failed=true
            fi
          fi
        fi
      fi
    else
      error "Don't know how to install this package (no Makefile)."
      failed=true
    fi
  fi
fi

# cflags
if ! check "CFLAGS" $t/src/$srcdir_prefix/*; then
  snip cflags $script
fi

# cxxflags
use_cxxflags=true
if ! check "CXXFLAGS" $t/src/$srcdir_prefix/*; then
  snip cxxflags $script
fi

# slkcflags
grep -sqe "CFLAGS" -e "CXXFLAGS" $script || snip slkcflags $script

# gconf schemas
if ! check "\.schemas(|\.in|\.in\.in)$" $t/footprint; then
  snip schemas $script
fi

# old inst()
if grep -sq "^inst()" $path/doinst.sh; then
  row "Removing old inst() from doinst.sh"
  sed -i "/^inst()/,/^}$/d" $path/doinst.sh
fi

# scrollkeeper
if check "\.omf$" $t/footprint; then
  add_inst "usr/bin/scrollkeeper-update" $path/doinst.sh
else
  remove_inst "scrollkeeper-update" $path/doinst.sh
fi

# mime-update
if check "\.(keys|mime)(|\.in)$" $t/footprint; then
  add_inst "usr/bin/update-mime-database" $path/doinst.sh
else
  remove_inst "update-mime-database" $path/doinst.sh
fi

# desktop-database
if check "\.desktop(|\.in)$" $t/footprint; then
  add_inst "usr/bin/update-desktop-database" $path/doinst.sh
else
  remove_inst "update-mime-database" $path/doinst.sh
fi

## wrong hard-coded doc paths
#if ! check "/share/doc" $t/src/$srcdir_prefix/{,*/}Makefile*; then
#  snip fix_mk_doc $script
#fi

## wrong hard-coded man paths (force on Makefile.PL)
#if ! grep -sq "^Makefile.PL$" $t/footprint \
#&& ! check "/share/man" $t/src/$srcdir_prefix/{,*/}Makefile*; then
#  snip fix_mk_man $script
#fi

# config() subroutine?
if grep -sq "\.new" $script; then
  if ! grep -sq "^config()" $path/doinst.sh; then
    row "Adding config() to doinst.sh"
    sed '/^#\!doinst.sh_config$/,/^#\!doinst.sh_config$/!d' $0 >>$path/doinst.sh
  fi
else
  if grep -sq "^config()" $path/doinst.sh; then
    row "Removing unneeded config() from doinst.sh"
    sed -i "/^config()/,/^}$/d" $path/doinst.sh
  fi
fi

# if doinst.sh is emtpy, remove it
if [ -f $path/doinst.sh ] && ! [ -s $path/doinst.sh ]; then
  row "Removing empty doinst.sh"
  rm $path/doinst.sh
fi

# doinst.sh at all?
[ -f $path/doinst.sh ] || snip doinst $script

# now arch should be known
case $arch in
  noarch)
    sed -i "s,%arch%,$arch," $script
    snip cflags $script
    snip strip $script;;
  *)
    # we know better than the user ;-)
    sed -i "s,%arch%,\${ARCH:-i486}," $script;;
esac

# clean up
sed -i "/^#[!#%]/d" $script
sed -i "s, *##[^ ]*,,g" $script
if [ -f $path/doinst.sh ]; then
  sed -i "/^#/d" $path/doinst.sh
  sed -i "s, *##[^ ]*,,g" $path/doinst.sh
fi

# summary
if [ -f $path/readme.autoport ]; then
  stanza "There's a readme for this port:"
  echo "==========================================="
  more $path/readme.autoport
  echo "==========================================="
fi

# any errors?
$failed && die "There's been an error. Please write SlackBuild by hand."

# portpkg?
if $build_pkg; then
  ask "* Next step: Call portpkg. Continue? (ctrl-c to quit)"
  # ok, if this port is new, it has no dependencies, if it's rewritten,
  # let's assume, the user wants to rebuild only this port
  portpkg -q $group/$name
fi

exit 0

#----------------------------------------

#!SlackBuild.skel
TMP=${TMP:-/tmp}
CWD=`pwd`
NAME=`basename $CWD`
PKG=$TMP/package-$NAME

VERSION=%version%
##SRCVER=%srcver% ##srcver
ARCH=%arch%
BUILD=%build%

#!slkcflags
if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

#!slkcflags
rm -rf $PKG
mkdir -p $PKG/usr
cd $TMP || exit 1
rm -rf $NAME-$VERSION || exit 1 ##extra_sdp
mkdir -p $NAME-$VERSION ##extra_sdp
cd $NAME-$VERSION || exit 1 ##extra_sdp
##rm -rf %srcdirprefix% || exit 1 ##cd_sdp
#!rpm
rpm2targz $CWD/%tarball%
tar xzvf `basename %tarball% .rpm`.tar.gz
tar xzvf $NAME-$VERSION.tar.gz
#!rpm
tar x%tarmode%vf $CWD/%tarball% || exit 1 ##tar
cd %srcdirprefix% || exit 1 ##cd_sdp
cat $CWD/*.patch | patch -p1 --verbose ##patch
chown -R root.root .
##find . -perm %perm644% -exec chmod 644 {} \; ##perms644
##find . -perm %perm755% -exec chmod 755 {} \; ##perms755
#!meta-config
./autogen.sh || exit 1 ##cfg_autogen
#!cfg_configure
CFLAGS="$SLKCFLAGS" \ ##cflags
CXXFLAGS="$SLKCFLAGS" \ ##cxxflags
./configure \
  --prefix=/usr \ ##ac_prefix
  --sysconfdir=/etc \ ##ac_sysconfdir
  --localstatedir=/var/lib \ ##ac_localstatedir
##  --program-prefix="" \ ##ac_program_prefix
  --disable-static \ ##ac_disable_static
  $ARCH-slackware-linux || exit 1
#!cfg_configure
perl Makefile.PL || exit 1 ##cfg_perl
find -name Makefile | xargs sed -i "s,/usr/local/etc,$PKG/etc,g" ##cfg_mk_hard
find -name Makefile | xargs sed -i "s,/usr/local/var,$PKG/var,g" ##cfg_mk_hard
find -name Makefile | xargs sed -i "s,/usr/local,$PKG/usr,g" ##cfg_mk_hard
##find -name Makefile | xargs sed -i "s,/share/doc,/doc,g" ##fix_mk_doc
##find -name Makefile | xargs sed -i "s,/share/man,/man,g" ##fix_mk_man
#!meta-config
#%config-fix%
#%post-config-fix%
#!meta-install
make || exit 1 ##mk
##make PREFIX=/usr || exit 1 ##mk_PREFIX
##make prefix=/usr || exit 1 ##mk_prefix
GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1 \ ##schemas
make install DESTDIR=$PKG || exit 1 ##inst_destdir
make install PREFIX=$PKG/usr || exit 1 ##inst_PREFIX
make install prefix=$PKG/usr || exit 1 ##inst_prefix
make install || exit 1 ##inst
python setup.py build install --root=$PKG || exit 1 ##inst_python
GCONF_CONFIG_SOURCE="xml::$PKG/etc/gconf/gconf.xml.defaults" \ ##schemas
gconftool-2 --makefile-install-rule $PKG/etc/gconf/schemas/*.schemas ##schemas
#!meta-install
#%install-fix%
#%post-install-fix%
find $PKG/ -type d -name bin -o -name sbin | xargs -r chown -R root.bin
#!strip
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -d : -f 1 | xargs -r strip --strip-unneeded
  find . | xargs file | grep "shared object" | grep ELF | cut -d : -f 1 | xargs -r strip --strip-unneeded
)
#!strip
#!meta-doc
find $PKG/usr/share/{man,doc} -maxdepth 0 | xargs -r -i mv {} $PKG/usr/
mkdir -p $PKG/usr/doc/$NAME-$VERSION
cp -a \ ##docs
  %docs% \ ##docs
  $PKG/usr/doc/$NAME-$VERSION/ ##docs
find $PKG/usr/doc -type f | xargs -r chmod 644
find $PKG/usr/doc -type d | xargs -r chmod 755
find $PKG/usr/{man,info} -type f | xargs -r gzip -9
#!meta-doc
#%doc-fix%
#%post-doc-fix%
mkdir -p $PKG/install
cat $CWD/slack-desc >$PKG/install/slack-desc
cat $CWD/doinst.sh >$PKG/install/doinst.sh ##doinst

cd $PKG || exit 1
makepkg -p -l y -c n $TMP/$NAME-$VERSION-$ARCH-$BUILD.tgz
#!SlackBuild.skel

#!doinst.sh_config
config() {
  NEW="$1"
  OLD="`dirname $NEW`/`basename $NEW .new`"
  # If there's no config file by that name, mv it over:
  if [ ! -r $OLD ]; then
    mv $NEW $OLD
  elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then # toss the redundant copy
    rm $NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
#!doinst.sh_config
