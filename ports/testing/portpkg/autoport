#!/bin/sh
#
# Autoport -- An Automatic SlackBuild Generator
# Copyright (C) 2004, 2005 Thomas Pfaff <topf@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

source `which portpkg` || exit 1
t=`mktemp -d`

sections="config post-config install post-install strip doc post-doc"

ask()
{
  $i_act || return
  echo
  echo -n "$@ "
  s=""
  read s
}

check()
{
  local pattern=$1
  shift
  local desc=`echo $pattern | sed "s,[\^\$],,g"`
  if egrep -qe "$pattern" "$@" 2>/dev/null; then
    row "Checking for $desc... yes"
    return 0
  else
    row "Checking for $desc... no"
    return 1
  fi
}

snip()
{
  # the "#:tag ... #:tag" method
  sed -i "/^#:$1$/,/^#:$1$/d" $2
  # the "xxx ##tag1 tag2" method
  sed -i "/##\(\|.* \)$1\($\| \)/d" $2
}

encode()
{
  local ver=`echo $version | sed "s,\.,\.,g"`
  local enc=`echo "$@" | sed -e "s,$name,\\$NAME,g" -e "s,$ver,\\$VERSION,g"`
  local test
  local NAME=$name
  local VERSION=$version
  eval test=\"$enc\"
  # try ${NAME} and ${VERSION}
  [ "$test" != "$@" ] && enc=`echo "$@" | sed -e "s,$name,\\${NAME},g" -e "s,$ver,\\${VERSION},g"`
  echo "$enc"
}

decode()
{
  local NAME=$name
  local VERSION=$version
  eval echo \"$@\"
}

add_inst() # rel/path/to/command_to_add file
{
  local s1=`basename $(echo $1 | cut -d " " -f 1)`
  local s2=`basename $2`
  # first remove old inst
  remove_inst $s1 $2
  # check for old style ("command bla")
  if grep -sq "$s1" $2 && ! grep -sq "^if .*/$s1" $2; then
    # one-liner: remove it
    sed -i "\,$s1,d" $2
  fi
  # remove to make sure, it's correct
  [ -f $2 ] && sed -i "/^if .*\/$s1/,/^fi$/d" $2
  # check for new style ("if [ -x command ]; then...")
  if ! grep -sq "$s1" $2; then
    row "Adding $s1 to $s2"
    echo "if [ -x `echo $1 | cut -d " " -f 1` ]; then" >>$2
    echo "  $1 >/dev/null 2>&1" >>$2
    echo "fi" >>$2
  fi
}

remove_inst() # command_to_remove file
{
  local s1=`basename $1`
  local s2=`basename $2`
  if grep -sq "$s1" $2; then
#    row "Removing unneeded $s1 from $s2"
    # check for new style ("if [ -x command ]; then...")
    if grep -sq "^if .*/$s1" $2; then
      sed -i "/^if .*\/$s1/,/^fi$/d" $2
    else
      # old style ("command bla")
      sed -i "\,$s1,d" $2
    fi
  fi
}

is_root || die

# first: do we have tags?
[ "$MY_TAG" ] || die "No tag set. Please run 'pp-config'!"

# defaults
i_act=true
sources=""
name=""
group=""
arch=$ARCH
build=""
build_pkg=false

# parse options
if [ "$*" ]; then
  while [ "$1" ]; do
    case $1 in
      -a)
        i_act=false;;
      -v)
        version=$2
        shift;;
      -g)
        group=`echo $2 | cut -d / -f 1`
        shift;;
      -n)
        name=`echo $2 | cut -d / -f 1`
        shift;;
      -u)
        get_info $2
        # use abstract url
        sources=`encode "$sources"`
        arch=`echo $package | rev | cut -d - -f 2 | rev`
        shift;;
      -b)
        build_pkg=true;;
      *://*)
        sources=$1;;
      *)
        # usage
        stanza "Usage: autoport [-a] [-n name] [-v version] [-g group] [-u port] [-b] [source url]
Options:
  -a             Run non-interactive (use defaults)
  -n name        Preset name of port
  -v version     Preset version of port
  -g group       Preset group of port
  -u port        Use port
  -b             Execute portpkg after port generation
  source url     Preset URL of source code (if not found via -u)

Switches available for remove (#-):
  "`grep "^#:.*$" $0 | sort -u | cut -c 3-`"
Switches available for insert (#+) and replace (#=):
  "`grep "^#%post-.*$" $0 | sed "s,^#%post-,,;s,%$,,"`
        exit 1;;
    esac
    shift
  done
fi

$i_act && stanza "Autoport -- An Automatic SlackBuild Generator
Copyright (C) 2004, 2005 Thomas Pfaff <topf at users dot berlios dot de>
Autoport comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.

Autoport is quite experimental. A source code URL given, it will download and
unpack the code and searche for different keywords to adjust a suitable
SlackBuild script. If autoport doesn't work as expected, please mail at:
<topf at users dot berlios dot de>"

#[ "$sources" ] || die "No source url specified! Try: autoport --help"
[ "$group" ] || group=local

ask "* First step: Collect information. Continue? (ctrl-c to quit)"

# sources
ask "Source file URL [$sources]:"
sources=${s:-$sources}
[ "$sources" ] || die "Nothing entered. Eh? I can't help you this way!"
sources=`echo "$sources" | sed -e "s,://prdownloads\.,://dl.," -e "s,\?download$,,"`
# we can only handle _one_ source file
src=`echo "$sources" | head -n 1`
# name: guess it, if we haven't yet it
file=`basename $(decode $src)`
raw_name=`echo $file | rev | cut -d - -f 2- | rev`
[ "$name" ] || name=`echo $raw_name | tr "A-Z" "a-z"`
ask "Name [$name]:"
name=${s:-$name}
# group
ask "Group [$group]:"
group=${s:-$group}
# version
if ! [ "$version" ]; then
  # version: should be always guessed
  version=`echo $file | rev | cut -d - -f 1 | rev`
  version=`basename $version .tar.gz`
  version=`basename $version .tar.bz2`
  version=`basename $version .tgz`
fi
ask "Version [$version]:"
version=${s:-$version}
srcver=$version
version=`echo $version | sed "s,-,,g"`
# arch
ask "Arch [$arch]:"
arch=${s:-$arch}
# build: check if we need to increase it
n=1
gpkg=`ls_slk | slk2loc | loc2gpkg | grep -m 1 "^$group/$name-$version-$arch-[0-9]*$MY_TAG$"`
if [ $gpkg ]; then
  $i_act && stanza "There is already $gpkg."
  # find it
  while [ "$group/$name-$version-$arch-$n$MY_TAG" != $gpkg ]; do
    ((n++))
    [ "$n" == "1000" ] && die "Strange: Cannot find build number!"
  done
  # now that we found it, we can find a bigger number too!
  ((n++))
fi
ask "Build [$n$MY_TAG]:"
build=${s:-$n$MY_TAG}
# desc
if [ "$description" ]; then
  desc1=`echo "$description" | sed "s,^$name:[ ]*,," | head -n 1`
  desc2=`echo "$description" | sed "s,^$name:[ ]*,," | sed "1,2d"`
else
  desc1=$raw_name
fi
ask "Description (1-liner) [$desc1]:"
desc1=${s:-$desc1}
if $i_act; then
  stanza "Description (details) (Write or paste and finish with a single '.')"
  echo "[$desc2]"
  s=""
  while [ "$l" != "." ]; do
    read l
    s="$s
$l"
  done
  s=`echo "$s" | sed -e "1d" -e "/^\.$/d"`
fi
desc2=${s:-$desc2}
# combine $desc1 and $desc2
len=${#name}
desc=`{ echo "$name: $desc1"
        echo "$name:"
        echo "$desc2" | fmt -u -w $((75-len)) | sed "s,^,$name: ,"
        for i in 1 2 3 4 5 6 7 8 9; do
          echo "$name:"
        done; } | head -n 11`

if [ "$group" != "local" ] && [ "$script" ]; then
  path=`dirname $script`
else
  path=$PRT_DIR/$group/$name
  script=$path/SlackBuild
fi

if $i_act; then
  echo
  echo "Creating now a port with this information:"
  echo
  echo "PACKAGE NAME:  $name-$version-$arch-$build"
  echo "SCRIPT LOCATION:  $script"
  echo "SOURCE LOCATION:  $sources" | fmt -u
  echo "PACKAGE DESCRIPTION:"
  echo "$desc"
fi

ask "Last chance to quit. Port scripts will now be written.
* Next step: Downloading and checking source code. Continue? (ctrl-c to quit)"

# now we should redecode the actual source name
sources=`decode "$sources"`
src=`echo "$sources" | head -n 1`
file=`basename $(decode $src)`

if [ -f $path/stop.autoport ]; then
  stanza "There's a warning not to autoport this source code:"
  echo "==========================================="
  more $path/stop.autoport
  echo "==========================================="
  die
fi
if [ -d $path ]; then
  ask "* This port ($path) already exists. Really go on? (ctrl-c to quit)"
fi

stanza "Autoporting $group/$name-$version-$arch-$build:"
mkdir -p $path
touch $script

# first convert old tags ("#+...-fix")...
sed -i "s,^#+post-doc-fix$,#+docfiles,g" $script
sed -i "s,^#+doc-fix$,#=docfiles,g" $script
sed -i "s,^#+post-\(.*\)-fix$,#+\1,g" $script
sed -i "s,^#+\(.*\)-fix$,#=\1,g" $script
# ...and old-style (post-config-fix.autoport) files
for i in `find $path/*.autoport 2>/dev/null`; do
  fix=`basename $i -fix.autoport`
  case $fix in
    post-*)
      fix=`echo $fix | sed "s,^post-,,"`
      meth="+";;
    *)
      meth="=";;
  esac
  echo "#$meth$fix" >>$script
  cat $i >>$script
  echo "#$meth$fix" >>$script
  # obsolete
  rm $i
done

# check the script for inline-fixes
for i in `grep "^#[+-=]" $script | cut -c 2-`; do
  fix=`basename $i`
  case $i in
    +*|=*)
      # "#+tag...#+tag"-style: append
      # "#=tag...#=tag"-style: replace
      sed -n "/^#$i$/,/^#$i$/p" $script >$t/$fix;;
    -*)
      # "#-tag"-style: remove
      sed -n "/^#$i$/p" $script >$t/$fix;;
  esac
done

# downlaod source file
if [ -f $SRC_DIR/$file ]; then
  row "$file found in $SRC_DIR/"
else
  row "Downloading $file"
  VERBOSE=true
  output=/dev/stdout
  case $src in
    cvs://*)
      get `decode $src` $CVS_DIR/$file || die;;
    *)
      get `decode $src` $SRC_DIR/$file || die;;
  esac
fi

# write skeletons
failed=false
sed '/^#_SlackBuild.skel$/,/^#_SlackBuild.skel$/!d' $0 >$script
#sed -i "s,%portpkg_version%,$ENGINE_VER," $script
echo `encode "$sources"` >$path/sources
echo "$desc" >$path/slack-desc
sed -i "s,%version%,$version," $script
sed -i "s,%build%,$build," $script

# format
echo -n "  --> Checking format... "
mkdir -p $t/src
case $file in
  *.tar.bz2)
    format=tarbz2
    tar xjf $SRC_DIR/$file -C $t/src/ || die "Error while unpacking, maybe wrong URL?"
    tar tjf $SRC_DIR/$file >$t/footprint
    echo ".tar.bz2"
    sed -i "s,%tarmode%,j," $script
    snip rpm $script;;
  *tar.gz|*.tgz) # yes, there was one file called "xxxtar.gz"!
    format=targz
    tar xzf $SRC_DIR/$file -C $t/src/ || die "Error while unpacking, maybe wrong URL?"
    tar tzf $SRC_DIR/$file >$t/footprint
    echo ".tar.gz"
    sed -i "s,%tarmode%,z," $script
    snip rpm $script;;
  *.src.rpm)
    format=srpm
    ( cd $t/
      rm -rf `basename $file .rpm`.tar.gz
      cp $SRC_DIR/$file .
      rpm2targz $file
      tar xzf `basename $file .rpm`.tar.gz
      tar xzf `basename $file .src.rpm`/$name-$version.tar.gz -C $t/src/
      tar tzf `basename $file .src.rpm`/$name-$version.tar.gz >$t/footprint ) \
    || die "Error while unpacking, maybe wrong URL?"
    echo ".src.rpm"
    snip tar $script;;
  *)
    echo "unknown!"
    die "Unknown source format, please write SlackBuild manually!";;
esac
tarball=`encode "$file"`
sed -i "s,%tarball%,$tarball," $script

# source-prefix
echo -n "  --> Checking source-prefix... "
srcdir_prefix=`cat $t/footprint | sed "s,^\./,," | cut -d / -f 1 | sort -u`
if [ `echo "$srcdir_prefix" | wc -l` == 1 ] && [ "$srcdir_prefix" != "." ]; then
  echo "$srcdir_prefix/"
  if [ "$format" == "srpm" ]; then
    :
  else
    snip extra_sdp $script
  fi
  srcdir_prefix_out=`encode "$srcdir_prefix"`
  sed -i "s,%srcdirprefix%,$srcdir_prefix_out," $script
else
  echo "no prefix"
  snip cd_sdp $script
  srcdir_prefix="."
  sed -i "s,%srcdirprefix%,\$NAME-\$VERSION," $script
  mkdir $t/src/$name-$version
  mv $t/src/* $t/src/$name-$version
  rm -rf $TMP/$name-$version
fi

# now, move it to $TMP as user expects it to be
chown nobody.nogroup -R $t/src/*
rm -rf $TMP/$srcdir_prefix
mv $t/src/* $TMP/

# snip srcdir_prefixed in footprint
sed -i "s,^\./,," $t/footprint
sed -i "s,^$srcdir_prefix/,," $t/footprint

# re-insert the fixes
for i in `find $t/[+-=]* -exec basename {} \; 2>/dev/null`; do
  fix=`echo $i | cut -c 2-`
  if ! [ -s $t/$i ]; then
    rm $t/$i
    continue
  fi
  case $i in
    -*|=*)
      row "Removing section $fix"
      snip $fix $script;;
  esac
  row "Inserting $fix-fix"
  sed -i "\,^#%post-$fix%$,r$t/$i" $script
done

# include patches
if [ "`ls $path/*.patch 2>/dev/null`" ]; then
  row "Including patches (Please check them!)"
else
  snip patch $script
fi
if [ "`ls $path/*.patch.gz 2>/dev/null`" ]; then
  row "Including patches (Please check them!)"
else
  snip patchgz $script
fi

# docfiles
if grep -sq "#:docfiles" $script; then
  docs=`egrep "^ABOUT$|^ABOUT-NLS$|^ANNOUNCE$|^AUTHORS$|^CONFIGURATION$|^CHANGES$\
|^COPYING$|^COPYRIGHT$|^CREDITS$|^ChangeLog$|^Changelog$|^CHANGELOG$\
|^CONTRIBUTORS$|FAQ|^FEATURES$|^FILES$|^HACKING$|^History$|^HISTORY$|^INSTALL\
|^LICENSE$|^LSM$|^MANIFEST$|^NEWS$|README|Readme|^SITES$|RELEASE|^RELNOTES$\
|^THANKS$|^TIPS$|^TODO$|^VERSION$|^CONFIGURATION|^GPL$|^License$|^Doc$|^doc$\
|^Docs|^docs|^Roadmap$|^ROADMAP$|BUGS|^index.ht|INDEX" $t/footprint \
| grep -v / | sort -u | xargs`
  if [ "$docs" ]; then
    row "Checking docs... $docs."
    sed -i "s,%docs%,$docs," $script
  else
    row "Checking docs... none."
    snip docfiles $script # snip doc?
  fi
fi

# config
if grep -sqe "#:config" -e "#:make" $script; then
  row "Checking config method"
  if check "^Makefile.PL$" $t/footprint; then
    # Makefile.PL is first choice
#    snip autogen $script
    snip configure $script
    snip make_PREFIX $script
    snip make_prefix $script
    arch=noarch
  else
    snip perl $script
    if check "^configure(|\.in|\.in\.in)$" $t/footprint; then
      if check "KDEDIRS" $TMP/$srcdir_prefix/configure; then
        sed -i "s,%prefix%,opt/kde,g" $script
        snip configure_sysconfdir $script
        snip configure_localstatedir $script
      else
        check "--prefix" $TMP/$srcdir_prefix/configure* || snip configure_prefix $script
        check "--sysconfdir" $TMP/$srcdir_prefix/configure* || snip configure_sysconfdir $script
        check "--localstatedir" $TMP/$srcdir_prefix/configure* || snip configure_localstatedir $script
      fi
      check "--program-prefix" $TMP/$srcdir_prefix/configure* || snip configure_program_prefix $script
      check "--disable-static" $TMP/$srcdir_prefix/configure* || snip configure_disable_static $script
      snip autogen $script
      snip make_prefix $script
      snip make_PREFIX $script
    elif check "^autogen.sh$" $t/footprint; then
      :
    else
      snip configure $script
#      snip autogen $script
      snip make $script
      if check "^Makefile$" $t/footprint; then
        if check "PREFIX" $TMP/$srcdir_prefix/Makefile*; then
          snip make_prefix $script
        else
          snip make_PREFIX $script
          if check "prefix" $TMP/$srcdir_prefix/Makefile*; then
            :
          else
            snip make_prefix $script
            warn "Don't know how to configure this package."
          fi
        fi
      elif check "^setup\.py$" $t/footprint; then
        snip make_prefix $script
        snip make_PREFIX $script
        arch=noarch
      else
        warn "Don't know how to configure this package."
      fi
    fi
  fi
fi

# if prefix is still undefined, set it to /usr
sed -i "s,%prefix%,usr,g" $script

# install
if grep -sq "#:install" $script; then
  row "Checking install method"
  # make sure not to leave make install when setup.py is there!
  if ! check "^setup\.py$" $t/footprint \
  && check "^Makefile" $t/footprint; then
    snip python $script
    # Makefile.PL will always use DESTDIR
    if check "^Makefile.PL$" $t/footprint \
    || check "DESTDIR" $TMP/$srcdir_prefix/Makefile*; then
      snip install_PREFIX $script
      snip install_prefix $script
    else
      snip install_destdir $script
      if check "PREFIX" $TMP/$srcdir_prefix/Makefile*; then
        snip install_prefix $script
      else
        snip install_PREFIX $script
        if check "prefix" $TMP/$srcdir_prefix/Makefile*; then
          :
        else
          snip install_prefix $script
          error "Don't know how to install this package (no install-prefix)."
          failed=true
        fi
      fi
    fi
  # as always, check setup.py at last! use configure if possible!
  elif check "^setup\.py$" $t/footprint; then
    snip make $script
    snip install_destdir $script
    snip install_PREFIX $script
    snip install_prefix $script
  else
    error "Don't know how to install this package (no Makefile)."
    failed=true
  fi
fi

# check if we need to snip perl again (for the case, we have a config-fix)
grep -sq "^Makefile.PL$" $t/footprint || snip perl $script

# cflags
if ! check "CFLAGS" $TMP/$srcdir_prefix/*; then
  snip cflags $script
fi

# cxxflags
if ! check "CXXFLAGS" $TMP/$srcdir_prefix/*; then
  snip cxxflags $script
fi

# slkcflags
grep -sqe "^CFLAGS" -e "^CXXFLAGS" $script || snip slkcflags $script

# gconf schemas (first remove gconf() and all gconf calls in doinst.sh)
if [ -f $path/doinst.sh ]; then
  sed -i "/^gconf /d" $path/doinst.sh
  sed -i "/^gconf()/,/^}$/d" $path/doinst.sh
fi
if check "\.schemas(|\.in|\.in\.in)$" $t/footprint; then
  row "Adding gconf() to doinst.sh"
  sed '/^#_doinst.sh_gconf$/,/^#_doinst.sh_gconf$/!d' $0 >>$path/doinst.sh
  row "Adding gconf schemas installations in doinst.sh"
  find $TMP/$srcdir_prefix/ -name "*.schemas*" -exec basename {} \; \
  | sed -r "s,^(.*)\.schemas.*$,gconf etc/gconf/schemas/\1.schemas,g" | sort -u >>$path/doinst.sh
else
  snip schemas $script
fi

# old inst()
if grep -sq "^inst()" $path/doinst.sh; then
  row "Removing old inst() from doinst.sh"
  sed -i "/^inst()/,/^}$/d" $path/doinst.sh
fi

# scrollkeeper
if check "\.omf$" $t/footprint; then
  add_inst "usr/bin/scrollkeeper-update -p var/lib/scrollkeeper" $path/doinst.sh
else
  remove_inst "scrollkeeper-update" $path/doinst.sh
  snip scrollkeeper $script
fi

# mime-update
if check "\.(keys|mime)(|\.in|\.in\.in)$" $t/footprint; then
  add_inst "usr/bin/update-mime-database usr/share/mime" $path/doinst.sh
else
  remove_inst "update-mime-database" $path/doinst.sh
fi

# desktop-database
if check "\.desktop(|\.in|\.in\.in)$" $t/footprint; then
  add_inst "usr/bin/update-desktop-database" $path/doinst.sh
else
  #remove_inst "update-desktop-database" $path/doinst.sh
  grep -sq "update-desktop-database" $path/doinst.sh \
  && warn "update-desktop-database seems removed. Please check!"
fi

# config() subroutine needed?
if [ -f $path/doinst.sh ]; then
  sed -i "/^config()/,/^}$/d" $path/doinst.sh
fi
if grep -sq "\.new" $script; then
  row "Adding config() to doinst.sh"
  # insert it on top of doinst.sh
  sed '/^#_doinst.sh_config$/,/^#_doinst.sh_config$/!d' $0 >>$t/doinst.sh
  cat $path/doinst.sh >>$t/doinst.sh
  cat $t/doinst.sh >$path/doinst.sh
fi

# if doinst.sh is emtpy, remove it
if [ -f $path/doinst.sh ] && ! [ -s $path/doinst.sh ]; then
  row "Removing empty doinst.sh"
  rm $path/doinst.sh
fi

# doinst.sh at all?
[ -f $path/doinst.sh ] || snip doinst $script
[ -f $path/doinst.sh.gz ] || snip doinstgz $script

# now arch should be known
case $arch in
  noarch)
    sed -i "s,%arch%,$arch," $script
    snip cflags $script
    snip strip $script;;
  *)
    # we know better than the user ;-)
    sed -i "s,%arch%,\${ARCH:-i486}," $script;;
esac

# clean up
sed -i "/^#[:#%_]/d" $script
sed -i "s, *##[^ ]*,,g" $script
if [ -f $path/doinst.sh ]; then
  sed -i "/^#/d" $path/doinst.sh
  sed -i "s, *##[^ ]*,,g" $path/doinst.sh
fi

# summary
if [ -f $path/readme.autoport ]; then
  stanza "There's a readme for this port:"
  echo "==========================================="
  more $path/readme.autoport
  echo "==========================================="
fi

# any errors?
$failed && die "There's been an error. Please write SlackBuild manually."

# portpkg?
if $build_pkg; then
  ask "* Next step: Call portpkg. Continue? (ctrl-c to quit)"
  # ok, if this port is new, it has no dependencies, if it's rewritten,
  # let's assume, the user wants to rebuild only this port
  portpkg -q $group/$name
fi

exit 0

#----------------------------------------

#_SlackBuild.skel
#:head
TMP=${TMP:-/tmp}
CWD=`pwd`
NAME=`basename $CWD`
PKG=$TMP/package-$NAME

VERSION=%version%
ARCH=%arch%
BUILD=%build%

#:head
#%post-head%
#:slkcflags
if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

#:slkcflags
#%post-slkcflags%
#:prepare
rm -rf $PKG
mkdir -p $PKG/%prefix%
cd $TMP
rm -rf $NAME-$VERSION ##extra_sdp
mkdir -p $NAME-$VERSION ##extra_sdp
cd $NAME-$VERSION ##extra_sdp
rpm2targz $CWD/%tarball% ##rpm
tar xzvf `basename %tarball% .rpm`.tar.gz ##rpm
tar xzvf $NAME-$VERSION.tar.gz ##rpm
tar x%tarmode%vf $CWD/%tarball% ##tar
cd %srcdirprefix% ##cd_sdp
cat $CWD/*.patch | patch -p1 --verbose ##patch
zcat $CWD/*.patch.gz | patch -p1 --verbose ##patchgz
chown -R root.root .
#:prepare
#%post-prepare%
#:config
#:configure
./autogen.sh ##autogen
CFLAGS="$SLKCFLAGS" \ ##cflags
CXXFLAGS="$SLKCFLAGS" \ ##cxxflags
./configure \
  --prefix=/%prefix% \ ##configure_prefix
  --sysconfdir=/etc \ ##configure_sysconfdir
  --localstatedir=/var/lib \ ##configure_localstatedir
  --program-prefix="" \ ##configure_program_prefix
  --disable-static \ ##configure_disable_static
  $ARCH-slackware-linux
#:configure
perl Makefile.PL ##perl
make PREFIX=/%prefix% ##make_PREFIX
make prefix=/%prefix% ##make_prefix
#:config
#%post-config%
#:install
python setup.py build install --root=$PKG ##python
make ##make
GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1 \ ##schemas
make install DESTDIR=$PKG ##install_destdir
make install PREFIX=$PKG/%prefix% ##install_PREFIX
make install prefix=$PKG/%prefix% ##install_prefix
#:install
#%post-install%
#:refine
rm -rfv $PKG/usr/lib/perl?/?.?.?/*-linux/perllocal.pod ##perl
rm -rfv $PKG/var/lib/scrollkeeper ##scrollkeeper
rm -rfv $PKG/usr/info/dir
find $PKG/usr/share/mime/ -empty -exec rm -v {} \; || true
chown -R root.bin $PKG/{usr/X11R6/bin,{,usr/}{,s}bin} || true
#:refine
#%post-refine%
#:strip
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -d : -f 1 | xargs -r strip --strip-unneeded
  find . | xargs file | grep "shared object" | grep ELF | cut -d : -f 1 | xargs -r strip --strip-unneeded
  find . | xargs file | grep "current ar archive" | cut -d : -f 1 | xargs -r strip --strip-debug
)
#:strip
#%post-strip%
#:doc
mv $PKG/usr/share/{man,doc} $PKG/usr/ || true
gzip -9 $PKG/usr/{info,man/{,*/}man?}/* || true
mkdir -p $PKG/usr/doc/$NAME-$VERSION
#:docfiles
cp -a \
  %docs% \
  $PKG/usr/doc/$NAME-$VERSION/
#:docfiles
#%post-docfiles%
find $PKG/usr/doc -type f -exec chmod 644 {} \;
find $PKG/usr/doc -type d -exec chmod 755 {} \;
#:doc
#%post-doc%
#:tail
mkdir -p $PKG/install
cat $CWD/slack-desc >$PKG/install/slack-desc
cat $CWD/doinst.sh >$PKG/install/doinst.sh ##doinst
zcat $CWD/doinst.sh.gz >$PKG/install/doinst.sh ##doinstgz

cd $PKG
makepkg -p -l y -c n $TMP/$NAME-$VERSION-$ARCH-$BUILD.tgz

if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP/%srcdirprefix%
  rm -rf $PKG
fi
#:tail
#%post-tail%
#_SlackBuild.skel

#_doinst.sh_config
config() {
  NEW="$1"
  OLD="`dirname $NEW`/`basename $NEW .new`"
  # If there's no config file by that name, mv it over:
  if [ ! -r $OLD ]; then
    mv $NEW $OLD
  elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then # toss the redundant copy
    rm $NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
#_doinst.sh_config

#_doinst.sh_gconf
gconf() {
  if [ -x usr/bin/gconftool-2 ]; then
    GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source` \
    usr/bin/gconftool-2 --makefile-install-rule $1 >/dev/null 2>&1
  fi
}
#_doinst.sh_gconf
