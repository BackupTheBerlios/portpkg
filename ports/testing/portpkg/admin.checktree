#!/bin/sh -u
# admin.checktree -- make some random checks to the ports tree
#                    run this from time to time
#                    FOR PORTPKG ADMINISTRATION ONLY

# with some great ideas supposed by hnaz

. `which portpkg` || exit 1

summary=`mktemp -d`

check_ports()
{
  local t=`mktemp -d`
  ports_all=`do_list | grep -v $(exclude_ex) | grep -ve ^local/ | sort -u`
  ports=`echo "$ports_all" | grep -v "[0-9]$"`
  max=`echo "$ports" | wc -l | xargs`
  percent=3
  count=`expr $max \* $percent / 100`
  stanza "Checking now $count ($percent %) of $max random ports:"
  for n in `seq 1 $count`; do
    rnd=`expr $RANDOM \* $max / 32768`
    port=`echo "$ports" | sed -n "${rnd}p"`
    get_info `echo $port | pkg2name`
    row "Checking $group/$name (# $rnd)"
    for src in $sources; do
      if ! curl -f -m 30 -I ${src%\%*} >/dev/null 2>&1; then
        echo "$port ${src%\%*}" >>$summary/srcs
      fi
    done
    for dep in $requires $optional; do
      if ! echo "$ports_all" | grep -sq `regex $dep`; then
        echo "$port $dep" >>$summary/deps
      fi
    done
    fmver=`lynx -dump http://freshmeat.net/projects-xml/$name | grep latest_release_version | sed "s,.*>\(.*\)<.*,\1,"`
    if [ "$fmver" ] && [ "$fmver" != "$version" ]; then
      # fm has a different version, test it now
      for src in $sources; do
        if curl -f -m 30 -I ${src//$version/$fmver} >/dev/null 2>&1; then
          echo "$port $fmver" >>$summary/vers
        fi
      done
    fi
  done
}

check_overlaps()
{
#  stanza "Checking now overlaps with Slackware-10.0, -10.1 and -current:"
  stanza "Checking now overlaps with Slackware-current:"
  local t=`mktemp -d`
  list="current" #10.1 10.0"
  for i in $list; do
    wget -O $t/file_list.$i ftp://ftp.slackware.com/pub/slackware/slackware-$i/FILELIST.TXT
    grep -o "/.*-[^-]*-[^-]*-[^-]*\.tgz$" $t/file_list.$i | rev | cut -d / -f 1 | cut -d . -f 2- | rev >$t/list.$i
    cat $t/list.$i | rev | cut -d - -f 4- | rev >$t/list.$i.short
  done

  do_list | grep -v "[0-9]$" | sort -u >$t/list_ports.gn
  cat $t/list_ports.gn | grep -ve extra -e testing/ -e open/ | cut -d / -f 2 >$t/list_ports
  cat $t/list_ports | rev | cut -d - -f 4- | rev >$t/list_ports.short
  cat $t/list_ports.gn | grep -ve extra/ -e testing/ -e open/ -e pasture/ | cut -d / -f 2 | rev | cut -d - -f 4- | rev >$t/list_ports.current.short

  for i in $list; do
    stanza "PACKAGE: SLACKWARE-current: PORTS:"
    case $i in
      current)
        grep -xf $t/list.$i.short $t/list_ports.current.short;;
      *)
        grep -xf $t/list.$i.short $t/list_ports.short;;
    esac | while read s; do
      s1=`grep "^$s-[^-]*-[^-]*-[^-]*$" $t/list.$i | sed "s,^$s-,,"`
      s2=`grep "^$s-[^-]*-[^-]*-[^-]*$" $t/list_ports | sed "s,^$s-,," | head -n 1`
      echo "$s $s1 $s2"
    done
  done | column -t
}

check_open()
{
#TODO: check for ports in open/ that are old enough to suggest a merge
  :
}

doit()
{
  check_ports
  check_overlaps
  check_open
  stanza "CHECK THESE PORTS FOR VALID URLS:"
  cat $summary/srcs 2>/dev/null | column -t
  stanza "CHECK THESE PORTS FOR VALID DEPENDENCIES:"
  cat $summary/deps 2>/dev/null | column -t
  stanza "CHECK THESE PORTS FOR UPDATES:"
  cat $summary/vers 2>/dev/null | column -t
}

doit #2>/dev/null
