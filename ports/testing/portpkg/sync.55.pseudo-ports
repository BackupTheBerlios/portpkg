#BLURB="Slackware binary packages"

# check that we're a plug-in
if [ "`basename $0`" != "portpkg" ]; then
  echo "Don't run me directly!"
  exit 1
fi

sync_kernels()
{
  row "Preparing pseudo ports for kernels/"
  kver=`grep -o "[0-9]\.[0-9]\.[0-9][0-9]" $tree/z/kernels/VERSIONS.TXT`
#  karch=`grep -o "glibc-.*\.tgz$" FILELIST.TXT \
#  | grep $(regex glibc) | rev | cut -d - -f 2 | rev | head -n 1`
  # Slackware _is_ i486
  karch=i486
  grep \./kernels/ $tree/FILELIST.TXT | grep ^d | rev | cut -d / -f 1 \
  | rev | grep -v modules | while read flavour; do
    path=$tree/z/kernels/kernel-$flavour
    mkdir -p $path
    cat >$path/SlackBuild <<EOF
TMP=\${TMP:-/tmp}
CWD=\`pwd\`
NAME=\`basename \$CWD\`
PKG=\$TMP/package-\$NAME

VERSION=$kver
ARCH=$karch
BUILD=1

rm -rf \$PKG
mkdir -p \$PKG/boot
cd \$PKG/boot
cat \$CWD/bzImage >vmlinuz-$flavour-$kver
cat \$CWD/System.map.gz >System.map-$flavour-$kver.gz
cat \$CWD/config >config-$flavour-$kver
gunzip System.map-$flavour-$kver.gz
ln -s vmlinuz-$flavour-$kver vmlinuz-$flavour
ln -s System.map-$flavour-$kver System.map-$flavour
ln -s config-$flavour-$kver config-$flavour
mkdir -p \$PKG/install
cat \$CWD/slack-desc >\$PKG/install/slack-desc

cd \$PKG
makepkg -l y -c n /tmp/\$NAME-\$VERSION-\$ARCH-\$BUILD.tgz
EOF
    cat >$path/sources <<EOF
$dist/kernels/$flavour/bzImage%bzImage
$dist/kernels/$flavour/System.map.gz%System.map.gz
$dist/kernels/$flavour/config%config
EOF
    grep "\./kernels/$flavour/" $tree/CHECKSUMS.md5 | sed "s,  .*/,  ," >$path/md5sums
    cat >$path/slack-desc <<EOF
kernel-$flavour: Linux-$kver ($flavour)
kernel-$flavour:
kernel-$flavour: This is a Linux kernel version $kver with Slackware's
kernel-$flavour: $flavour-configuration.
kernel-$flavour:
kernel-$flavour: IF YOU ARE USING LILO, YOU MUST RUN \`lilo' NOW!
kernel-$flavour:
EOF
    touch $path/slot-in
  done
}

sync_section()
{
  section=$1
  # current has no patches
  [ "$DIST_VER" = "current" ] && [ "$section" = "patches" ] && return
  row "Preparing pseudo ports for $section/"
  grep "^$section/.*\.tgz$" $t/files | grep -v /source/ \
  | sed -r "s,^[^/]*/(.*)\.tgz$,\1," \
  | while read s; do
    pkg=`echo $s | sed -r "s,^.*/(.*)$,\1,"`
    name=`echo $pkg | rev | cut -d - -f 4- | rev`
    rel=`echo $pkg | rev | cut -d - -f 1-3 | rev`
    ver=`echo $rel | cut -d - -f 1`
    arch=`echo $rel | cut -d - -f 2`
    build=`echo $rel | cut -d - -f 3`
    if [ "$section" = "slackware" ]; then
      path=$tree/`echo $s | cut -d / -f 1`/$name
    elif [ "$section" = "patches" ]; then
      path=$tree/0/$section/$name
    else
      path=$tree/z/$section/$name
    fi
    mkdir -p $path
    cat >$path/SlackBuild <<EOF
TMP=\${TMP:-/tmp}

VERSION=$ver
ARCH=$arch
BUILD=$build

CWD=\`pwd\`
cp \$CWD/$name-\$VERSION-\$ARCH-\$BUILD.tgz \$TMP/
EOF
    echo "$dist/$section/$s.tgz%`basename $s`.tgz" >$path/sources
    grep "/$section/$s.tgz$" $tree/CHECKSUMS.md5 | sed "s,  .*/,  ," >$path/md5sums
    grep "^$name:" $tree/PACKAGES.TXT >$path/slack-desc
  done
}

is_defined DIST_VER || die

tree=$PRT_DIR/z/pseudo
dist=ftp://ftp.slackware.com/pub/slackware/slackware-$DIST_VER
mirror=`mirror $dist`

row "Syncing $tree/ with `echo $mirror | cut -d / -f 3` for $DIST_VER"

t=`mktemp -d`
mkdir -p $tree

$VERBOSE && local output=/dev/stdout || local output=/dev/null

# check if there're updates
wget -O $t/ChangeLog.txt $mirror/ChangeLog.txt 2>$output
if [ -f $tree/ChangeLog.txt ] && cmp -s $tree/ChangeLog.txt $t/ChangeLog.txt; then
  exit 0
fi

# rebuild the pseudo ports
rm -rf $tree
mkdir -p $tree/z/kernels

row "Retrieving FILELIST.TXT"
wget -O $tree/FILELIST.TXT $mirror/FILELIST.TXT 2>$output
row "Retrieving PACKAGES.TXT"
wget -O $tree/PACKAGES.TXT $mirror/PACKAGES.TXT 2>$output
row "Retrieving CHECKSUMS.md5"
wget -O $tree/CHECKSUMS.md5 $mirror/CHECKSUMS.md5 2>$output
row "Retrieving kernels/VERSIONS.TXT"
wget -O $tree/z/kernels/VERSIONS.TXT $mirror/kernels/VERSIONS.TXT 2>$output

# make a simple file list
cat $tree/FILELIST.TXT | tr -s " " | cut -d " " -f 8 | cut -c 3- >$t/files

# prepare sections
sync_section slackware
sync_section patches
sync_section extra
sync_section pasture
sync_section testing
sync_kernels

# make slot-ins for kernels and kernel-drivers
find $tree/ -name kernel-ide -exec touch {}/slot-in \;
find $tree/ -name kernel-generic -exec touch {}/slot-in \;
find $tree/ -name kernel-modules -exec touch {}/slot-in \;
find $tree/ -name alsa-driver -exec touch {}/slot-in \;

# no ctrl-c? make the changes valid
mv $t/ChangeLog.txt $tree/
