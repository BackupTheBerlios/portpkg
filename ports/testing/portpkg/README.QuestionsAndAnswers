QuestionsAndAnswers

   Note: This is a Wiki: you can add your questions by clicking EditThisPage!

   --------------------------------------------------------------------------

  Why?

   Well, in every case when I try to explain, I come to the final point that
   I can't: I simply like the idea of a ports system for Slackware. And more
   technically: I want to fill the gap in the causal connexion between
   .tgz-packages and SlackBuilds. Slackware is my favourite distribution and
   I'm certain that it could can benefit of a ports system.

   But generally, building packages by source gives you control over how it
   is compiled (included features) and what it will be. More than this,
   having build scripts in an open collection allows to improve quality.

  Who will use that?

   I want to target as much users as possible: For the puristic slacker it
   could be a helpful reference, kept in a simple CVS tree. For the novice it
   could be an installer that is easy to use. For the bleeding-edge-user it
   could be a system to have all your software up-to-date and made for your
   system.

  Why is it written in Bash?

   (I find no words.)

  Why not use Checkinstall?

   Checkinstall is a wrapper around installation routines that are not able
   to redirect installation destinations: If make install
   DESTDIR=/tmp/package is not supported, checkinstall could be an
   alternative. Although a lot of people think Checkinstall does the same as
   Portpkg does but simpler, the results are quite different: Apart from some
   cosmetics (stripping and chowning root.bin binaries, gzipping manpages and
   infos etc. pp.), the package building method is not saved, neither is the
   process logged. Naturally, both ways allow removepkg package afterwards.

  Why not use binary packages?

   See also the question Why? above: building packages by source gives you
   control over how it is compiled. If you install a binary package, you
   don't know which features are compiled in, or which are left out. (e.g. an
   aterm without transparency or a licq only linked against KDE (like the
   package from linuxpackages.net), and you don't want to use KDE). With
   portpkg you has the control, just like the three-step ./configure; make;
   make install way, but with getting a valid Slackware package.

  Is it safe?

   Since Portpkg uses Fakeroot, it is quite safe: Each SlackBuild (there're a
   few left exceptions) is started in a subshell as nobody via fakeroot (a
   programme that fakes root privileges, needed to virtually allow directives
   as chown root.root file to make proper ownerships in resulting
   .tgz-packages). This subshell is actually unprivileged, any attempt to
   touch a file that is not owned by nobody outside of fakeroot cannot be
   changed (test it: su nobody -c fakeroot and whoami; touch /test)!

   So what could happen ("worst case scenario")? Bad code introduced by bad
   source code or incomplete or bad packaging. Slackware's installpkg doesn't
   check for conflicting files (packages overwriting files of another
   package).

  Can I turn off "dependencies" and "requirements"?

   Yes, of course. Use -q in the command line or add NO_REQS=true in
   /etc/portpkg/local.conf.

  Does it work with installpkg and removepkg?

   Yes, it does. After building the package, portpkg calls upgradepkg
   --reinstall package which replaces your new packge with its older version,
   if there's one installed, otherwise it acts like a installpkg package. As
   any Slackware packages, you can remove it with removepkg package.

  How can I recompile a Slackware package for my CPU?

   Get your favorite SlackBuild (and all its files), add a proper entry in
   your ports tree (beneath local/) and add CFLAGS="$SLKCFLAGS" \ right
   before ./configure if it doesn't exist. You must set ARCH and CFLAGS in
   your /etc/portpkg/local.conf (use pp-config). See PortpkgGuide.

  Why is /tmp filled with so much data?

   Your /tmp directory will be filled with source code, object code and
   packages, which isn't needed anymore, once the package is built. It is
   recommended to delete that on every boot (see Filesystem Hierarchy
   Standard in Links):

 # echo 'rm -rf /tmp/*' >>/etc/rc.d/rc.local

  Can I redirect /tmp?

   Yes, you can. Add TMP=directory to /etc/portpkg/local.conf.

  What means "Cannot find required package xyz! Stopping."?

   It simply means that you need another package before you can install this
   one. As it is registered in the dependencies list of that port and
   couldn't be found on your system, I assume it is a package of the
   Slackware distribution. You can install it by hand (download that package
   from slackware.com and installpkg package) or you can import all Slackware
   packages to your ports tree: Run pp-config and configure it to use
   Slackware's binaries (resources). After next portpkg --sync Portpkg
   resolves dependencies to Slackware packages automatically.

  Why are there so few mirror list files? None of them fits my needs?

   You can use Portpkg without mirrors. You can add your own preferred mirror
   sites to mirrors.local. (And you can always propose mirror site that we
   can add to the public lists.)

  How can I customise download behaviour?

   Portpkg uses wget as download backend. Use man wget to learn how to adjust
   /etc/wgetrc.

  Can I use ccache with Portpkg?

   Yes, you can. All you need is to symlink gcc, g++ and cc in /usr/local/bin
   to /usr/bin/ccache. See man ccache. Note, that ccache (as each SlackBuild)
   will be run as user nobody with home directory /tmp, to set e.g. the max
   cache size, run su nobody and then export HOME=/tmp; ccache -M size.

  Why are some ports that are listed with --list not available?

   Generally, you can exclude ports (see /etc/portpkg/exclude and
   exclude.local). By default, the groups testing/ and open/ are excluded.
   However, you can use them when you call them with their group name
   (explicit): portpkg testing/experimental. Alternatively you can unlock
   ports if link them e.g. in local/:

 # ln -s ../testing/experimental /usr/ports/local/

  I'm using this Slackware-binaries-sync-addon-thing, but I want to use gcc-3.4
  from testing/. Portpkg always wants to downgrade to gcc-3.3 from d/. Hm?

   Make a symlink in local/ to gcc-3.4. local/ is always preferred, and
   Slackware's testing tree (in /usr/ports/z/bin/z/testing) is mostly
   overlapped by stable versions:

 # mkdir /usr/ports/local
 # cd /usr/ports/local
 # ln -s ../z/bin/z/testing/gcc .
 # portpkg -l
 local/gcc-3.4.3-i486-1
 (...)

   Now, you will have the gcc version in testing/ as default.

  With all those pseudo ports, how is Portpkg different from other attempts to
  do the same, how is Portpkg different from other Slackware tools?

   Other Slackware tools contain "slack" in the project name or at least
   start with an "s": slapt-get, slackpkg, swaret, slackports, slack-get,
   spkg... Portpkg is unique in this sense of feature: It starts with a "p",
   goes straight on with "ort", just to find its climax with another "p", and
   ends quick but sudden with "kg".

  After reading the main parts of this page, it seems to me, that portpkg only
  works with Slackware 10.0. But what's about Slackware 10.1 or the 9.x series?
  (still using slack 9.1, you know: never change a running system ;-)

   It should work fine on Slackware 10.1 and current (I'm running current).
   About 9.x series, I have read sometime about changes with some GNU tools
   options, but I didn't noted what it was. Also, I've never tested it on
   9.x.

   --------------------------------------------------------------------------


References

   Visible links
   . http://portpkg.berlios.de/doc.php?page=edit/QuestionsAndAnswers
   . file:///usr/ports/testing/portpkg/doc.php?page=PortpkgGuide
   . file:///usr/ports/testing/portpkg/doc.php?page=Links
   . file:///usr/ports/testing/portpkg/doc.php?page=edit/QuestionsAndAnswers
   . file:///usr/ports/testing/portpkg/doc.php?page=links/QuestionsAndAnswers
   . file:///usr/ports/testing/portpkg/doc.php?page=info/QuestionsAndAnswers
