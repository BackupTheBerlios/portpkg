#!/bin/sh -u
#
# Portpkg -- A ports system for Slackware Linux, written in Bash++
# Copyright (C) 2003-2005 Thomas Pfaff <topf at users dot berlios dot de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# include host-specific configuration overlay
[ -f /etc/portpkg/local.conf ] && . /etc/portpkg/local.conf

# default configuration
MAINTAIN_ALL=${MAINTAIN_ALL:-false}
VERBOSE=${VERBOSE:-false}
NO_REQS=${NO_REQS:-false}
LAZY_CHECKS=${LAZY_CHECKS:-false}

ARCH=${ARCH:-i486}
CFLAGS=${CFLAGS:-""}
MY_TAG=${MY_TAG:-""}
MY_EMAIL=${MY_EMAIL:-""}
MY_REALNAME=${MY_REALNAME:-""}

ROOT=${ROOT:-}
ADM_DIR=${ADM_DIR:-$ROOT/var/log}
SRC_DIR=${SRC_DIR:-$ROOT/usr/src/dist}
CVS_DIR=${CVS_DIR:-$ROOT/usr/src/cvs}
PKG_DIR=${PKG_DIR:-$ROOT/usr/obj/pkg}
PRT_DIR=${PRT_DIR:-$ROOT/usr/ports}
CFG_DIR=${CFG_DIR:-$ROOT/etc/portpkg}
TMP=${TMP:-/tmp}

# constant values, temporary dirs, cache files
ENGINE_VER=cvs
TMPDIR=`mktemp -d $TMP/portpkg-XXXXXX` || exit 1
export TMPDIR
INST_CACHE=`mktemp`
PKG_CACHE=`mktemp`
SCR_CACHE=`mktemp`
LOC_CACHE=`mktemp`
AVAIL_CACHE=`mktemp`
USE_CACHE=`mktemp`
EXCLUDE_CACHE=`mktemp`

# default arguments
action=do_add
download_only=false
prepare_only=false
reinstall=false
rebuild=false
remaintain=false
ignore_arch=false
dry_run=false
export_opt=""

# these variables will be set by get_info() (functions using "current port")
package="" name="" group="" version=""
script="" path="" description="" requires="" optional="" sources="" uses=""
pkg_file="" maintain="" tmp="" products=""

# rel   version-arch-build      "1.0-i486-3"
# pkg   name-rel                "bla-1.0-i486-3"
# gpkg  group/pkg               "l/bla-1.0-i486-3"
# gname group/name              "l/bla"
# scr   path/SlackBuild         "/usr/ports/l/bla/SlackBuild"
# virt  path-rel                "/usr/ports/l/bla-1.0-i486-3"

# message system
stanza() { [ "$*" ] && echo -e "\n$@"; }
row()    { echo -e "  --> $@"; }
warn()   { echo -e "WARNING: $@"; }
error()  { stanza "$@"; return 1; }
die()    { error "$@"; exit 1; }

# listers
ls_inst() # regex >pkg_list
{ cache $INST_CACHE "find $ADM_DIR/packages/ -type f | sed \"s,^.*/,,\"" "$@"; }
ls_pkg() # regex >virt_list
{ cache $PKG_CACHE "find $PKG_DIR/ -name \"*.tgz\" -follow | sed \"s,\.tgz$,,\"" "$@"; }
ls_scr() # regex >scr_list
{ cache $SCR_CACHE "find $PRT_DIR/ -name \"*SlackBuild\" -follow | sed \"s,^$PRT_DIR/local/,/0/,\" | sort -u | sed \"s,^/0/,$PRT_DIR/local/,\"" "$@"; }
ls_virt() # regex >virt_list
{ cache $LOC_CACHE "ls_scr | scr2virt" "$@"; }
ls_use() # regex >name_list
{ cache $USE_CACHE "explicit \`grep -vse ^# -e ^$ $CFG_DIR/use\`" "$@"; }
ls_exclude() # >regex_list
{ cache $EXCLUDE_CACHE "regex \`grep -vse ^# -e ^$ $CFG_DIR/exclude\`"; }

# converters
pkg2name()   { sed -r "s,^(.*)-.*-.*-.*$,\1,"; }
pkg2ver()    { sed -r "s,^.*-(.*)-.*-.*$,\1,"; }
pkg2rel()    { sed -r "s,^.*-(.*-.*-.*)$,\1,"; } 
virt2gpkg()  { sed -r "s,^.*/(.*/.*)$,\1,"; }
scr2gname()  { sed -r "s,.*/(.*/.*)/.*$,\1,"; }
scr2virt()   { xargs grep -sH "^VERSION=\|^ARCH=\|^BUILD=" -m 3 \
               | sed -un "\,:VERSION=,{s,/[^/]*:VERSION=,-,;N;s,\n.*=,-,;N;s,\n.*=,-,;s,\${ARCH:-[^}]*},$ARCH,;s,\${[A-Z]*:-\([^}]*\)},\1,g;p}"; }
#FIXME: preset $BUILD and $VERSION is not supported, only reset!
#gpkg2gname() { pkg2name "$@"; }
#gpkg2ver()   { pkg2ver "$@"; }
#gpkg2rel()   { pkg2rel "$@"; } 

# checks
has_args()   { [ "$*" ] || error "Too few arguments! Try: portpkg --help"; }
is_root()    { [ "`whoami`" = "root" ] || error "You must be root to run this action!"; }
has_prog()   { which $1 >/dev/null 2>&1 || error "Cannot find $1!"; }
has_ports()  { [ -d $PRT_DIR ] || error "No ports found! Try: portpkg --sync"; }
is_defined() { [ "`eval "echo \$$1"`" ] || error "Please define $1 in $CFG_DIR/local.conf!"; }
has_info()   { [ "$path" ] || error "Internal error! No information about current port found."; }

# basic functions

# cache the output of "action" and grep a regex
cache() # file action regex
{
  local file=$1 action=$2
  shift 2
  [ "$*" ] && local filter="grep $@" || local filter="cat"
  if [ -s $file ]; then
    $filter $file
  else
    eval "$action" | tee $file | $filter -
  fi
}

# generate a regular expression for grep from a pkgex-list
regex() # pkgex_list >regex_list
{
  [ $# = 1 ] && local pre="" || local pre=" -e "
  local arg
  for arg; do
    case $arg in
      */) # groups
          echo -n "$pre\(^\|\/\)$arg";;
      *)  # (g)names and (g)packages
          echo -n "$pre\(^\|\/\)$arg\(\|-[^-]*-[^-]*-[^-]*\)$";;
    esac
  done
  [ $# = 0 ] && echo "^$" || true
}

# resolve groups/ to names (note: do_list() doesn't use explicit()!)
explicit() # pkg_list >pkgex-list
{
  local arg
  for arg; do
    case $arg in
      */) ls_scr `regex $arg` | scr2gname | cut -d / -f 2;;
      *)  echo $arg;;
    esac
  done
  # "turbo mode": port is current dir
  [ $# = 0 ] && echo . || true
}

# find a mirror
mirror() # url >url
{
  local url=$1 t=`mktemp -d`
  if [ -s $CFG_DIR/mirrors ]; then
    grep -shve "^#" -e "^$" $CFG_DIR/mirrors >$t/mirrors
    local master mirror
    while read master mirror; do
      # use pathname expansion instead of regular expressions here
      case $url in $master*) url=$mirror${url#$master}; esac
    done <$t/mirrors
  fi
  echo "$url"
}

# print non-available, but installed ports
ls_diff() # >pkgex_list
{
  local t=`mktemp -d`

  # generate installed and available lists
  ls_virt | grep -v `ls_exclude` | virt2gpkg | cut -d / -f 2 >$t/avail
  ls_inst >$t/inst
  pkg2name <$t/avail >$t/avail.names
  pkg2name <$t/inst >$t/inst.names

  # find installed packages that are available
  local check
  fgrep -xf $t/avail.names $t/inst.names | while read check; do
    grep -xm 1 "$check-[^-]*-[^-]*-[^-]*" $t/avail >>$t/avail.check
    grep -xm 1 "$check-[^-]*-[^-]*-[^-]*" $t/inst >>$t/inst.check
  done

  # print differences
  if $ignore_arch; then
    # don't care about architecture differences
    sed -i "s,\(.*-.*\)-.*-\(.*\),\1-.*-\2," $t/avail.check
    sed -i "s,\(.*-.*\)-.*-\(.*\),\1-.*-\2," $t/inst.check
    fgrep -ivxf $t/inst.check $t/avail.check | sort -u | grep -xf - $t/avail
  else
    fgrep -vxf $t/inst.check $t/avail.check | sort -u
  fi
}

# get information about a port and write it into global variables
get_info() # pkgex
{
  if [ "$1" = "." ]; then
    # "turbo mode"
    $NO_REQS || warn "Turbo mode: Functionality limited!"
    NO_REQS=true
    name=`basename $(pwd)`
    script=`{ find $(pwd)/ -name "$name.SlackBuild" -maxdepth 1
              find $(pwd)/ -name "*SlackBuild" -maxdepth 1; } | head -n 1`
    local virt=`echo $script | scr2virt`
  else
    # find port (maybe an excluded one explicitly named?)
    case $1 in
      */*) local virt=`ls_virt $(regex $1) | head -n 1`;;
      *)   local virt=`ls_virt $(regex $1) | grep -v $(ls_exclude) | head -n 1`;;
    esac
    script=""
  fi

  if ! [ "$virt" ]; then
    error "No such port: $1."
    return 1
  fi

  group=`echo $virt | virt2gpkg | cut -d / -f 1`
  package=`echo $virt | virt2gpkg | cut -d / -f 2`
  name=`echo $package | pkg2name`
  version=`echo $package | pkg2ver`
  path=`dirname $virt`/$name
  [ "$script" ] || script=`{ ls_scr "^$path/$name.SlackBuild$"
                             ls_scr "^$path/"; } | head -n 1`
  description=`grep -sh ^$name: $path/slack-desc $path/slack-desc.$name $path/slack-desc/*`
  requires=`grep -sve ^# -e ^$ $path/requires | sort -u`
  optional=`{ grep -sve ^# -e ^$ $path/optional
              grep -s "^# opt" $path/requires | rev | cut -d " " -f 1 | rev; } | sort -u`
  sources=`grep -sve ^# -e ^$ $path/sources | sed "s,[{}],,g;s,\\$NAME,$name,g;s,\\$VERSION,$version,g"`

  # check out "use"-list
  $NO_REQS && uses="" || uses=`ls_use $(regex $optional) | sort -u`

  # find cached .tgz-packages
  pkg_file=`{ ls_pkg "/$group/$package$"
              ls_pkg "/$package$"; } | head -n 1`
  [ "$pkg_file" ] && pkg_file=$pkg_file.tgz

  # check maintainance of port
  maintain=false
  [ "$MY_TAG" ] && case $package in *[0-9]$MY_TAG) maintain=true; esac
  $MAINTAIN_ALL && maintain=true

  # check TMP
  grep -sq "^TMP=\${TMP:-" $script && tmp=$TMP || tmp=/tmp

  # check for multiple packages
  if [ `grep "^[^#]*makepkg " $script | wc -l` -gt 1 ]; then
    local arch=`echo $package | pkg2rel | cut -d - -f 2`
    local build=`echo $package | pkg2rel | cut -d - -f 3`
    products=`sed -n "s,^[^#]*makepkg .*/\([^ ]*\)\.tgz.*,\1,p" $script \
              | sed "s,[{}],,g;s,\\$VERSION,$version,g;s,\\$ARCH,$arch,g;s,\\$BUILD,$build,g"`
  else
    products="$package"
  fi

  return 0
}

# functions using global variables (current port): usable only after get_info()

# download the source files of the current port
get_sources()
{
  local t=`mktemp -d`
  has_info || die
  local src
  for src in $sources; do
    # the source filename can have an arbitrary name written behind a %
    local filename=`basename ${src##*%}`
    local url=${src%\%*}
    local mirror=`mirror $url`
    case $url in
      cvs://*)
        local dest=$CVS_DIR/$filename
        row "Syncing CVS of $filename"
        has_prog cvs || die
        local cwd=`pwd`
        if [ -d $dest ]; then
          cd $dest
          cvs -qz9 up -dP -I z -I 0 .
        else
          mkdir -p $dest
          cd `dirname $dest`
          cvs -qz9 -d `dirname $mirror` co -Pd `basename $dest` `basename $mirror`
        fi
        cd $cwd;;
      *)
        local dest=$SRC_DIR/$filename
        if [ -f $dest ]; then
          row "$filename found in $SRC_DIR/"
        else
          row "Downloading $filename"
          $dry_run && return 0
          mkdir -p $SRC_DIR
          # try primary url if mirror fails
          has_prog wget || die
          if wget -c -O $dest.part $mirror; then
            mv $dest.part $dest
          elif [ "$url" != "$mirror" ] && wget -c -O $dest.part $url; then
            mv $dest.part $dest
          else
            error "Download failed!"
          fi
        fi;;
    esac
    $dry_run || ln -s $dest $path/
  done
}

# regenerate meta information (md5sums/footprint/requires) for the current port
update_meta_info()
{
  local t=`mktemp -d`
  has_info || die
  row "Updating meta information"

  # regenerate md5sums and footprint (assume we are in the script dir)
  rm -rf $path/md5sums
  rm -rf $path/footprint

  # write a file list of the package (remove creation time)
  tar tzvf $tmp/$package.tgz | sort +5 | awk '{ print $1,$2,$3,$6 }' \
  | column -t >$path/footprint

  # write md5sums
  local src
  for src in $sources; do
    # don't try to md5sum CVS dirs, arbitrary filenames or such without
    # version numbers (a version number is either [0-9][0-9] or [0-9].[0-9])!
    case $src in
      cvs://*|*%*)
        continue;;
      *[0-9][0-9]*|*[0-9].[0-9]*)
        md5sum $SRC_DIR/`basename $src`;;
    esac
  done >$path/md5sums
#  md5sum $script $path/footprint >>$path/md5sums
  sed -i "s, $SRC_DIR/, ," $path/md5sums

#  # sign md5sums
#  if has_prog gpg && cat $path/md5sums | gpg --clearsign >$t/md5sums; then
#    mv $t/md5sums $path/md5sums
#  fi

  # explodepkg package tree?
  if ! [ -d $tmp/package-$name ]; then
    rm -rf $tmp/package-$name
    mkdir $tmp/package-$name
    tar xzf $tmp/$package.tgz -C $tmp/package-$name/
  fi

  # generate requires/optional list
  local ignore=`regex $(grep -shve ^# -e ^$ $CFG_DIR/ignore)`
  ls_inst $ignore | pkg2name | cut -d / -f 2 >$t/ignore
  echo "$requires" >$t/old_req
  echo "$optional" >$t/old_opt
  find $tmp/package-$name/ -type f -exec file {} \; >$t/ftypes
  { # shared libraries
    grep ":.*ELF" $t/ftypes | cut -d : -f 1 | xargs -r ldd \
    | sed -n "\,=>,s,^.* => \(.*\) (.*)$,\1,p" | sort -u | cut -c 2- | xargs -i echo ^{}
    # perl modules (identify them by man pages)
    grep -ie ":.*perl" -e "\.pm:" $t/ftypes | cut -d : -f 1 \
    | xargs sed -n "s,^\ *use *\([A-Z][a-z][^';<> ]*\).*,\1,p" | xargs -i echo "/man./{}\."
  } | sed "s,/\./,/,g" | grep -lf - $ADM_DIR/packages/* | rev | cut -d / -f 1 \
  | rev | pkg2name | sed -e "s,-solibs$,," -e "s,^x11$,&\nx11-devel," \
    -e "/^$name$/d" >$t/auto_req_raw
  # perl or python in general?
  grep -qie ":.*perl" -e "\.pm:" $t/ftypes && echo perl >>$t/auto_req_raw
  grep -qie ":.*python" -e "\.py:" $t/ftypes && echo python >>$t/auto_req_raw
  # sort automatic requirements list and strip ignore list
  sort -uo $t/auto_req_raw $t/auto_req_raw
  fgrep -vxf $t/ignore $t/auto_req_raw >$t/auto_req
  fgrep -vxf $t/old_req -f $t/old_opt $t/auto_req >$t/new_req

  # if "requires" exists, new dependencies are optional
  if [ "$requires" ]; then
    cat $t/new_req >$t/new_opt
    >$t/new_req
  else
    >$t/new_opt
  fi

  # now generate new "requires" file
  cat $path/requires $t/new_req >$t/requires
  sed -i "/^# opt/d" $t/requires
  cat $t/old_opt $t/new_opt | xargs -r -l echo "# optional:" >>$t/requires
  sort -uo $t/requires $t/requires
  sed -i "/^$/d" $t/requires
  mv $t/requires $path/requires

  # show a few statistics
  cat $t/new_req | xargs -r echo "  --> New dependencies:"
  cat $t/new_opt | xargs -r echo "  --> New options:"
  fgrep -xf $t/old_opt -f $t/new_opt $t/auto_req | xargs -r echo "  --> Dependant options:"
  fgrep -hxvf $t/auto_req $t/new_req $t/old_req | xargs -r echo "  --> Arbitrary dependencies:"

  # check for common mistakes
  egrep -woe "usr/(local/|etc/|share/doc/|share/man/|info/dir).*" \
    -e "/$ARCH-slackware-linux-" $path/footprint >$t/check_path
  egrep -e "^........w" -e " root/root .*( |/)(|s)bin/" $path/footprint >$t/check_perm
  egrep -e "-upgraded$" $t/auto_req >$t/check_req
  ls_virt | grep -v `ls_exclude` | virt2gpkg | pkg2name | cut -d / -f 2 \
  | fgrep -vxf - $t/auto_req >>$t/check_req
  cat $t/check_path | xargs -r -l echo "WARNING: Check this path:"
  cat $t/check_perm | xargs -r -l echo "WARNING: Check these permissions:"
  cat $t/check_req | xargs -r echo "WARNING: Check these dependencies:"

  # remove empty files
  rm -f $path/optional
  rm -f $path/arbitrary
  [ -s $path/requires ] || rm -f $path/requires
  [ -s $path/md5sums ] || rm -f $path/md5sums
}

# build package (mostly "run SlackBuild") for the current port
build_pkg()
{
  local t=`mktemp -d`
  has_info || die
  stanza "Building $package:"

  if $maintain; then
    local script_opt=""
    warn "Maintainer mode: Modifying files: requires md5sums footprint"
    $rebuild && warn "Change BUILD number if you made changes to the script!"
  else
    local script_opt="--cleanup"
  fi

  # assume, all symlinks here are old links to logs or source files
  [ "$path" ] || die "Internal error!"
  find $path/ -type l -exec rm {} \;

  get_sources || return 1

  # check signature and md5sums when non-maintainer-mode
  if ! $maintain && ! $dry_run && [ -f $path/md5sums ]; then
#    if grep -sq PGP $path/md5sums && has_prog gpg && ! gpg --verify $path/md5sums; then
#      error "Integrity checking failed (bad signature)!"
#      return 1
#    fi
    cd $path
    if ! md5sum -c $path/md5sums >/dev/null; then
      md5sum -c $path/md5sums
      error "Integrity checking failed!"
      return 1
    fi
  fi

  # exit when download-only or dry-run
  $download_only && return 0
  $dry_run && return 0

  # run the script
  if ! $remaintain; then
    rm -rf $tmp/package-$name
    rm -rf $tmp/$package.tgz

    # find CFLAGS substitution (CFLAGS="$SLKCFLAGS")
    local cflags_var=`grep -o "CFLAGS=\\"*\\$[^ ]*" $script | cut -d = -f 2 | tail -n 1 | sed "s,[\"\$],,g"`
    if [ "$cflags_var" ]; then
      :
    else
#    if ! grep -sq "^CFLAGS=\"\$SLKCFLAGS\"" $script; then
      $maintain && case $package in $name-$version-noarch-*) ;; *)
        warn "No CFLAGS usage in script! Compiling with default values."
      esac
      # this is just a wild guess
      cflags_var=CFLAGS
    fi

    # check if the script supports break-on-errors ("|| exit 1")
    if ! grep -sq "|| exit 1$" $script; then
      local sh_opt="-e"
    else
      local sh_opt=""
    fi

    # check if the script supports TMP
    if [ "$TMP" != "$tmp" ]; then
      warn "This port ignores your TMP customisation. Trying to redirect to $tmp."
      warn "If this fails, please report this as a bug to the maintainer!"
    fi

    # execute SlackBuild
     if ! [ -f $path/no-fakeroot ] && has_prog fakeroot; then
      # run fakerooted SlackBuild as nobody
      local build="su nobody -c \"ARCH=$ARCH $cflags_var=\\\"$CFLAGS\\\" \
                   HOME=$tmp TMPDIR=$tmp TMP=$tmp PATH=\$PATH:/sbin \
                   fakeroot sh $sh_opt $script $script_opt\""
    else
      local build="ARCH=$ARCH $cflags_var=\"$CFLAGS\" TMP=$tmp \
                   sh $sh_opt $script $script_opt"
      [ -f $path/no-fakeroot ] && warn "Fakeroot disabled for this port!" \
      || warn "Please install fakeroot as soon as possible!"
      $prepare_only && warn "Preparing without fakeroot is not recommended!"
    fi
    row "Executing $script $script_opt"
    cd $path || return 1
    eval "$build" 2>&1 | tee $ADM_DIR/portpkg/$name.buildlog >&2
#    # this is a hack-around for some faulty install scripts
#    chmod 1777 /tmp

    # success? (this is the most promising test to ensure it worked)
    if [ -f $tmp/$package.tgz ]; then
      # remove this tag in any case
      rm -rf $path/PORT_IS_BROKEN
    else
      $VERBOSE || tail $ADM_DIR/portpkg/$name.buildlog
      error "Compilation failed (see $ADM_DIR/portpkg/$name.buildlog)!"
      $maintain && ln -sf $ADM_DIR/portpkg/$name.buildlog $path/PORT_IS_BROKEN
      return 1
    fi
  elif ! [ "$pkg_file" ]; then
    error "Remaintaining not possible: No package file found!"
    return 1
  else
    row "Skipping package building"
    cp $pkg_file $tmp/
  fi

  # cruft for maintainers of port scripts :)
  $maintain && update_meta_info | tee -a $ADM_DIR/portpkg/$name.buildlog

  # finish
  mkdir -p $PKG_DIR/$group
  echo "$products" | xargs -i echo "  --> Moving {} to $PKG_DIR/$group/"
  echo "$products" | xargs -i mv $tmp/{}.tgz $PKG_DIR/$group/
  row "Cleaning up"
  find $path/ -type l -exec rm -rf {} \;
  # remove source files with arbitrary names from $SRC_DIR
  $LAZY_CHECKS || grep -s % $path/sources | cut -d % -f 2 | xargs -i rm -rf $SRC_DIR/{}
  $maintain || rm -rf $tmp/package-$name
}

# check if all required packages of the current port are installed
check_reqs()
{
  has_info || die
  local req
  for req in $requires $uses; do
    local inst_pkg=`ls_inst $(regex $req) | head -n 1`
    local avail_pkg=`ls_virt $(regex $req) | grep -v $(ls_exclude) | virt2gpkg | cut -d / -f 2 | head -n 1`

    # is the dependency available?
    if [ "$avail_pkg" ]; then
      # prepare patterns to compare
      if $LAZY_CHECKS; then
        inst_pkg=`echo $inst_pkg | sed "s,^\(.*\)-.*-.*-.*$,\1-[^-]*-[^-]*-[^-]*,"`
      elif $ignore_arch; then
        inst_pkg=`echo $inst_pkg | sed "s,^\(.*-.*\)-.*-\(.*\)$,\1-[^-]*-\2,"`
      fi

      # is it up-to-date?
      if echo $avail_pkg | grep -xsq "$inst_pkg"; then
#      if [ "`ls_inst ^$avail_pkg$`" ]; then
        :
      # add it
      else
        # remember group and name
        local gpkg=$group/$package
        get_info $avail_pkg
        if ! add_pkg; then
          error "$avail_pkg is broken! Stopping `echo $gpkg | pkg2name | cut -d / -f 2`."
          return 1
        fi
        # after that add_pkg, we have to refresh
        get_info $gpkg
      fi
    # is such a package installed?
    elif [ "$inst_pkg" ]; then
      :
    # is maybe a package in the cache?
    elif [ "`ls_pkg $(regex $req)`" ]; then
      $dry_run || installpkg `ls_pkg $(regex $req) | head -n 1`.tgz
    else
      error "Cannot find required package $req! Stopping."
      return 1
    fi
  done
  return 0
}

# really (re)install/upgrade current port
add_pkg()
{
  local t=`mktemp -d`
  has_info || die

  # requirements check
  $NO_REQS || check_reqs || return 1

  # package file found in cache?
  if ! [ "$pkg_file" ] || $rebuild; then
    build_pkg || return 1
    pkg_file=$PKG_DIR/$group/$package.tgz
  elif $download_only || $prepare_only; then
    stanza "Already built. Skipping."
  fi

  $download_only && return 0
  $prepare_only && return 0

  # install the package
  if [ "`ls_inst ^$package$`" ] && ! $reinstall; then
    stanza "$package is already installed. Skipping."
    return 0
  fi
  [ -f $path/slot-in ] && warn "Slot-in: Other releases will stay installed!"

  # what to display?
  if ! [ -f $path/slot-in ] && [ "`ls_inst ^$package$`" ]; then
    stanza "Reinstalling $package..."
    local add="upgradepkg --reinstall"
  elif ! [ -f $path/slot-in ] && [ "`ls_inst $(regex $name)`" ]; then
    stanza "Upgrading $name to `echo $package | pkg2rel`..."
    sed -i "s,`regex $name`,$package," $INST_CACHE
    local add="upgradepkg"
  else
    stanza "Installing $package..."
    echo $package >>$INST_CACHE
    local add="installpkg"
  fi

  $dry_run && echo "$description" && return 0

  # call the install-command
  if ! su -c "$add $pkg_file | tee $t/output | grep -e ^PACKAGE \
              -e ^$name: -e ^Executing"; then
    cat $t/output
    error "Installation failed!"
    return 1
  fi
  return 0
}

# action functions after options parsing

do_add() # pkgex_list
{
  local t=`mktemp -d`
  has_args `explicit "$@"` || die
  has_ports || die
  is_root || die
  ls_inst >$t/inst
  >$t/building

  local arg
  for arg in `explicit "$@"`; do
    echo "$arg" >>$t/started
    get_info $arg || continue
    # if the current port is already tracked as started and not finished, it is
    # either broken or a circular dependency and should fail now
    if fgrep -sqx "$package" $t/building; then
      row "Circular dependency! Skipping $name."
      return 0
    fi
    sed -i "\,^$arg$,d" $t/started
    echo "$package" >>$t/building
    add_pkg || continue
    sed -i "/^$package$/d" $t/building
  done
  local ret=$?

  # summary
  local stats=$ADM_DIR/portpkg/log
  $dry_run && stats=/dev/null
  { stanza "Summary `date`:"
    cat $t/started $t/building | xargs -r -l echo "  --> Failed"
    ls_inst | fgrep -vxf $t/inst | xargs -r -l echo "  --> Added"
  } | tee -a $stats >&2

  return $ret
}

do_diff()
{
  local t=`mktemp -d`
  has_ports || die
  local diff_list=`ls_diff`
  [ "$diff_list" ] || die "No differences found."
  ls_inst >$t/inst
  local pkg
  for pkg in 0 $diff_list; do
    [ "$pkg" = "0" ] && echo -e "\nPACKAGE: AVAILABLE: INSTALLED:" && continue
    local avail_rel=`echo $pkg | pkg2rel`
    local name=`echo $pkg | pkg2name`
    local inst_rel=`grep -m 1 $(regex $name) $t/inst | pkg2rel`
    avail=${avail:-$name}
    avail_rel=${avail_rel:-(n/a)}
    echo "$name $avail_rel $inst_rel"
  done | column -t
}

do_export() # pkgex_list
{
  is_root || die
  has_args `explicit "$@"` || die
  has_ports || die

  # make sure, the user didn't accidently give a port for summary
  case "$export_opt" in *\ *) ;; *) die "Summary must be at least two words!"; esac

  stanza "Exporting:"
  local arg
  for arg in `explicit "$@"`; do
    get_info $arg || continue

    # make some check before exporting
    if ! $maintain; then
      error "$group/$name is not your port. Skipping."
    elif [ -f $path/PORT_IS_BROKEN ]; then
      error "Cannot export broken ports: $group/$name"
    elif ! [ -f $path/footprint ] || [ $path/footprint -ot $script ]; then
      error "No or too old footprint: $group/$name"
    elif [ `grep -s ^$name: $path/slack-desc | grep :.. | wc -l` -lt 2 ]; then
      error "Too short description: $group/$name"
    elif [ "`find $path/ -type l`" ]; then
      error "Remove links before export: $group/$name"
    fi
    [ $? != 0 ] && continue

    # start 3rd-party-exporter
    if [ -f $CFG_DIR/export ]; then
      $dry_run || (. $CFG_DIR/export)
    else
      die "Exporter not defined: $CFG_DIR/export"
    fi
  done
}

# find ports by pattern
do_find() # text [...] >pkgex_list
{
  local t=`mktemp -d`
  has_args "$@" || die
  has_ports || die
  find $PRT_DIR/ -follow -name slack-desc >$t/list
  local arg
  for arg; do
    cat $t/list | xargs grep -lsi $arg >$t/list.new
    mv $t/list.new $t/list
  done
  [ -s $t/list ] && do_list `cat $t/list | scr2gname`
}

# print information about a port
do_info() # pkgex-list
{
  has_ports || die
  has_args `explicit "$@"` || die
  local arg
  for arg in `explicit "$@"`; do
    get_info $arg || continue
    echo
    echo "PACKAGE NAME:  $package"
    if [ "$pkg_file" ]; then
      local s=`gzip -l $pkg_file | tail -n 1`
      local size=`echo $s | awk '{ print $1 }'`
      local u_size=`echo $s | awk '{ print $2 }'`
      echo "COMPRESSED PACKAGE SIZE:  `expr $size / 1024` K"
      echo "UNCOMPRESSED PACKAGE SIZE:  `expr $u_size / 1024` K"
      echo "PACKAGE LOCATION:  $pkg_file"
    fi
    echo "SCRIPT LOCATION:  $script"
    [ "$products" != "$package" ] && echo "SCRIPT PRODUCES:  "$products | fmt -t
    [ "$requires" ] && echo "PACKAGE REQUIRES:  "$requires | fmt -t
    [ "$optional" ] && echo "PACKAGE SUGGESTS:  "$optional | fmt -t
    [ "$uses" ] && echo "PACKAGE USES:  "$uses | fmt -t
    [ "$sources" ] && echo "SOURCE LOCATIONS:  "$sources | fmt -t
    [ "$description" ] && echo -e "PACKAGE DESCRIPTION:\n$description"
  done
}

# list available ports
do_list() # [pkgex-list] >pkgex_list
{
  has_ports || die
  if [ "$*" ]; then
    # grep arguments
    ls_virt `regex "$@"`
  else
    ls_virt
  fi | virt2gpkg
}

do_sync()
{
  local t=`mktemp -d`
  is_root || die
  stanza "Syncing your ports:"

  # start 3rd-party-importers
  local importer
  for importer in `find $CFG_DIR/plugins/sync.*`; do
    if [ -x $importer ]; then
      $dry_run && row "Running $importer" || (. $importer)
    fi
  done
}

# upgrade all installed ports that are not available
do_upgrade()
{
  has_ports || die
  local diff_list=`ls_diff | pkg2name`
  [ "$diff_list" ] || die "No upgrades available."
  do_add $diff_list
}

do_help()
{
  cat <<EOF

Usage:  portpkg [action] [options] [list [...]]
  Build package by a script and install it.
Actions (alternative):
  -d, --diff         Compare installed versions with availables
  -x, --export text  Submit ports via $CFG_DIR/export
  -f, --find text    Find ports by matching pattern strings
  -i, --info         View information about specified ports
  -l, --list         List (all or certain) available ports
  -s, --sync         Sync local ports tree in [$PRT_DIR]
  -u, --upgrade      Upgrade all (!) outdated ports (see --diff)
  -v, --version	     View version information
Options:
  -p, --prepare      Build only, don't install [implies --noreqs]
  -o, --download     Download only, don't build/install
  -r, --remaintain   Maintain only, skip building [implies --rebuild]
  -y, --dryrun	     Simulate only, don't build/install/up-/download
  -b, --rebuild      Force building, if already built [implies --reinstall]
  -e, --reinstall    Force installing, if already installed
  -m, --maintain     Force maintaining, update meta info
  -q, --noreqs       Ignore dependencies
  -a, --lazy         Ignore release differences, don't upgrade dependencies
  -g, --verbose      More output
Lists:  group/ or [group/]name[-version-arch-build] or nothing for current dir
EOF
}

do_version()
{
  cat <<EOF
    
Portpkg version $ENGINE_VER.
Copyright (C) 2003-2005 Thomas Pfaff <topf at users dot berlios dot de>.
Portpkg comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.
EOF
}

parse_options()
{
  local shorts="diflsuvhebogyqx:zarpm"
  local longs="diff,info,find,list,sync,upgrade,version,help,reinstall,\
rebuild,download,verbose,dryrun,debug,noreqs,lazy,remaintain,prepare,\
maintain,export:"

  local args
  args=`getopt -qo $shorts -l $longs -- "$@"`
  [ "$?" = "0" ] || die "Bad Arguments! Try: portpkg --help"
  eval set -- "$args"

  while [ "$1" ]; do
    case $1 in
      -d|--diff)        action=do_diff;;
      -x|--export)      action=do_export
                        export_opt="$2"
                        shift;;
      -f|--find)        action=do_find;;
      -h|--help)      	action=do_help;;
      -i|--info)      	action=do_info;;
      -l|--list)      	action=do_list;;
      -s|--sync)        action=do_sync;;
      -u|--upgrade)     action=do_upgrade;;
      -v|--version)     action=do_version;;
      -p|--prepare)     prepare_only=true;;
      -o|--download)    download_only=true;;
      -r|--remaintain)  remaintain=true;;
      -y|--dryrun)      dry_run=true;;
      -g|--verbose)   	VERBOSE=true;;
      -z|--debug)       set -x -v
                        VERBOSE=true;;
      -b|--rebuild)     rebuild=true;;
      -e|--reinstall)   reinstall=true;;
      -m|--maintain)    MAINTAIN_ALL=true;;
      -q|--noreqs)      NO_REQS=true;;
      -a|--lazy)        LAZY_CHECKS=true;;
      --)               shift
                        break;;
    esac
    shift
  done

  $prepare_only && NO_REQS=true
  $rebuild && reinstall=true
  $remaintain && rebuild=true

  $VERBOSE && local output=/dev/stdout || local output=/dev/null

  $action "$@" 2>$output
}

init()
{
  # clean up on exit
  trap "rm -rf $TMPDIR" EXIT
  trap "" PIPE

  # check
  has_prog sed || die
  case $ARCH in
    i?86) ignore_arch=true;;
    *-*)  die "ARCH value not allowed: $ARCH";;
  esac

  # if not used as include file then start me
  [ `basename $0` = "portpkg" ] && parse_options "$@" || true
}

init "$@"
