#!/bin/sh -u
#
# Portpkg -- A ports system for Slackware Linux, written in Bash++
# Copyright (C) 2003-2005 Thomas Pfaff <topf at users dot berlios dot de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# default configuration
MAINTAIN_ALL=false
VERBOSE=false
DRY_RUN=false
NO_REQS=false
LAZY_CHECKS=false
IGNORE_ARCH=false
DEBUG=false

ARCH=i486
CFLAGS=""
MY_TAG=""
MY_EMAIL=""
MY_REALNAME=""

ADM_DIR=/var/log
SRC_DIR=/usr/src/dist
CVS_DIR=/usr/src/cvs
PKG_DIR=/usr/obj/pkg
PRT_DIR=/usr/ports
CFG_DIR=/etc/portpkg
TMP=/tmp

# include host-specific configuration overlay
[ -f $CFG_DIR/local.conf ] && . $CFG_DIR/local.conf

# constant values, temporary dirs, cache files
ENGINE_VER=cvs
TMPDIR=`mktemp -d $TMP/portpkg-XXXXXX` || exit 1
export TMPDIR
INST_CACHE=`mktemp`
PKG_CACHE=`mktemp`
SCR_CACHE=`mktemp`
LOC_CACHE=`mktemp`

# default arguments
action=do_add
download_only=false
prepare_only=false
reinstall=false
rebuild=false
remaintain=false
output=/dev/null

# global variables
exclude="" export_opt=""
# these variables will be set by get_info() (functions using "current port")
package="" name="" group="" version=""
script="" path="" description="" requires="" optional="" sources=""
pkg_file="" maintain="" tmp=""

# rel   version-arch-build      "1.0-i486-3"
# pkg   name-rel                "bla-1.0-i486-3"
# gpkg  group/pkg               "l/bla-1.0-i486-3"
# gname group/name              "l/bla"
# scr   path/SlackBuild         "/usr/ports/l/bla/SlackBuild"
# loc   path-rel                "/usr/ports/l/bla-1.0-i486-3"

# message system
stanza() { [ "$*" ] && echo -e "\n$@"; }
row()    { echo -e "  --> $@"; }
warn()   { echo -e "WARNING: $@"; }
error()  { stanza "$@" >&2; return 1; }
die()    { error "$@"; exit 1; }
debug()  { $DEBUG && echo "debug: $@" >&2; }

# cache the output of "action"
cache() # file action
{
  local file=$1 action=$2
  if [ -s $file ]; then
    cat $file 2>/dev/null
  else
    debug "caching $file"
    eval "$action" | tee $file 2>/dev/null
  fi
}

# listers
ls_inst() # >pkg_list
{ cache $INST_CACHE "find $ADM_DIR/packages/ -type f | sed \"s,^.*/,,\""; }
ls_pkg() # >gpkg_list
{ cache $PKG_CACHE "find $PKG_DIR/ -name \"*.tgz\" -follow | sed -r \"s,^.*/(.*/.*)\.tgz$,\1,\""; }
ls_scr() # >scr_list
{ cache $SCR_CACHE "find $PRT_DIR/local/ -name \"*SlackBuild\" -follow | sort
                    find $PRT_DIR/ ! -path \"$PRT_DIR/local/*\" -name \"*SlackBuild\" | sort"; }
ls_loc() # >gpkg_list
{ cache $LOC_CACHE "ls_scr | scr2loc"; }

# converters
pkg2name()   { sed -r "s,^(.*)-.*-.*-.*$,\1,"; }
pkg2ver()    { sed -r "s,^.*-(.*)-.*-.*$,\1,"; }
pkg2rel()    { sed -r "s,^.*-(.*-.*-.*)$,\1,"; } 
loc2gpkg()   { sed -r "s,^.*/(.*/.*)$,\1," 2>/dev/null; }
scr2gname()  { sed -r "s,.*/(.*/.*)/.*$,\1,"; }
scr2loc()    { xargs grep -sH "^VERSION=\|^ARCH=\|^BUILD=" -m 3 2>/dev/null \
               | sed -n "\,:VERSION=,{s,/[^/]*:VERSION=,-,;N;s,\n.*=,-,;N;s,\n.*=,-,;s,\${ARCH:-[^}]*},$ARCH,;s,\${[A-Z]*:-\([^}]*\)},\1,g;p}" 2>/dev/null; }
#FIXME: preset $BUILD and $VERSION is not supported, only reset!
#gpkg2gname() { pkg2name "$@"; }
#gpkg2ver()   { pkg2ver "$@"; }
#gpkg2rel()   { pkg2rel "$@"; } 

# checks
has_args()  { [ "$*" ] || error "Too few arguments! Try: portpkg --help"; }
is_root()   { [ "`whoami`" = "root" ] || error "You must be root to run this action!"; }
has_prog()  { which $1 >/dev/null 2>&1 || error "Cannot find $1!"; }
has_ports() { [ -d $PRT_DIR ] || error "No ports found! Try: portpkg --sync"; }

# find a mirror
mirror() # url >url
{
  debug "$FUNCNAME() $@"
  local url=$1 t=`mktemp -d`
  if [ -s $CFG_DIR/mirrors.local ] || [ -s $CFG_DIR/mirrors ]; then
    grep -shve "^#" -e "^$" $CFG_DIR/mirrors.local $CFG_DIR/mirrors >$t/mirrors
    local master mirror
    while read master mirror; do
      # use pathname expansion instead of regular expressions here
      case $url in $master*)
        url=$mirror${url#$master}
      esac
    done <$t/mirrors
  fi
  debug "using $url"
  echo "$url"
}

# download a source and make use of mirrors (supports cvs:// and httpup://)
get() # url dest
{
  debug "$FUNCNAME() $@"
  local url=$1 dest=$2 t=`mktemp -d`
  local mirror=`mirror $url`

  $DRY_RUN && return 0
  mkdir -p `dirname $dest`

  case $mirror in
    cvs://*)
      mirror=${mirror#*://}
      has_prog cvs || continue
      local cwd=`pwd`
      if [ -d $dest ]; then
        cd $dest
        cvs -qz9 up -dP -I z -I 0 . 2>/dev/null
      else
        mkdir -p $dest
        cd `dirname $dest`
        cvs -qz9 -d `dirname $mirror` co -Pd `basename $dest` `basename $mirror` 2>/dev/null
      fi
      cd $cwd;;
    *)
      # try primary url if mirror fails
      has_prog wget || die
      if wget -c -O $dest.part $mirror 2>&1; then
        mv $dest.part $dest
      elif [ $url != $mirror ] && wget -c -O $dest.part $url 2>&1; then
        mv $dest.part $dest
      else
        error "Download failed!"
      fi;;
  esac
}

# generate a regular expression for grep from a pkgex-list
regex() # pkgex_list >regex_list
{
  [ $# = 1 ] && local pre="" || local pre=" -e "
  local arg
  for arg; do
    case $arg in
      */)
        # groups
        echo -n "$pre\(^\|\/\)$arg";;
      *)
        # (g)names and (g)packages
        echo -n "$pre\(^\|\/\)$arg\(\|-[^-]*-[^-]*-[^-]*\)$";;
    esac
  done
  [ $# = 0 ] && echo "^$" || true
}

# resolve groups/ to names
# note: do_list doesn't use explicit()!
explicit() # pkg_list >pkgex-list
{
  local arg
  for arg; do
    case $arg in
      */) ls_scr | scr2gname | grep `regex $arg` | cut -d / -f 2;;
      *)  echo $arg;;
    esac
  done
}

# print non-available, but installed ports
ls_diff() # >pkgex_list
{
  debug "$FUNCNAME() $@"
  local t=`mktemp -d`

  # generate installed and available lists
  ls_loc | grep -v $exclude | loc2gpkg | cut -d / -f 2 >$t/avail
  ls_inst >$t/inst
  pkg2name <$t/avail >$t/avail.names
  pkg2name <$t/inst >$t/inst.names

  # find installed packages that are available
  local check
  fgrep -xf $t/avail.names $t/inst.names | while read check; do
    grep -xm 1 "$check-[^-]*-[^-]*-[^-]*" $t/avail >>$t/avail.check
    grep -xm 1 "$check-[^-]*-[^-]*-[^-]*" $t/inst >>$t/inst.check
  done

  # print differences
  if $IGNORE_ARCH; then
    # don't care about architecture differences
    sed -i "s,\(.*-.*\)-.*-\(.*\),\1-\.*-\2," $t/avail.check
    sed -i "s,\(.*-.*\)-.*-\(.*\),\1-\.*-\2," $t/inst.check
    fgrep -ivxf $t/inst.check $t/avail.check | sort -u | grep -f - $t/avail
  else
    fgrep -vxf $t/inst.check $t/avail.check | sort -u
  fi
}

# get information about a port and write it into global variables
get_info() # pkgex
{
  debug "$FUNCNAME() $@"

  # find port, take the first if more than one available
  local loc=`ls_loc | grep -v $exclude 2>/dev/null | grep -m 1 $(regex $1)`

  # maybe an exluded one explicitly named?
  [ "$loc" ] || case $1 in */*)
    loc=`ls_loc | grep -m 1 $(regex $1)`
    debug "excluded port specified explicitly!"
  esac

  if ! [ "$loc" ]; then
    error "No such port: $1"
    return 1
  fi

  group=`echo $loc | loc2gpkg | cut -d / -f 1`
  package=`echo $loc | loc2gpkg | cut -d / -f 2`
  name=`echo $package | pkg2name`
  version=`echo $package | pkg2ver`
  path=`dirname $loc`/$name
#  script=`find $path/ -name "*SlackBuild" | head -n 1`
  script=`ls_scr | grep "^$path/" | head -n 1`
  description=`grep -s ^$name: $path/slack-desc`
  requires=`grep -sve ^# -e ^$ $path/requires`
  optional=`grep -sve ^# -e ^$ $path/optional
            grep -s "^# opt" $path/requires | rev | cut -d " " -f 1 | rev`
  sources=`grep -sve ^# -e ^$ $path/sources | sed "s,[{}],,g;s,\\$NAME,$name,g;s,\\$VERSION,$version,g"`
  
  # cached .tgz-packages
  pkg_file=`ls_pkg | grep -xm 1 "$group/$package"`
  [ "$pkg_file" ] || pkg_file=`ls_pkg | grep -m 1 "/$package$"`
  [ "$pkg_file" ] && pkg_file=$PKG_DIR/$pkg_file.tgz

  # maintained port?
  maintain=false
  [ "$MY_TAG" ] && case $package in *[0-9]$MY_TAG) maintain=true; esac
  $MAINTAIN_ALL && maintain=true

  # check TMP
  grep -sq "^TMP=\${TMP:-" $script && tmp=$TMP || tmp=/tmp

  debug "$@ is known as $group/$package"
  return 0
}

# regenerate meta information (md5sums/footprint/requires) for the current port
update_meta_info()
{
  local t=`mktemp -d`
  row "Updating meta information"

  # regenerate md5sums and footprint (assume we are in the script dir)
  rm -rf $path/md5sums
  rm -rf $path/footprint

  # write a file list of the package (remove creation time)
  tar tzvf $tmp/$package.tgz | sort +5 | awk '{ print $1,$2,$3,$6 }' \
  | column -t >$path/footprint

  # write md5sums
  local link
  for link in `find $path/ -type l`; do
    # only files, don't try to md5sum CVS dirs!
    [ -f $link ] && md5sum $link
  done >$path/md5sums
#  md5sum $script $path/footprint >>$path/md5sums
  sed -i "s, $path/, ," $path/md5sums

#  # sign md5sums
#  if has_prog gpg && cat $path/md5sums | gpg --clearsign >$t/md5sums; then
#    mv $t/md5sums $path/md5sums
#  fi

  # explodepkg package tree?
  if ! [ -d $tmp/package-$name ]; then
    rm -rf $tmp/package-$name
    mkdir $tmp/package-$name
    tar xzf $tmp/$package.tgz -C $tmp/package-$name/
  fi

  # generate requires/optional list
  local ignore=`regex $(grep -shve ^# -e ^$ $CFG_DIR/ignore.local $CFG_DIR/ignore)`
  ls_inst | grep $ignore | pkg2name | cut -d / -f 2 >$t/ignore
  echo "$requires" >$t/old_req
  echo "$optional" >$t/old_opt
  find $tmp/package-$name/ -type f -exec file {} \; >$t/ftypes
  { # shared libraries
    grep ":.*ELF" $t/ftypes | cut -d : -f 1 | xargs -r ldd \
    | sed -n "\,=>,s,^.* => \(.*\) (.*)$,\1,p" | sort -u | cut -c 2- | xargs -i echo ^{}
    # perl modules (identify them by man pages)
    grep -ie ":.*perl" -e "\.pm:" $t/ftypes | cut -d : -f 1 \
    | xargs sed -n "s,^\ *use *\([A-Z][a-z][^';<> ]*\).*,\1,p" | xargs -i echo "/man./{}\."
  } | sed "s,/\./,/,g" | grep -lf - $ADM_DIR/packages/* | rev | cut -d / -f 1 \
  | rev | pkg2name | sed -e "s,-solibs$,," -e "s,^x11$,&\nx11-devel," \
    -e "/^$name$/d" >$t/auto_req_raw
  # perl or python in general?
  grep -qie ":.*perl" -e "\.pm:" $t/ftypes && echo perl >>$t/auto_req_raw
  grep -qie ":.*python" -e "\.py:" $t/ftypes && echo python >>$t/auto_req_raw
  # sort automatic requirements list and strip ignore list
  sort -uo $t/auto_req_raw $t/auto_req_raw
  fgrep -vxf $t/ignore $t/auto_req_raw >$t/auto_req
  fgrep -vxf $t/old_req -f $t/old_opt $t/auto_req >$t/new_req

  # save the "actual" dependencies list of the current port
  cat $t/auto_req_raw >$ADM_DIR/portpkg/$package.deps

  # if "requires" exists, new dependencies are optional
  if [ "$requires" ]; then
    cat $t/new_req >$t/new_opt
    >$t/new_req
  else
    >$t/new_opt
  fi

  # now generate new "requires" file
  cat $path/requires $t/new_req >$t/requires 2>/dev/null
  sed -i "/^# opt/d" $t/requires
  cat $t/old_opt $t/new_opt | xargs -r -l echo "# optional:" >>$t/requires
  sort -uo $t/requires $t/requires
  sed -i "/^$/d" $t/requires
  mv $t/requires $path/requires

  # show a few statistics
  debug "ignoring dependencies: "`fgrep -xf $t/ignore $t/auto_req_raw`
  cat $t/new_req | xargs -r echo "  --> New dependencies:"
  cat $t/new_opt | xargs -r echo "  --> New options:"
  fgrep -xf $t/old_opt -f $t/new_opt $t/auto_req | xargs -r echo "  --> Dependant options:"
  fgrep -hxvf $t/auto_req $t/new_req $t/old_req | xargs -r echo "  --> Arbitrary dependencies:"

  # check for common mistakes
  egrep -woe "usr/(local/|etc/|share/doc/|share/man/|info/dir).*" \
    -e "/$ARCH-slackware-linux-" $path/footprint >$t/check_path
  egrep -e "^........w" -e " root/root .*( |/)(|s)bin/" $path/footprint >$t/check_perm
  egrep -e "-upgraded$" $t/auto_req >$t/check_req
  ls_loc | grep -v $exclude | loc2gpkg | pkg2name | cut -d / -f 2 \
  | fgrep -vxf - $t/auto_req >>$t/check_req
  cat $t/check_path | xargs -r -l echo "WARNING: Check this path:"
  cat $t/check_perm | xargs -r -l echo "WARNING: Check these permissions:"
  cat $t/check_req | xargs -r echo "WARNING: Check these dependencies:"

  # remove empty files
  rm -f $path/optional
  rm -f $path/arbitrary
  [ -s $path/requires ] || rm -f $path/requires
  [ -s $path/md5sums ] || rm -f $path/md5sums
}

# download the source files of the current port
get_sources()
{
  local src
  for src in $sources; do
    # the source filename can have an arbitrary name written behind a %
    local srcname=`basename ${src##*%}`
    src=${src%\%*}
    case $src in
      cvs://*)
        row "Syncing CVS $srcname"
        get $src $CVS_DIR/$srcname >$output
        $DRY_RUN || ln -s $CVS_DIR/$srcname $path/;;
      *)
        if [ -f $SRC_DIR/$srcname ]; then
          row "$srcname found in $SRC_DIR/"
        else
          row "Downloading $srcname"
          get $src $SRC_DIR/$srcname >$output || return 1
        fi
        $DRY_RUN || ln -s $SRC_DIR/$srcname $path/;;
    esac
  done
}

# build package (mostly "run SlackBuild") for the current port
build_pkg()
{
  local t=`mktemp -d`
  stanza "Building $package:"

  if $maintain; then
    local script_opt=""
    warn "Maintainer mode: Modifying files: requires md5sums footprint"
    $rebuild && warn "Change BUILD number if you made changes to the script!"
  else
    local script_opt="--cleanup"
  fi

  # assume, all symlinks here are old links to logs or source files
  find $path/ -type l -exec rm {} \;

  get_sources || return 1

  # check signature and md5sums when non-maintainer-mode
  if ! $maintain && ! $DRY_RUN && [ -f $path/md5sums ]; then
#    if grep -sq PGP $path/md5sums && has_prog gpg && ! gpg --verify $path/md5sums 2>/dev/null; then
#      error "Integrity checking failed (bad signature)!"
#      return 1
#    fi
    cd $path
    if ! md5sum -c $path/md5sums >$t/output 2>&1; then
      cat $t/output
      error "Integrity checking failed!"
      return 1
    fi
  fi

  # exit when download-only or dry-run
  $download_only && return 0
  $DRY_RUN && return 0

  # run the script
  if ! $remaintain; then
    rm -rf $tmp/package-$name
    rm -rf $tmp/$package.tgz

    # find CFLAGS substitution (CFLAGS="$SLKCFLAGS")
    local cflags_var=`grep -o "CFLAGS=\\"*\\$[^ ]*" $script | cut -d = -f 2 | tail -n 1 | sed "s,[\"\$],,g"`
    if [ "$cflags_var" ]; then
      debug "substituting CFLAGS to $cflags_var"
    else
      case $package in $name-$version-noarch-*) ;; *)
        $maintain && warn "No CFLAGS variable found! Compiling with default values"
      esac
      # this is just a wild guess
      cflags_var=CFLAGS
    fi

    # check if the script supports break-on-errors ("|| exit 1")
    if ! grep -sq "|| exit 1$" $script; then
      debug "running script via sh -e"
      local sh_opt="-e"
    else
      local sh_opt=""
    fi

    # check if the script supports TMP
    if [ "$TMP" != "$tmp" ]; then
      warn "This port ignores your TMP customisation. Trying to redirect to $tmp."
      warn "If this fails, please report this as a bug to the maintainer!"
    fi

    # execute SlackBuild
    if ! [ -f $path/no-fakeroot ] && has_prog fakeroot; then
      # run fakerooted SlackBuild as nobody
      row "Executing (fakerooted) $script $script_opt"
      cd $path || return 1
      su nobody -c "ARCH=$ARCH \
                    $cflags_var=\"$CFLAGS\" \
                    HOME=$tmp \
                    TMPDIR=$tmp \
                    TMP=$tmp \
                    PATH=\$PATH:/sbin \
                    fakeroot sh $sh_opt $script $script_opt" 2>&1 \
      | tee $ADM_DIR/portpkg/$name.buildlog >$output
    else
      [ -f $path/no-fakeroot ] && warn "Fakeroot disabled for this port!" \
      || warn "Please install fakeroot as soon as possible!"
      $prepare_only && warn "Preparing without fakeroot is not recommended!"
      row "Executing $script $script_opt"
      cd $path || return 1
      eval "ARCH=$ARCH \
            $cflags_var=\"$CFLAGS\" \
            TMP=$tmp \
            sh $sh_opt $script $script_opt" 2>&1 \
      | tee $ADM_DIR/portpkg/$name.buildlog >$output
      # this is a hack-around for some faulty install scripts
      chmod 1777 /tmp
    fi

    # success? (this is the most promising test to ensure it worked)
    if [ -f $tmp/$package.tgz ]; then
      # remove this tag in any case
      rm -rf $path/PORT_IS_BROKEN
    else
      $VERBOSE || tail $ADM_DIR/portpkg/$name.buildlog
      error "Compilation failed (see $ADM_DIR/portpkg/$name.buildlog)!"
      $maintain && ln -sf $ADM_DIR/portpkg/$name.buildlog $path/PORT_IS_BROKEN
      return 1
    fi
  elif ! [ "$pkg_file" ]; then
    error "Remaintaining not possible: No package file found!"
    return 1
  else
    row "Skipping package building"
    cp $pkg_file $tmp/
  fi

  # remove source files with arbitrary names from $SRC_DIR (before md5summing)
  grep -s % $path/sources | cut -d % -f 2 | xargs -i rm -rf $SRC_DIR/{}

  # cruft for maintainers of port scripts :)
  $maintain && update_meta_info | tee -a $ADM_DIR/portpkg/$name.buildlog

  # clean up
  row "Moving $package to $PKG_DIR/$group/"
  mkdir -p $PKG_DIR/$group
  mv $tmp/$package.tgz $PKG_DIR/$group/
  row "Cleaning up"
  find $path/ -type l -exec rm -rf {} \;
  $maintain || rm -rf $tmp/package-$name
}

# check if all required packages of the current port are installed
check_reqs()
{
  debug "$FUNCNAME() $@"
  local use_list=$TMPDIR/tmp.1Z7kH3x
  local avail_list=$TMPDIR/tmp.3kBdbVx

  # check out "use"-list
  [ -s $use_list ] || explicit `grep -sve ^# -e ^$ $CFG_DIR/use.local` >$use_list
  local use=`echo "$optional" | fgrep -xf $use_list -`
  debug "$name requires: "$requires
  debug "using optional: "$use

  # find packages to check
  [ -s $avail_list ] || ls_loc | grep -v $exclude | loc2gpkg | cut -d / -f 2 >$avail_list
  deps=`echo -e "$requires\n$use"`

  local req
  for req in $deps; do
    debug "checking now: $req"

    # always read-in installed packages
    local inst_pkg=`ls_inst | grep -m 1 $(regex $req)`
    local avail_pkg=`grep -m 1 $(regex $req) $avail_list`

    # is the dependency available?
    if [ "$avail_pkg" ]; then
      debug "$req available as $avail_pkg"

      # prepare patterns to compare
      if $LAZY_CHECKS; then
        inst_pkg=`echo $inst_pkg | sed "s,^\(.*\)-.*-.*-.*$,\1-[^-]*-[^-]*-[^-]*,"`
      elif $IGNORE_ARCH; then
#      else
        inst_pkg=`echo $inst_pkg | sed "s,^\(.*-.*\)-.*-\(.*\)$,\1-[^-]*-\2,"`
      fi

      # is it up-to-date?
      if echo $avail_pkg | grep -xsq "$inst_pkg"; then
        debug "installed package matches $inst_pkg"
      # add it
      else
        # remember group and name
        local gpkg=$group/$package
        get_info $avail_pkg
        if ! add_pkg; then
          error "$avail_pkg is broken! Stopping `echo $gpkg | pkg2name | cut -d / -f 2`."
          return 1
        fi
        # after that add_pkg, we have to refresh
        get_info $gpkg
      fi
    elif [ "$inst_pkg" ]; then
      debug "installed package $inst_pkg should be sufficient"
    else
      error "Cannot find required package $req! Stopping."
      return 1
    fi
  done
  debug "finished: $FUNCNAME() $@"
  return 0
}

# really (re)install/upgrade current port
add_pkg()
{
  debug "$FUNCNAME() $@"
  local t=`mktemp -d`
  # requirements check
  $NO_REQS || check_reqs $package || return 1

  # package file found in cache?
  if ! [ "$pkg_file" ] || $rebuild; then
    build_pkg || return 1
    pkg_file=$PKG_DIR/$group/$package.tgz
  elif $download_only || $prepare_only; then
    stanza "Already built. Skipping."
  fi

  $download_only && return 0
  $prepare_only && return 0

  # install the package
  if ls_inst | fgrep -qx $package && ! $reinstall; then
    stanza "$package is already installed. Skipping."
    return 0
  fi
  [ -f $path/slot-in ] && warn "Slot-in: Other releases will stay installed!"

  # what to display?
  ls_inst >$t/inst
  if ! [ -f $path/slot-in ] && fgrep -qx $package $t/inst; then
    stanza "Reinstalling $package..."
  elif ! [ -f $path/slot-in ] && grep -q $(regex $name) $t/inst; then
    stanza "Upgrading $name to `echo $package | pkg2rel`..."
  else
    stanza "Installing $package..."
  fi
  echo $package >>$INST_CACHE

  $DRY_RUN && echo "$description" && return 0

  # call the install-command
  local add="upgradepkg --reinstall --install-new"
  if ! su -c "$add $pkg_file | tee $t/output | grep -e ^PACKAGE \
  -e ^$name: -e ^Executing"; then
    cat $t/output
    error "Installation failed!"
    return 1
  fi
  return 0
}

do_add() # pkgex_list
{
  local t=`mktemp -d`
  has_args "$@" || die
  has_ports || die
  is_root || die
  ls_inst >$t/inst
  : >$t/building

  local arg
  for arg in `explicit "$@"`; do
    debug "adding now: "$arg
    echo "$arg" >>$t/started
    get_info $arg || continue
    # if the current port is already tracked as started and not finished, it is
    # either broken or a circular dependency and should fail now
    if fgrep -sqx "$package" $t/building; then
      row "Circular dependency! Skipping $name."
      return 0
    fi
    sed -i "\,^$arg$,d" $t/started
    echo "$package" >>$t/building
    add_pkg || continue
    sed -i "/^$package$/d" $t/building
  done
  local ret=$?

  # summary
  local stats=$ADM_DIR/portpkg/log
  $DRY_RUN && stats=/dev/null
  { stanza "Summary `date`:"
    cat $t/started $t/building | xargs -r -l echo "  --> Failed"
    ls_inst | fgrep -vxf $t/inst | xargs -r -l echo "  --> Added"
  } | tee -a $stats >$output

  debug "finished: $FUNCNAME() $@"
  return $ret
}

do_diff()
{
  local t=`mktemp -d`
  has_ports || die
  local diff_list=`ls_diff`
  [ "$diff_list" ] || die "No differences found."
  ls_inst >$t/inst
  local pkg
  for pkg in 0 $diff_list; do
    [ "$pkg" = "0" ] && echo -e "\nPACKAGE: AVAILABLE: INSTALLED:" && continue
    debug "processing now: $pkg"
    local avail_rel=`echo $pkg | pkg2rel`
    local name=`echo $pkg | pkg2name`
    local inst_rel=`grep -m 1 $(regex $name) $t/inst | pkg2rel`
    avail=${avail:-$name}
    avail_rel=${avail_rel:-(n/a)}
    echo "$name $avail_rel $inst_rel"
  done | column -t
}

do_export() # pkgex_list
{
  is_root || die
  has_args "$@" || die
  has_ports || die

  # make sure, the user didn't accidently give a port for summary
  case "$export_opt" in *\ *) ;; *) die "Summary must be at least two words!"; esac

  stanza "Exporting:"
  local arg
  for arg in `explicit "$@"`; do
    debug "processing now: $arg"
    get_info $arg || continue

    # make some check before exporting
    if ! $maintain; then
      error "$group/$name is not your port. Skipping."
    elif [ -f $path/PORT_IS_BROKEN ]; then
      error "Cannot export broken ports: $group/$name"
    elif ! [ -f $path/footprint ] || [ $path/footprint -ot $script ]; then
      error "No or too old footprint: $group/$name"
    elif [ `grep -s ^$name: $path/slack-desc | grep :.. | wc -l` -lt 2 ]; then
      error "Too short description: $group/$name"
    elif [ "`find $path/ -type l`" ]; then
      error "Remove links before export: $group/$name"
    fi
    [ $? != 0 ] && continue

    # start 3rd-party-exporter
    if [ -f $CFG_DIR/export ]; then
      $DRY_RUN || (. $CFG_DIR/export)
    else
      die "Exporter not defined: $CFG_DIR/export"
    fi
  done
}

# find ports by pattern
do_find() # text [...] >pkgex_list
{
  local t=`mktemp -d`
  has_args "$@" || die
  has_ports || die
  find $PRT_DIR/ -follow -name slack-desc >$t/list
  local arg
  for arg; do
    cat $t/list | xargs grep -lsi $arg >$t/list.new
    mv $t/list.new $t/list
  done
  [ -s $t/list ] && do_list `cat $t/list | scr2gname`
}

# print information about a port
do_info() # pkgex-list
{
  has_ports || die
  has_args "$@" || die
  local arg
  for arg in `explicit "$@"`; do
    get_info $arg || continue
    echo
    echo "PACKAGE NAME:  $package"
    if [ "$pkg_file" ]; then
      local s=`gzip -l $pkg_file 2>/dev/null | tail -n 1`
      local size=`echo $s | awk '{ print $1 }'`
      local u_size=`echo $s | awk '{ print $2 }'`
      echo "COMPRESSED PACKAGE SIZE:  `expr $size / 1024` K"
      echo "UNCOMPRESSED PACKAGE SIZE:  `expr $u_size / 1024` K"
      echo "PACKAGE LOCATION:  $pkg_file"
    fi
    echo "SCRIPT LOCATION:  $script"
    [ "$requires" ] && echo "PACKAGE REQUIRES:  "$requires | fmt -t 2>/dev/null
    [ "$optional" ] && echo "PACKAGE SUGGESTS:  "$optional | fmt -t 2>/dev/null
    [ "$sources" ] && echo "SOURCE LOCATIONS:  "$sources | fmt -t 2>/dev/null
    [ "$description" ] && echo -e "PACKAGE DESCRIPTION:\n$description"
  done
}

# list available ports
do_list() # [pkgex-list] >pkgex_list
{
  has_ports || die
  # grep arguments
  local regex
  [ "$*" ] && regex=`regex $*` || regex="-v ^$"
  ls_loc | grep $regex 2>/dev/null | loc2gpkg
}

do_sync()
{
  local t=`mktemp -d`
  is_root || die
  has_prog cvs || die
  stanza "Syncing your ports:"

  # start 3rd-party-importers
  local importer
  for importer in `find $CFG_DIR/importers/* 2>/dev/null`; do
    [ -x $importer ] && (. $importer)
  done

  # sync package dir
  row "Syncing $PKG_DIR/"
  mkdir -p $PKG_DIR
  ls_loc | loc2gpkg >$t/avail
  local gpkg group

  # check groups
  ls_pkg | fgrep -vxf $t/avail | while read gpkg; do
    group=`grep -m 1 /${gpkg#*/}$ $t/avail | cut -sd / -f 1`
    group=${group:-outdated}
    case $gpkg in $group/*) continue; esac
    row "Moving $gpkg to $group/"
    mkdir -p $PKG_DIR/$group
    $DRY_RUN || mv $PKG_DIR/$gpkg.tgz $PKG_DIR/$group/
  done

  # check for empty dirs
  local dir
  find $PKG_DIR/ -mindepth 1 -type d -empty | while read dir; do
    row "Deleting empty directory $dir/"
    $DRY_RUN || rmdir $dir
  done
}

# upgrade all installed ports that are not available
do_upgrade()
{
  has_ports || die
  local diff_list=`ls_diff | pkg2name`
  [ "$diff_list" ] || die "No upgrades available."
  do_add $diff_list
}

help()
{
  cat <<EOF

Usage: portpkg [options] list [...]
       portpkg action [options] [list [...]]

Build package by a script and install it.

Actions (alternative):
  -d, --diff        Compare installed versions with availables
  -i, --info        View information about specified ports
  -f, --find strs   Find ports by matching pattern strings
  -l, --list        List (all or certain) available ports
  -s, --sync        Sync local ports tree in [$PRT_DIR]
  -u, --upgrade     Upgrade all (!) outdated ports (see --diff)
  -v, --version	    View version information
  -x, --export msg  Submit ports

Options [implied options]:
  -p, --prepare     Build only, don't install [--noreqs]
  -o, --download    Download only, don't build/install
  -r, --remaintain  Maintain only, skip building [--rebuild]
  -y, --dryrun	    Simulate only, don't build/install/up-/download
  -b, --rebuild     Force building, if already built  [--reinstall]
  -e, --reinstall   Force installing, if already installed
  -m, --maintain    Force maintaining, update meta info
  -q, --noreqs      Ignore dependencies
  -a, --lazy        Ignore release differences, don't upgrade dependencies
  -n, --ignorearch  Ignore arch differences
  -g, --verbose     More output
  -z, --debug       Debug messages

Lists:
  group/ or
  [group/]name[-version-arch-build]
EOF
}

version()
{
  cat <<EOF
    
Portpkg version $ENGINE_VER.
Copyright (C) 2003-2005 Thomas Pfaff <topf at users dot berlios dot de>.
Portpkg comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.
EOF
}

parse_options()
{
  local shorts="diflsuvhebogyqx:zarpmn"
  local longs="diff,info,find,list,sync,upgrade,version,help,reinstall,\
rebuild,download,verbose,dryrun,noreqs,debug,lazy,remaintain,prepare,\
maintain,export:,ignorearch"

  local args
  args=`getopt -qo $shorts -l $longs -- "$@"`
  [ "$?" = "0" ] || die "Bad Arguments! Try: portpkg --help"
  eval set -- "$args"

  while [ "$1" ]; do
    case $1 in
      -d|--diff)        action=do_diff;;
      -i|--info)      	action=do_info;;
      -f|--find)        action=do_find;;
      -l|--list)      	action=do_list;;
      -s|--sync)        action=do_sync;;
      -u|--upgrade)     action=do_upgrade;;
      -v|--version)     action=version;;
      -x|--export)      action=do_export
                        export_opt="$2"
                        shift;;
      -h|--help)      	action=help;;
      -p|--prepare)     prepare_only=true;;
      -o|--download)    download_only=true;;
      -r|--remaintain)  remaintain=true;;
      -y|--dryrun)      DRY_RUN=true;;
      -g|--verbose)   	VERBOSE=true;;
      -z|--debug)       DEBUG=true;;
      -b|--rebuild)     rebuild=true;;
      -e|--reinstall)   reinstall=true;;
      -m|--maintain)    MAINTAIN_ALL=true;;
      -q|--noreqs)      NO_REQS=true;;
      -a|--lazy)        LAZY_CHECKS=true;;
      -n|--ignorearch)  IGNORE_ARCH=true;;
      --)               shift
                        break;;
    esac
    shift
  done

  $prepare_only && NO_REQS=true
  $rebuild && reinstall=true
  $remaintain && rebuild=true
  $VERBOSE && output=/dev/stdout

  debug "exclude=\"$exclude\""
  debug "ARCH=$ARCH"
  debug "$FUNCNAME() $args"
  $prepare_only && debug "prepare-only is enabled"
  $LAZY_CHECKS && debug "lazy-checks is enabled"
  $IGNORE_ARCH && debug "ignore-arch is enabled"
  $DRY_RUN && debug "dry-run is enabled"

  $action "$@"
}

init()
{
  # clean up on exit
  trap "rm -rf $TMPDIR" EXIT
  trap "" PIPE

  # check
  has_prog sed || die
  case $ARCH in *-*) die "ARCH value not allowed: $ARCH"; esac

  # read-in exclude-list
  exclude=`regex $(grep -vshe ^# -e ^$ $CFG_DIR/exclude.local $CFG_DIR/exclude)`

  # if not used as include file then start me
  [ `basename $0` = "portpkg" ] && parse_options "$@"
  return 0
}

init "$@"
