.TH PORTPKG 1 "February 2005" "Slackware Linux" "User Manuals"
.SH NAME
portpkg \- build a package by source and install it
.SH SYNOPSIS
.PP
portpkg [<action>] [<options>] [<expression> [...]]
.PP
While `expression' can have one of these forms:
.IP
<group>/
.IP
[<group>/]<portname>
.SH DESCRIPTION
Portpkg starts a build script (SlackBuild) found in /usr/ports/ and
installs the resulting package on the system. The default behaviour will
let it check for dependant ports and packages and build them in order to
satisfy requirements. Portpkg will always try to shorten unnecessary
things and reuse existing files: It resumes automatically partly
downloaded source files and makes use of its cache directories for
already built packages or already downloaded source files.

If no port argument (<expression>) is specified, the port in the current
directory (if any) will be  used.
.SH ACTIONS
If no action is explicitly specified, the default action is to install a
port, which includes downloading source code, compiling and packaging if
neccessary. There can be only one alternative action:
.IP "-d, --diff"
List the difference between installed and available port versions.
.IP "-f, --find <string> [...]"
Find ports by search patterns.
.IP "-h, --help"
Show help page.
.IP "-i, --info [<expression>]"
Show detailed information about ports. If no argument is specified, the
port in the current directory (if any) will be displayed.
.IP "-l, --list [<expression> [...]]"
List all (or specified) available ports.
.IP "-s, --sync"
Sync the ports tree with the official tree and the package directory
with the ports tree.
.IP "-u, --upgrade"
Upgrade all (!) outdated ports shown by --diff.
.IP "-v, --version"
Show version information about portpkg.
.IP "-x, --export <message> [<expression> [...]]"
Submit ports to the Portpkg Project. If no argument is specified, the
port in the current directory (if any) will be exported.
.SH OPTIONS
There can be multiple options at once to customise portpkg's behaviour
(most of them can also be defined permanently in
/etc/portpkg/local.conf):
.IP "-p, --prepare"
Build package, but don't install (implies --noreqs). PREPARE_ONLY=true
.IP "-o, --download"
Download source code files only. DOWNLOAD_ONLY=true
.IP "-r, --remaintain"
Run only maintainer mode (update meta information) (implies --rebuild).
REMAINTAIN=true
.IP "-y, --dryrun"
Simulate building/installing/up-/downloading. DRYRUN=true
.IP "-g, --verbose"
Show more output. VERBOSE=true
.IP "-z, --debug"
Show debug messages. DEBUG=true
.IP "-b, --rebuild"
Rebuild the package if already build (implies --reinstall). REBUILD=true
.IP "-e, --reinstall"
Reinstall a package, if already installed. REINSTALL=true
.IP "-m, --maintain"
Force maintainer mode. The "maintainer mode" is fundamentally different
for package building time. Checks (PGP/MD5SUM) will not be done, and
meta information (the files md5sums, footprint and requires) will be
regenerated or appended. Normally, maintainer mode is active when the
current port has a tag that matches MY_TAG=<tag>. MAINTAIN_ALL=true
.IP "-q, --noreqs"
Don't check for dependencies. Note, that this can lead to build
failures, that must be solved manually! NO_REQS=true
.IP "-a, --lazy"
Don't upgrade dependencies to newest available version. A requirement is
satisfied if a package of any particular version is installed. Note,
that this can lead to build failures, that must be solved manually!
LAZY_CHECKS=true
.SH EXAMPLES
.IP "portpkg --verbose --noreqs foobar"
Port `foobar' (download source code, compile, package, install), show
compile output, but don't check dependencies.
.IP "portpkg --diff"
List all installed packages which have a newer availabe version in the
ports tree.
.IP "portpkg --find moz"
Find any ports, that contain the string `moz' in their description.
.IP "portpkg --info mozilla galeon"
Give information about the ports `mozilla' and `galeon'.
.IP "portpkg --list"
List all available ports.
.IP "portpkg --list l/"
List all ports in group `l/'.
.IP "portpkg --list foo"
.IP "portpkg --list l/foo"
Different ways to list ports with name foo or other conditions.
.IP "portpkg --sync"
Sync the local ports tree with the official ports tree.
.IP "portpkg --upgrade"
Upgrade any port that is listed by --diff.
.IP "portpkg --export 'Version update.' lib
Exports \`lib' with the default exporter (/etc/portpkg/export).
.SH DIRECTORIES
.IP /usr/ports
The ports tree. PRT_DIR=<path>
.IP /usr/ports/local
Local overlay ports tree. In doubt, these ports are always preferred.
LPRT_DIR=<path>
.IP /usr/ports/z
Fallback tree. These ports are listed as ports of last resort. Plugin
scripts make use of this directory. ZPRT_DIR=<path>
.IP /usr/ports/virtual
Virtual groups. Ports that are collected in different "virtual" groups.
VPRT_DIR=<path>
.IP /usr/src/dist
The source code files archive. Files that were downloaded before
compiling. SRC_DIR=<path>
.IP /usr/src/cvs
The source code CVS archive. CVS repositories to be updated before
compiling. CVS_DIR=<path>
.IP /usr/obj/pkg
The binary packages archive. PKG_DIR=<path>
.SH FILES
.IP /etc/portpkg/local.conf
.IP ~/.portpkg.conf
The configuration file for optional settings. Empty or non-existing
leads to defaults.
.IP "/etc/portpkg/use"
List of ports and groups to handle as required dependencies rather than optional.
.IP "/etc/portpkg/mirrors"
List of mirrors to be used when downloading files. 
.IP "/etc/portpkg/ignore"
List of ports and groups to ignore when making the "requires" file.
.IP "/etc/portpkg/exclude"
List of ports and groups to exclude when doing upgrades or diffs.
.PP
Log files:
.IP /var/log/portpkg/<package>
The detailed output when a SlackBuild was executed. You can view this
instantly with --verbose.
.IP /tmp/<package>.tar.bz2
A copy of ports that were exported via the HTTP exporter plugin.
.SH AUTHOR
Thomas Pfaff <topf at users dot berlios de>
.SH "SEE ALSO"
.BR installpkg(8)
.BR removepkg(8)
.BR upgradepkg(8)  	
