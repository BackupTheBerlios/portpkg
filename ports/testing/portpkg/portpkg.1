.TH PORTPKG 1 "February 2005" "Slackware Linux" "User Manuals"
.SH NAME
portpkg \- build a package by source and install it
.SH SYNOPSIS
.PP
portpkg [<action>] [<options>] [<list> [...]]
.PP
While `list' can have one of these forms:
.IP
<group>/
.IP
[<group>/]<name>[-<version>-<arch>-<build>]
.SH DESCRIPTION
Portpkg starts a build script (SlackBuild) found in /usr/ports/ and
installs the resulting package on the system. The default behaviour will
let it check for dependant ports and packages and build them in order to
satisfy requirements. Portpkg will always try to shorten unnecessary
things and reuse existing files: It resumes automatically partly
downloaded source files and makes use of its cache directories for
already built packages or already downloaded source files.

If no port argument (<list>) is specified, the port in the current
directory (if any) will be  used.
.SH ACTIONS
If no action is explicitly specified, the default action is to install a
port, which includes downloading source code, compiling and packaging if
neccessary. There can be only one alternative action:
.IP "-d, --diff"
List the difference between installed and available port versions.
.IP "-f, --find <string> [...]"
Find ports by search patterns.
.IP "-h, --help"
Show help page.
.IP "-i, --info <list>"
Show detailed information about ports. If no port argument is specified,
the port in the current directory (if any) will be displayed.
.IP "-l, --list [<list> [...]]"
List all (or specified) available ports.
.IP "-s, --sync"
Sync the ports tree with the official tree and the package directory
with the ports tree.
.IP "-u, --upgrade"
Upgrade all (!) outdated ports shown by --diff.
.IP "-v, --version"
Show version information about portpkg.
.IP "-x, --export <message> <list> [...]"
Submit ports to the Portpkg Project. If no port argument is specified,
the port in the current directory (if any) will be exported.
.SH OPTIONS
There can be multiple options at once to customise portpkg's behaviour
(some of them can also be defined in /etc/portpkg/local.conf):
.IP "-p, --prepare"
Build package, but don't install (implies --noreqs).
.IP "-o, --download"
Download source code files only.
.IP "-r, --remaintain"
Run only maintainer mode (update meta information) (implies --rebuild).
.IP "-y, --dryrun"
Simulate building/installing/up-/downloading.
.IP "-g, --verbose"
Show more output (VERBOSE=true).
.IP "-z, --debug"
Show debug messages.
.IP "-b, --rebuild"
Rebuild the package if already build (implies --reinstall).
.IP "-e, --reinstall"
Reinstall a package, if already installed.
.IP "-m, --maintain"
Force maintainer mode. The maintainer mode is fundamentally different
for package building time. Checks (PGP/MD5SUM) will not be done, and
meta information (the files md5sums, footprint and requires) will be
regenerated or appended. Normally, maintainer mode is active when the
current port has a tag that matches MY_TAG=<tag> (MAINTAIN_ALL=true).
.IP "-q, --noreqs"
Don't check for dependencies. This can lead to build failures, that must
be solved manually! (NO_REQS=true).
.IP "-a, --lazy"
Don't upgrade dependencies to newest available version. A requirement is
satisfied if a package of any version is installed. This can lead to
build failures, that must be solved by hand! (LAZY_CHECKS=true).
.IP "-n, --ignorearch"
Ignore differences in arch when checking for newest version of a port.
This option can be comfortable e.g. when you have changed from i486 to
i686 and don't want to recompile all packages when doing an --upgrade
(IGNORE_ARCH=true).
.SH EXAMPLES
.IP "portpkg -gq foobar"
Port `foobar' (download source code, compile, package, install), show
compile output, but don't check dependencies.
.IP "portpkg --diff"
List all installed packages which have a newer availabe version in the
ports tree.
.IP "portpkg --find moz"
Find any ports, that contain the string `moz' in their description.
.IP "portpkg --info mozilla galeon"
Give information about the ports `mozilla' and `galeon'.
.IP "portpkg --list"
List all available ports.
.IP "portpkg -l l/"
List all ports in group `l/'.
.IP "portpkg -l foo"
.IP "portpkg -l l/foo"
.IP "portpkg -l foo-1.0-i486-1"
.IP "portpkg -l l/foo-1.0-i486-1"
Different ways to list ports with name foo and other conditions.
.IP "portpkg -l bla n/arg bar-1.0-i486-1"
List all available ports of one group or with certain conditions.
.IP "portpkg --sync"
Sync the local ports tree with the official ports tree.
.IP "portpkg --upgrade"
Upgrade any port that is listed by --diff.
.IP "portpkg -x 'Version update.' lib
Exports \`lib' with the default exporter (/etc/portpkg/export).
.SH DIRECTORIES
.IP /usr/ports
The ports tree (PRT_DIR=<path>).
.IP /usr/src/dist
The source code files archive. Files that were downloaded before
compiling (SRC_DIR=<path>).
.IP /usr/src/cvs
The source code CVS archive. CVS repositories to be updated before
compiling (CVS_DIR=<path>).
.IP /usr/obj/pkg
The binary packages archive (PKG_DIR=<path>).
.SH FILES
.IP /etc/portpkg/local.conf
The configuration file for optional settings. Empty or non-existing
leads to defaults.
.IP "/etc/portpkg/use.local"
List of ports to handle as required dependencies rather than optional.
.PP
Several configuration files are distributed and can be expanded by \.local files:
.IP "/etc/portpkg/mirrors and mirrors.local"
List of mirrors to be used when downloading files. 
.IP "/etc/portpkg/ignore and ignore.local"
List of ports to ignore when making the "requires" file.
.IP "/etc/portpkg/exclude and exclude.local"
List of ports to exclude when doing upgrades or diffs.
.PP
Log files:
.IP /var/log/portpkg/<name>.buildlog
The detailed output when a SlackBuild was executed. You can view this
instantly with --verbose.
.IP /var/log/portpkg/<package>.tar.bz2
A copy of ports that were exported.
.SH AUTHOR
Thomas Pfaff <topf at users dot berlios de>
.SH "SEE ALSO"
.BR installpkg(8)
.BR removepkg(8)
.BR upgradepkg(8)  	
