MaintainerGuide

   This page addresses the process of creating new ports. Sorry, this page
   hasn't yet been translated.

Preparing

  Maintainer Mode

   For maintaining ports, Portpkg can make some extra checks to assure the
   ports have been built correct. So maintainers should have their own tag to
   have Portpkg identify their ports (please have a look at
   /usr/ports/AUTHORS to see, what tags are already in use). This is done
   with the first use of Autoport and will be written to the file
   /usr/ports/local.conf, which looks something like this:

 MY_TAG=me
 MY_EMAIL=myself@here.org
 MY_REALNAME="I. M. Weasel"

   Tags will be added to the revision number of ports and therefore have to
   be written in every SlackBuild (BUILD=1me).

  Classifying Ports

   Why is that so important? -- Ports can be tracked as requirements later by
   other ports. To avoid cluttering we should follow a naming scheme.

   Every package/port is composed of at least 4 segments divided by "-".
   Count from the tail (by leaving out .tgz): the revision (or build), the
   architecture (or noarch for architecture independend ports), the version
   and anything remaining is the "name":

 this-is-a-package-1.0-noarch-1.tgz
 |                 |   |      |
 name              ver.arch.  revision

   On naming a new port it is best to come from the source package:

 http://download.sourceforge.net/mjpeg/mjpegtools-1.6.2.tar.gz

   That was easy: The name is mjpegtools, the version is 1.6.2, the
   architecture would be i486 an a x86 machine. So our port will be called
   mjpegtools-1.6.2-i486-1me.tgz, because it is our first try. Now, we make a
   directory called mjpegtools in our group (which is here ap/) where all the
   scripts can be written for this port.

   Note: Ports should be portable for other architectures than x86 (s390 and
   x86_64), so if the code will be architecture-dependend, ARCH has to be
   {ARCH:-i486}, which means, that i486 is the default'' architecture,
   otherwise it has to be noarch.

   Besides versions cannot have a "-" inside. Futhermore names cannot have
   capitals.

   ---------------------------------------------------------------------------

Ports And Their Parts

  SlackBuild

   The file SlackBuild (and also name.SlackBuild) on its own determines the
   layout of the resulting package. It is a bash-script and is executed when
   Portpkg builds a binary package for installation. Generally, SlackBuilds
   needs to be specially adjusted to a source package.

   In the root directory of the ports tree, there's a SlackBuild-skeleton,
   that should be used as template and should be modified step-by-step if it
   doesn't fit the needs of the installation procedure.

   Please follow the basic filesystem layout in Slackware:

   +----------------------+
   |Configuration|/etc    |
   |-------------+--------|
   |Variable data|/var/lib|
   |-------------+--------|
   |Prefix       |/usr    |
   +----------------------+

   The Filesystem Hierarchy Standard, which is followed by Slackware in
   general, makes exceptions only for very few programmes, that are essential
   for booting the system or for big and closed software packages like
   /opt/kde.

   Executable files in bin/ and sbin/ directories have to be owned by
   root.bin.

   The directory /usr/local, which is the default prefix, should never be
   used for packages, but only for installations by hands. The same is in the
   other way sround.

   "Why does my package have such a fantastic compression ratio?"

   Always have a look at footprint to find misfits earlier.

   If something doesn't need to be patched, please don't patch it!

  Doinst.sh

   The file doinst.sh is a bash script that is executed on every installation
   of a binary package right after unpacking the files. It is located in
   install/ in the binary package and in /var/log/scripts/ as the package's
   name if it's installed.

   Slackware's package system for example stores symbolic links in doinst.sh
   (don't bother this, it happens automatically). SlackBuilds should be
   configured to write initialisation scripts for GConf schemas and
   Scrollkeeper documents (which should be done by Autoport), but you can
   also write down commands that are not usual but important for the
   installation of a package (e.g. gstreamer needs a gst-register).

   It is also common use in Slackware to rename configuration scripts to .new
   and install them with config(), so the administrator has to check whether
   he wants to have the new file or keep his old:

 config() {
   NEW="$1"
   OLD="`dirname $NEW`/`basename $NEW .new`"
   # If there's no config file by that name, mv it over:
   if [ ! -r $OLD ]; then
     mv $NEW $OLD
   elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then # toss the redundant copy
     rm $NEW
   fi
   # Otherwise, we leave the .new copy for the admin to consider...
 }

 config etc/only_if_not_yet_here.new

  Sources^1

   Source package URLs should be written in sources. To make version updates
   later easier, use the string $VERSION where the version number of the
   package is placed. Portpkg will download these files into the port
   directory before running the SlackBuild. After that, they will be stored
   in /usr/src/dist. If a file should be saved with a different name than its
   URL calls it, use a "%" before that. Example:

 http://www.host.org/downloads/package-$VERSION.tar.gz
 http://www.host.org/downloads/package-addon-$VERSION.tar.gz
 http://www.host.org/downloads/download.php?file=data%package-data

   Please list only primary download sites here.

  Slack-desc

   Example slack-desc:

 shortname: Projectname (short desciption)
 shortname:
 shortname: Here can be a longer and deeper going description of the package.
 shortname: Note that you do not go behind 75 characters and 11 lines.
 shortname:

  Slot-in^1

   Packages a port builds normally are "installed" with upgradepkg. That
   means if another version of the port is already installed, this old one is
   being replaced with the new one.

   E.g.: mplayer-1.0pre4-i486-1tom is already installed,
   mplayer-1.0pre5-i486-1tom is available in the ports, so the command
   portpkg mplayer just removes the first one to install the last one.

   If this behaviour is not intended, mostly for packages like kernels or
   kernel-modules, there's the possibility to mark a port as a "slot-in":

 # touch slot-in

  Pseudo^1

   The empty file pseudo marks a "pseudo port", as you can see in the ports
   tree Pp-sync-dist builds. These pseudo ports list binary Slackware
   packages as their souce packages, therefore the presents of slot-in
   instructs Portpkg not to store them in /usr/dist when the installation is
   done.

   Nore: This is more for the sake of completeness, it is subject to be
   removed if Portpkg implements a way of interacting with Slackware
   repository tools.

  Requires^1

   The file requires contains dependend packages and ports Portpkg tracks in
   the maintainer mode after compiling. These packages and ports are required
   for compiling this port, so the next time this port is to be build,
   Portpkg makes sure, this list is met. You shouldn't write this file by
   hand normally, but there may be dependencies that cannot be found
   automatically, then add them. In requires, no dependencies will be removed
   by Portpkg.

  Miscellaneous

   Several files are available in maintainer mode to indicate the result of
   the package making process:

   +------------------------------------------------------------------------+
   |PORT_IS_BROKEN^1|Marks a failure of the last compilation                |
   |----------------+-------------------------------------------------------|
   |arbitrary^1     |Lists any dependency from requires that couldn't be    |
   |                |tracked automatically                                  |
   |----------------+-------------------------------------------------------|
   |buildlog^1      |Is a detailed log of the SlackBuild-output             |
   |----------------+-------------------------------------------------------|
   |footprint^1     |Is a file list of the package content                  |
   +------------------------------------------------------------------------+

   ---------------------------------------------------------------------------

The Configuration Of Portpkg

   The configuration files of Portpkg is located in /usr/ports.

  Local.conf

   The file local.conf can contain several of variables:

   +------------------------------------------------------------------------+
   |MY_TAG=tag             |Your personal tag                               |
   |-----------------------+------------------------------------------------|
   |MY_EMAIL=email         |Your mail address for contacting you if you plan|
   |                       |to contribute                                   |
   |-----------------------+------------------------------------------------|
   |MY_REALNAME="real name"|Your real name for contacting you if you plan to|
   |                       |contribute                                      |
   |-----------------------+------------------------------------------------|
   |MAINTAIN_ALL=true      |Let Portpkg always work in maintainer mode      |
   |-----------------------+------------------------------------------------|
   |DIST_VER=version       |The target Slackware version if you use         |
   |                       |Pp-sync-dist or Pp-sync-slack                   |
   |-----------------------+------------------------------------------------|
   |VERBOSE=true           |Let Portpkg always work in verbose mode         |
   |                       |(--verbose)                                     |
   |-----------------------+------------------------------------------------|
   |NO_REQS=true           |Let Portpkg always work without requirements    |
   |                       |resolving (--noreqs)                            |
   |-----------------------+------------------------------------------------|
   |LAZY_CHECKS=true       |Don't upgrade dependencies (==--lazy)           |
   +------------------------------------------------------------------------+

  Mirrors And Mirrors.local

   While primary download URLs should be listed in sources, in mirrors
   there're global mirror sites for common source package locations. If you
   want to have some special mirror sites for your own, write them into
   mirrors.local.

  Ignore And Ignore.local

   Normally, dependencies are tracked automatically by Portpkg in the
   maintainer mode after compiling and written to the file requires. If you
   find any dependencies in requires that shouldn't be tracked, write them
   into ignore.local:

     o Packages or ports, that are optional: mostly newer versions of
       libraries included in other Slackware packages (e.g. freetype,
       fontconfig etc. are already included in Slackware's x11 package)
     o Packages or ports being useless to track, because they're already and
       for sure installed (e.g. aaa_elflibs)

   A global list of common ignored dependencies is in ignore.

  Exclude And Exclude.local

   Ports you don't want to be built (also as a dependency or as an upgrade),
   should be written to exclude.local. A common set of ports that should be
   excluded is in the global file exclude.

   You can read further on in MaintainerGuide!

   ---------------------------------------------------------------------------

Contributing Ports

   For contributing your ports, you have to make a tarball of your ports
   first. Use the script Pp-export (here you will be asked for your mail
   address and your real name, so we can contact you later):

 # pp-export

 pp-export -- A portpkg-addon that packs your ports to a tarball for submission
 to the Portpkg Project hosted on http://portpkg.berlios.de.

 If this is the first time you use pp-export, you will be asked for your mail
 address and real name which is required for maintainers. These will be stored
 world visible to contact you later. You can change this later in
 /usr/ports/local.conf.

 What is your tag? (e.g. 'mich')? mich

 What is your real name? M. Ich

 What is your mail address? mich@hier.de

 Continue exporting ports with tag 'tom'? (ctrl-c to quit)

 Finding ports:
   --> Found ap/this
   --> Found n/that

 Creating tarball:
   --> Copying 2 ports to /tmp/ports-mich
   --> Removing private files from export: buildlog footprint arbitrary diff maintain CVS...
   --> Writing info-file (contains mich, mich@hier.de, M. Ich)...
   --> Creating ports-mich-31022004.tar.bz2...
   --> Removing /tmp/ports-mich...

 Tarball is in /usr/ports/ports-mich-20040231.tar.bz2.

   Now there's your tarball in /usr/ports, called
   ports-mich-20040231.tar.bz2. Please make sure, it's not getting too big!
   Normally, a port just needs the files SlackBuild, slack-desc, sources and
   requires. You can load it up on http://portpkg.berlios.de.

   ---------------------------------------------------------------------------

   Note: ^1 This file is specific to Portpkg

   ---------------------------------------------------------------------------

