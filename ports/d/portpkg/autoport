#!/bin/sh
#
# Autoport -- An Automatic SlackBuild Generator
# Copyright (C) 2004 Thomas Pfaff <toastbrot@web.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

source `which portpkg` || exit 1
t=`private`

ask()
{
#  $i_act || return
  echo
  echo -n "$@ "
  s=""
  $i_act && read s || echo
}

check()
{
  local desc=$1
  local pattern=$2
  local file=$3
  if egrep -q "$pattern" $file; then
    row "Checking for $desc... yes"
    return 0
  else
    row "Checking for $desc... no"
    return 1
  fi
}

snip()
{
  sed -i "/^#\!$1$/,/^#\!$1$/d" $2
}

encode()
{
  local enc=`echo "$@" | sed -e "s,$name,\\$NAME,g" -e "s,\'$version\',\\$VERSION,g"`
  echo "$enc"
}

decode()
{
  local dec=`echo "$@" | sed -e "s,\\$NAME,$name,g" -e "s,\\$VERSION,$version,g"`
  echo "$dec"
}

# preambel
stanza "Autoport -- An Automatic SlackBuild Generator
Copyright (C) 2004 Thomas Pfaff <toastbrot@web.de>
Autoport comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.

Autoport is quite experimental, but seems to work better than 'addport'. The
difference is, autoport will download the source code package you have to
enter and searches for different keywords to adjust a suitable SlackBuild
script.

If autoport doesnt't work as expected, please mail at:
<topf at users dot berlios dot de>"

# usage
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  stanza "Usage: autoport [-a] [-u url] [-g group] [-n name] [-b]"
  exit 1
fi

# defaults
i_act=true
source=""
group=local
#arch="\${ARCH:-i486}"
arch=i486
build_port=false
# parse options
if [ "$*" ]; then
  while [ "$1" ]; do
    case $1 in
      -a)
        i_act=false
        shift;;
      -u)
        source=$2
        shift
        shift;;
      -g)
        group=`echo $2 | cut -d / -f 1`
        shift
        shift;;
      -n)
        name=`echo $2 | cut -d / -f 1`
        shift
        shift;;
      -b)
        build_port=true
        shift;;
    esac
  done
fi

ask "Continue? (ctrl-c to quit)"

# do we have tags?
while ! [ "$MY_TAG" ]; do
  $i_act && die "No tag specified!"
  ask "What is your tag? (e.g.: 'mich')"
  MY_TAG=`echo $s | tr "A-Z" "a-z" | sed "s,[^a-z],,g"`
  [ "$MY_TAG" ] && echo "MY_TAG=$MY_TAG" >>$PRT_DIR/local.conf
done

# input information
stanza "Now we need some information about the port:"
# source: check if we can guess it, but -u is dominant
if [ "$name" ] && [ "$group" ] && ! [ "$source" ]; then
  version=`grep ^VERSION= $PRT_DIR/$group/$name/SlackBuild | cut -d = -f 2`
  source=`decode "$(grep -ve ^$ -e ^# $PRT_DIR/$group/$name/sources | head -n 1)"`
fi
ask "Source file [$source]:"
source=${s:-$source}
[ "$source" ] || die "Nothing entered. Eh? I can't help you this way!"
source=`echo "$source" | sed -e "s,//prdownloads\.,//dl\.," -e "s,\?download$,,"`
# group
ask "Group [$group]:"
group=${s:-$group}
# name: guess it, if we haven't yet it
file=`basename $source`
raw_name=`echo $file | rev | cut -d - -f 2- | rev`
[ "$name" ] || name=`echo $raw_name | tr "A-Z" "a-z"`
ask "Name [$name]:"
name=${s:-$name}
# now check if it exists
get_info $group/$name
# version: should be always guessed
## version: guess it, if we haven't yet it
#if ! [ "$version" ]; then
  version=`echo $file | rev | cut -d - -f 1 | rev`
  version=`basename $version .tar.gz`
  version=`basename $version .tar.bz2`
  version=`basename $version .tgz`
#fi
ask "Version [$version]:"
version=${s:-$version}
srcver=$version
version=`echo $version | sed "s,-,,g"`
source_out=`echo "$source" | sed "s,$version,\\$VERSION,g"`
# arch
ask "Arch [$arch]:"
arch=${s:-$arch}
# build: check if we need to increase it
n=1
gpkg=`ls_locations | loc2gpkg | grep -m 1 "^$group/$name-$version-$arch-[0-9]*$MY_TAG$"`
if [ $gpkg ]; then
  echo "There is already $gpkg."
  # find it
  while [ "$group/$name-$version-$arch-$n$MY_TAG" != $gpkg ]; do
    ((n++))
    [ "$n" == "1000" ] && die "Strange: Cannot find build number!"
  done
  # now that we found it, we can find a bigger number too!
  ((n++))
fi
ask "Build [$n$MY_TAG]:"
build=${s:-$n$MY_TAG}
# desc
if [ "$description" ]; then
  desc1=`echo "$description" | sed "s,^$name:[ ]*,," | head -n 1`
  desc2=`echo "$description" | sed "s,^$name:[ ]*,," | sed "1,2d"`
else
  desc1=$raw_name
fi
ask "Description (1-liner) [$desc1]:"
desc1=${s:-$desc1}
stanza "Description (details) (Write or paste and finish with a single '.')"
echo "[$desc2]"
s=""
if $i_act; then
  while [ "$l" != "." ]; do
    read l
    s="$s
$l"
  done
  s=`echo "$s" | sed -e "1d" -e "/^\.$/d"`
fi
desc2=${s:-$desc2}
# combine $desc1 and $desc2
if [ "$desc2" ]; then
  len=${#name}
  desc=`echo "$name: $desc1"
  echo "$name:"
  echo "$desc2" | fmt -u -w $((75-len)) | sed "s,^,$name: ,"
  echo "$name:"`
else
  desc="$name: $desc1"
fi
echo
echo "Creating now a port with this information:"
echo
echo "PORT NAME:  $name-$version-$arch-$build"
echo "PORT LOCATION:  $PRT_DIR/$group/$name/SlackBuild"
echo "PORT SOURCE:  $source_out"
echo "PORT DESCRIPTION:"
echo "$desc"

ask "Continue? (ctrl-c to quit)"

path=$PRT_DIR/$group/$name
script=$path/SlackBuild
old_script=""
if [ -f $path/stop.autoport ]; then
  stanza "There's a notice not to autoport this source code:"
  more $path/stop.autport
  ask "Continue? (ctrl-c to quit)"
fi
if [ -d $path ]; then
  ask "Exists already. Really go on? (ctrl-c to quit)"
  old_script=`find $path/ -name "*SlackBuild" | head -n 1`
  mv ${old_script}{,.old}
#  [ -f $path/doinst.sh ] && mv $path/doinst{.sh,.old}
fi

# write skeletons
failed=false
mkdir -p $path
cat $0 | sed '/^#\!SlackBuild.skel$/,/^#\!SlackBuild.skel$/!d' >$script
echo "$source_out" >$path/sources
echo "$desc" >$path/slack-desc
sed -i "s,%version%,$version," $script
sed -i "s,%build%,$build," $script

# downlaod source file
stanza "Next, I'll download the source file:"
file=`basename $source`
[ -f $SRC_DIR/$file ] && stanza "$file found in $SRC_DIR/." \
|| get $source $SRC_DIR/$file || die

# checking
stanza "Alright, since we have the code, I'll have a look into it:"
# format
echo -n "  --> Checking format... "
format=`file $SRC_DIR/$file | egrep -wo "gzip|bzip2"`
case $format in
  bzip2)
    format=tarbz2
    tar tjf $SRC_DIR/$file >$t.footprint \
    || die "Error while unpacking, maybe wrong URL?"
    echo ".tar.bz2"
    snip targz $script;;
  gzip)
    format=targz
    tar tzf $SRC_DIR/$file >$t.footprint \
    || die "Error while unpacking, maybe wrong URL?"
    echo ".tar.gz"
    snip tarbz2 $script;;
  *)
    echo "unknown!"
    die "Unknown source format, please write SlackBuild by hand!";;
esac
tarball=`encode "$file"`
sed -i "s,%tarball%,$tarball," $script
# source-prefix
echo -n "  --> Checking source-prefix... "
srcdir_prefix=`cat $t.footprint | sed "s,^\./,," | cut -d / -f 1 | sort -u`
if [ `echo $srcdir_prefix | wc -l` == "1" ] && [ "$srcdir_prefix" != "." ]; then
  echo "$srcdir_prefix/"
  snip extra_sdp $script
  srcdir_prefix_out=`encode "$srcdir_prefix"`
  sed -i "s,%srcdirprefix%,$srcdir_prefix_out," $script
else
  echo "no prefix!"
  snip cd_sdp $script
fi
# docs
docs=`egrep "/ABOUT$|/ABOUT-NLS$|/ANNOUNCE$|/AUTHORS$|/CONFIGURATION$|/CHANGES$\
|/COPYING$|/COPYRIGHT$|/CREDITS$|/ChangeLog$|/Changelog$|/CHANGELOG$\
|/CONTRIBUTORS$|FAQ|/FEATURES$|/FILES$|/HACKING$|/History$|/HISTORY$|/INSTALL\
|/LICENSE$|/LSM$|/MANIFEST$|/NEWS$|README|Readme|/SITES$|RELEASE|/RELNOTES$\
|/THANKS$|/TIPS$|/TODO$|/VERSION$|/CONFIGURATION|/GPL$|/License$|/Doc$|/doc$\
|/Docs|/docs|/Roadmap$|/ROADMAP$|BUGS|/index.ht|INDEX" $t.footprint \
| sed "s,^$srcdir_prefix/,," | grep -v / | sort -u | xargs`
if [ "$docs" ]; then
  row "Checking docs... $docs."
  sed -i "s,%docs%,$docs," $script
else
  snip docs $script
  row "Checking docs... none."
fi
mkdir -p $t.src
case $format in
  tarbz2) tar xjf $SRC_DIR/$file -C $t.src/ "*/Makefile*" 2>/dev/null;;
  targz)  tar xzf $SRC_DIR/$file -C $t.src/ "*/Makefile*" 2>/dev/null;;
esac
# installation
if check "setup.py" "^$srcdir_prefix/setup\.py$" $t.footprint; then
  # setup.py seems to be first choice...
  snip autogen $script
  snip configure $script
  snip perl $script
  snip usrlocal $script
  snip make $script
  snip make_PREFIX $script
  snip make_prefix $script
  snip inst_destdir $script
  snip inst_PREFIX $script
  snip inst_prefix $script
  arch=noarch
else
  snip python $script
  if check "Makefile.PL" "^$srcdir_prefix/Makefile.PL$" $t.footprint; then
    # ...but Makefile.PL isn't bad either...
    snip autogen $script
    snip configure $script
    snip usrlocal $script
    snip make_PREFIX $script
    snip make_prefix $script
    snip inst_PREFIX $script
    snip inst_prefix $script
    arch=noarch
  else
    snip perl $script
    if check "configure" "^$srcdir_prefix/configure$" $t.footprint; then
      snip autogen $script
      snip usrlocal $script
      snip make_PREFIX $script
      snip make_prefix $script
    else
      if check "autogen.sh" "^$srcdir_prefix/autogen.sh$" $t.footprint; then
        snip usrlocal $script
        snip make_PREFIX $script
        snip make_prefix $script
      else
        snip autogen $script
        snip configure $script
        if check "Makefile" "^$srcdir_prefix/Makefile$" $t.footprint; then
          # single Makefile: we need to tell the prefix nevertheless
          if check "PREFIX" "\<PREFIX\>" "$t.src/$srcdir_prefix/*"; then
#            snip usrlocal $script
            snip make $script
            snip make_prefix $script
          elif check "prefix" "\<prefix\>" "$t.src/$srcdir_prefix/*"; then
#            snip usrlocal $script
            snip make $script
            snip make_PREFIX $script
          elif check "hard coded /usr/local" "/usr/local" "$t.src/$srcdir_prefix/*"; then
#            snip make $script
            snip make_PREFIX $script
            snip make_prefix $script
          else
            error "Don't know how to build this package."
            failed=true
          fi
        fi
      fi
    fi
    # installation prefix
    if check "DESTDIR" "\<DESTDIR\>" "$t.src/$srcdir_prefix/*"; then
      snip inst_PREFIX $script
      snip inst_prefix $script
      snip usrlocal $script
    else
      snip destdir $script
      if check "PREFIX" "\<PREFIX\>" "$t.src/$srcdir_prefix/*"; then
        snip inst_prefix $script
        snip usrlocal $script
#        snip make $script
      else
        snip inst_PREFIX $script
        if check "prefix" "\<prefix\>" "$t.src/$srcdir_prefix/*" "$t.src/$srcdir_prefix/*"; then
          snip usrlocal $script
#          snip make $script
        else
          snip inst_prefix $script
          if check "hard coded /usr/local" "/usr/local" "$t.src/$srcdir_prefix/*"; then
            snip make $script
          else
            error "Don't know how to install this package."
            failed=true
          fi
        fi
      fi
    fi	
  fi
fi
# cflags
if check "CFLAGS" "\<CFLAGS\>" "$t.src/$srcdir_prefix/*"; then
  :
else
  snip cflags $script
fi
# cxxflags
if check "CXXFLAGS" "\<CXXFLAGS\>" "$t.src/$srcdir_prefix/*"; then
  :
else
  snip cxxflags $script
fi
# gconf schemas and scrollkeeper
if check "gconf schemas" "\.schemas(|\.in|\.in\.in)$" $t.footprint \
|| check "scrollkeeper" "\.omf$" $t.footprint; then
  if ! grep -sq "^inst()$" $path/doinst.sh; then
    stanza "There's no inst() in your doinst.sh although you need it! I'll add it."
    cat $0 | sed '/^#\!doinst.sh.skel$/,/^#\!doinst.sh.skel$/!d' >>$path/doinst.sh
  fi
# only if not gconf or scrollkeeper
else
  snip config $script
  if [ -f $path/doinst.sh ]; then
    if grep -q "^inst()$" $path/doinst.sh; then
      stanza "There's a inst() in your doinst.sh although you don't need it! I'll remove it."
      sed -i "/^inst()$/,/^}$/d" $path/doinst.sh
    fi
  fi
fi
# anyways check old config()
if grep -sq "^config()$" $path/doinst.sh && ! grep -sq "^config .*\.new$" $path/doinst.sh; then
  stanza "There's an old config() in your doinst.sh although you don't need to config
.new-files! I'll remove it."
  sed -i "/^config()$/,/^}$/d" $path/doinst.sh
fi
# if it's emtpy remove it
if [ -f $path/doinst.sh ] && ! [ -s $path/doinst.sh ]; then
  stanza "Removing empty doinst.sh."
  rm $path/doinst.sh
fi
# doinst.sh at all?
[ -f $path/doinst.sh ] || snip doinst $script
# now arch should be known
case $arch in
  noarch)
    sed -i "s,%arch%,$arch," $script
    snip cflags $script
    snip strip $script;;
  *)
    # we know better than the user ;-)
    sed -i "s,%arch%,\${ARCH:-i486}," $script;;
esac
# are there patches?
if [ "`ls $path/*.patch 2>/dev/null`" ]; then
  stanza "There're patches. I'll include them in the SlackBuild, but you should check
them later."
else
  snip patch $script
fi
# for now...
snip srcver $script
snip perms644 $script
snip perms755 $script
# clean up
sed -i "/^#/d" $script
[ -f $path/doinst.sh ] && sed -i "/^#/d" $path/doinst.sh
$failed && die "There's been an error. Please write SlackBuild by hand."
stanza "We're done. Port written in $path."
if [ -f $path/readme.autoport ]; then
  stanza "There's a readme for you:"
  more $path/readme.autoport
fi
if $build_port; then
  ask "Continue? (ctrl-c to quit)"
  portpkg $group/$name
fi
exit 0

#!SlackBuild.skel
VERSION=%version%
#!srcver
SRCVER=%srcver%
#!srcver
ARCH=%arch%
BUILD=%build%

CWD=`pwd`
NAME=`basename $CWD`
PKG=/tmp/package-$NAME
rm -rf $PKG
mkdir -p $PKG/usr

#!cflags
if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
else
  SLKCFLAGS="-O2"
fi

#!cflags
cd /tmp || exit 1
#!extra_sdp
mkdir -p $NAME-$VERSION
cd $NAME-$VERSION
#!extra_sdp
#!targz
tar xzvf $CWD/%tarball% || exit 1
#!targz
#!tarbz2
tar xjvf $CWD/%tarball% || exit 1
#!tarbz2
#!cd_sdp
cd %srcdirprefix% || exit 1
#!cd_sdp
#!patch
cat $CWD/*.patch | patch -p1 --verbose
#!patch
chown -R root.root .
#!perms644
find . -perm %perm644% -exec chmod 644 {} \;
#!perms644
#!perms755
find . -perm %perm755% -exec chmod 755 {} \;
#!perms755
#---here begins configuration---
#!autogen
./autogen.sh
#!autogen
#!configure
#!cflags
CFLAGS="$SLKCFLAGS" \
#!cflags
#!cxxflags
CXXFLAGS="$SLKCFLAGS" \
#!cxxflags
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --program-prefix="" \
  --disable-static \
  $ARCH-slackware-linux || exit 1
#!configure
#!perl
perl Makefile.PL PREFIX=/usr SYSCONFDIR=/etc LOCALSTATEDIR=/var/lib || exit 1
#!perl
#!usrlocal
sed -i "s,/usr/local/etc,${PKG}/etc,g" Makefile
sed -i "s,/usr/local/var,${PKG}/var,g" Makefile
sed -i "s,/usr/local,${PKG}/usr,g" Makefile
#!usrlocal
#---here begins making---
#!make
make || exit 1
#!make
#!make_PREFIX
make PREFIX=/usr || exit 1
#!make_PREFIX
#!make_prefix
make prefix=/usr || exit 1
#!make_prefix
#---here begins installation---
#!inst_destdir
make install DESTDIR=$PKG || exit 1
#!inst_destdir
#!inst_PREFIX
make install PREFIX=$PKG/usr || exit 1
#!inst_PREFIX
#!inst_prefix
make install prefix=$PKG/usr || exit 1
#!inst_prefix
#!usrlocal
make install || exit 1
#!usrlocal
#!python
python setup.py build install --root=$PKG || exit 1
#!python
#---installation done---
chown -R root.bin $PKG{,/usr}/{,s}bin 2>/dev/null
#!strip
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2>/dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2>/dev/null
)
#!strip
mv $PKG/usr/share/{man,doc} $PKG/usr/ 2>/dev/null
rmdir $PKG/usr/share 2>/dev/null
gzip -9 $PKG/usr/man/man?/*
#!docs
mkdir -p $PKG/usr/doc/$NAME-$VERSION
cp -a \
  %docs% \
  $PKG/usr/doc/$NAME-$VERSION
#!docs
mkdir -p $PKG/install
cat $CWD/slack-desc >$PKG/install/slack-desc
#!doinst
cat $CWD/doinst.sh >$PKG/install/doinst.sh
#!doinst
#!config
find $PKG/ -name "*.schemas" -o -name "*.omf" \
| sed -r "s,^$PKG/(.*)$,inst \1," >>$PKG/install/doinst.sh
#!config

cd $PKG || exit 1
makepkg -p -l y -c n /tmp/$NAME-$VERSION-$ARCH-$BUILD.tgz
#!SlackBuild.skel
#!doinst.sh.skel
inst()
{
  case $1 in
  *.omf)
    scrollkeeper-update -p var/lib/scrollkeeper -o $1 >/dev/null 2>&1;;
  *.schemas)
    GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source` \
    gconftool-2 --makefile-install-rule $1 >/dev/null 2>&1;;
  esac
}
#!doinst.sh.skel
