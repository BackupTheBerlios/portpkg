#!/bin/sh
#
# Autoport -- An Automatic SlackBuild Generator
# Copyright (C) 2004, 2005 Thomas Pfaff <topf@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

source `which portpkg` || exit 1
t=`private`

ask()
{
#  $i_act || return
  echo
  echo -n "$@ "
  s=""
  $i_act && read s || echo
}

check()
{
  local desc=$1
  local pattern=$2
  local file=$3
  if egrep -q "$pattern" $file; then
    row "Checking for $desc... yes"
    return 0
  else
    row "Checking for $desc... no"
    return 1
  fi
}

snip()
{
  # the #!tag ... #!tag method
  sed -i "/^#\!$1$/,/^#\!$1$/d" $2
  # the xxx ##tag method
  sed -i "/ *##$1$/d" $2
}

encode()
{
  local ver=`echo $version | sed "s,\.,\.,g"`
  local enc=`echo "$@" | sed -e "s,$name,\\$NAME,g" -e "s,$ver,\\$VERSION,g"`
  echo "$enc"
}

decode()
{
  local dec=`echo "$@" | sed -e "s,\\$NAME,$name,g" -e "s,\\$VERSION,$version,g"`
  echo "$dec"
}

# preambel
stanza "Autoport -- An Automatic SlackBuild Generator
Copyright (C) 2004, 2005 Thomas Pfaff <topf at users dot berlios dot de>
Autoport comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.

Autoport is quite experimental, but seems to work better than 'addport'. The
difference is, autoport will download the source code package you have to
enter and searches for different keywords to adjust a suitable SlackBuild
script.

If autoport doesn't work as expected, please mail at:
<topf at users dot berlios dot de>"

# defaults
i_act=true
set_sources=""
set_group=local
name=""
arch=i486
build=""
build_port=false

# parse options
if [ "$*" ]; then
  while [ "$1" ]; do
    case $1 in
      -a)
        i_act=false
        shift;;
      -u)
        set_sources=$2
        shift
        shift;;
      -g)
        set_group=`echo $2 | cut -d / -f 1`
        shift
        shift;;
      -n)
        name=`echo $2 | cut -d / -f 1`
        shift
        shift;;
      -b)
        build_port=true
        shift;;
      *)
        # usage
        stanza "Usage: autoport [-a] [-u url] [-g group] [-n name] [-b]

  -a        Run non-interactive (use defaults)
  -u url    Preset URL of source code
  -g group  Preset group of port
  -n name   Preset name of port
  -b        Execute portpkg after port generation"
        exit 1;;
    esac
  done
fi

ask "* First step: Collect information. Continue? (ctrl-c to quit)"

# first: do we have tags?
while ! [ "$MY_TAG" ]; do
  $i_act && die "No tag specified!"
  ask "What is your tag? (e.g.: 'mich')"
  MY_TAG=`echo $s | tr "A-Z" "a-z" | sed "s,[^a-z],,g"`
  [ "$MY_TAG" ] && echo "MY_TAG=$MY_TAG" >>$PRT_DIR/local.conf
done

# input information
# try to guess, but set anything else as user wants
[ "$name" ] && get_info $name 2>/dev/null
[ "$set_sources" ] && sources=$set_sources
[ "$set_group" != "local" ] && group=$set_group
# sources
ask "Source file URL [$sources]:"
sources=${s:-$sources}
[ "$sources" ] || die "Nothing entered. Eh? I can't help you this way!"
sources=`echo "$sources" | sed -e "s,//prdownloads\.,//dl\.," -e "s,\?download$,,"`
set_sources=$sources
# name: guess it, if we haven't yet it
file=`basename $sources`
raw_name=`echo $file | rev | cut -d - -f 2- | rev`
[ "$name" ] || name=`echo $raw_name | tr "A-Z" "a-z"`
ask "Name [$name]:"
name=${s:-$name}
## now check if it exists
#get_info $name 2>/dev/null
#[ "$set_sources" ] && sources=$set_sources
#[ "$set_group" != "local" ] && group=$set_group
## try to guess group
#[ "$group" == "local" ] && get_info $name 2>/dev/null
# group
ask "Group [$group]:"
group=${s:-$group}
# version: should be always guessed
## version: guess it, if we haven't yet it
#if ! [ "$version" ]; then
  version=`echo $file | rev | cut -d - -f 1 | rev`
  version=`basename $version .tar.gz`
  version=`basename $version .tar.bz2`
  version=`basename $version .tgz`
#fi
ask "Version [$version]:"
version=${s:-$version}
srcver=$version
version=`echo $version | sed "s,-,,g"`
source_out=`echo "$sources" | sed "s,$version,\\$VERSION,g"`
# arch
ask "Arch [$arch]:"
arch=${s:-$arch}
# build: check if we need to increase it
n=1
gpkg=`ls_locations | loc2gpkg | grep -m 1 "^$group/$name-$version-$arch-[0-9]*$MY_TAG$"`
if [ $gpkg ]; then
  echo "There is already $gpkg."
  # find it
  while [ "$group/$name-$version-$arch-$n$MY_TAG" != $gpkg ]; do
    ((n++))
    [ "$n" == "1000" ] && die "Strange: Cannot find build number!"
  done
  # now that we found it, we can find a bigger number too!
  ((n++))
fi
ask "Build [$n$MY_TAG]:"
build=${s:-$n$MY_TAG}
# desc
if [ "$description" ]; then
  desc1=`echo "$description" | sed "s,^$name:[ ]*,," | head -n 1`
  desc2=`echo "$description" | sed "s,^$name:[ ]*,," | sed "1,2d"`
else
  desc1=$raw_name
fi
ask "Description (1-liner) [$desc1]:"
desc1=${s:-$desc1}
stanza "Description (details) (Write or paste and finish with a single '.')"
echo "[$desc2]"
s=""
if $i_act; then
  while [ "$l" != "." ]; do
    read l
    s="$s
$l"
  done
  s=`echo "$s" | sed -e "1d" -e "/^\.$/d"`
fi
desc2=${s:-$desc2}
# combine $desc1 and $desc2
if [ "$desc2" ]; then
  len=${#name}
  desc=`echo "$name: $desc1"
  echo "$name:"
  echo "$desc2" | fmt -u -w $((75-len)) | sed "s,^,$name: ,"
  echo "$name:"`
else
  desc="$name: $desc1"
fi
echo
echo "Creating now a port with this information:"
echo
echo "PACKAGE NAME:  $name-$version-$arch-$build"
echo "SCRIPT LOCATION:  $PRT_DIR/$group/$name/SlackBuild"
echo "SOURCE LOCATION:  $source_out"
echo "PACKAGE DESCRIPTION:"
echo "$desc"

ask "* Last chance to quit. Port scripts will now be written.
* Next step: Downloading and checking source code. Continue? (ctrl-c to quit)"

path=$PRT_DIR/$group/$name
script=$path/SlackBuild
old_script=""
if [ -f $path/stop.autoport ]; then
  stanza "There's a warning not to autoport this source code:"
  echo "==========================================="
  more $path/stop.autoport
  echo "==========================================="
  ask "Really continue? (ctrl-c to quit)"
fi
if [ -d $path ]; then
  ask "* This port already exists. Really go on? (ctrl-c to quit)"
  old_script=`find $path/ -name "*SlackBuild" | head -n 1`
#  mv ${old_script}{,.old}
#  [ -f $path/doinst.sh ] && mv $path/doinst{.sh,.old}
fi

# write skeletons
failed=false
mkdir -p $path
cat $0 | sed '/^#\!SlackBuild.skel$/,/^#\!SlackBuild.skel$/!d' >$script
echo "$source_out" >$path/sources
echo "$desc" >$path/slack-desc
sed -i "s,%version%,$version," $script
sed -i "s,%build%,$build," $script

# downlaod source file
file=`basename $sources`
if [ -f $SRC_DIR/$file ]; then
  stanza "$file found in $SRC_DIR/."
else
  stanza "Downloading source file:"
  VERBOSE=true
  output=/dev/stdout
  get $sources $SRC_DIR/$file || die
fi

# checking
stanza "Alright, since we have the code, I'll have a look into it:"

# format
echo -n "  --> Checking format... "
#format=`file $SRC_DIR/$file | egrep -wo "gzip|bzip2"`
# todo: check tar or not
case $file in
  *.tar.bz2)
    format=tarbz2
    tar tjf $SRC_DIR/$file >$t.footprint \
    || die "Error while unpacking, maybe wrong URL?"
    echo ".tar.bz2"
#    snip targz $script
    sed -i "s,%tarmode%,j," $script
    snip rpm $script;;
  *tar.gz|*.tgz)
    format=targz
    tar tzf $SRC_DIR/$file >$t.footprint \
    || die "Error while unpacking, maybe wrong URL?"
    echo ".tar.gz"
#    snip tarbz2 $script
    sed -i "s,%tarmode%,z," $script
    snip rpm $script;;
  *.src.rpm)
    format=srpm
    ( cd /tmp
      rm -rf `basename $file .rpm`.tar.gz
      cp $SRC_DIR/$file .
      rpm2targz $file
      tar xzf `basename $file .rpm`.tar.gz
      tar tzf `basename $file .src.rpm`/$name-$version.tar.gz >$t.footprint \
      || die "Error while unpacking, maybe wrong URL?" )
    echo ".src.rpm"
    snip tar $script
    snip tar $script;;
  *)
    echo "unknown!"
    die "Unknown source format, please write SlackBuild by hand!";;
esac
tarball=`encode "$file"`
sed -i "s,%tarball%,$tarball," $script

# source-prefix
echo -n "  --> Checking source-prefix... "
srcdir_prefix=`cat $t.footprint | sed "s,^\./,," | cut -d / -f 1 | sort -u`
if [ `echo "$srcdir_prefix" | wc -l` == "1" ] && [ "$srcdir_prefix" != "." ]; then
  echo "$srcdir_prefix/"
  snip extra_sdp $script
  srcdir_prefix_out=`encode "$srcdir_prefix"`
  sed -i "s,%srcdirprefix%,$srcdir_prefix_out," $script
else
  echo "no prefix!"
  snip cd_sdp $script
  srcdir_prefix="."
fi

# docs
docs=`egrep "/ABOUT$|/ABOUT-NLS$|/ANNOUNCE$|/AUTHORS$|/CONFIGURATION$|/CHANGES$\
|/COPYING$|/COPYRIGHT$|/CREDITS$|/ChangeLog$|/Changelog$|/CHANGELOG$\
|/CONTRIBUTORS$|FAQ|/FEATURES$|/FILES$|/HACKING$|/History$|/HISTORY$|/INSTALL\
|/LICENSE$|/LSM$|/MANIFEST$|/NEWS$|README|Readme|/SITES$|RELEASE|/RELNOTES$\
|/THANKS$|/TIPS$|/TODO$|/VERSION$|/CONFIGURATION|/GPL$|/License$|/Doc$|/doc$\
|/Docs|/docs|/Roadmap$|/ROADMAP$|BUGS|/index.ht|INDEX" $t.footprint \
| sed "s,^$srcdir_prefix/,," | grep -v / | sort -u | xargs`
if [ "$docs" ]; then
  row "Checking docs... $docs."
  sed -i "s,%docs%,$docs," $script
else
  row "Checking docs... none."
  snip docs $script
fi

# extract Makefiles
mkdir -p $t.src
case $format in
  tarbz2) tar xjf $SRC_DIR/$file -C $t.src/ "*/Makefile*" "Makefile*" 2>/dev/null;;
  targz)  tar xzf $SRC_DIR/$file -C $t.src/ "*/Makefile*" "Makefile*" 2>/dev/null;;
  srpm)   tar xzf /tmp/`basename $file .src.rpm`/$name-$version.tar.gz -C $t.src/ "*/Makefile*" "Makefile*" 2>/dev/null;;
esac
sed -i "s,^$srcdir_prefix/,," $t.footprint

# configure/make
if check "setup.py" "^setup\.py$" $t.footprint; then
  # setup.py seems to be first choice...
  snip cfg_autogen $script
  snip cfg_configure $script
  snip cfg_perl $script
  snip cfg_hard $script
  snip mk $script
  snip mk_PREFIX $script
  snip mk_prefix $script
  snip inst_destdir $script
  snip inst_PREFIX $script
  snip inst_prefix $script
  snip inst $script
  # use inst_python
  arch=noarch
else
  snip inst_python $script
  if check "Makefile.PL" "^Makefile.PL$" $t.footprint; then
    # ...but Makefile.PL isn't bad either...
    snip cfg_autogen $script
    snip cfg_configure $script
    # use cfg_perl
    snip cfg_hard $script
    # use mk
    snip mk_PREFIX $script
    snip mk_prefix $script
    # use inst_destdir
    snip inst_PREFIX $script
    snip inst_prefix $script
    snip inst $script
    # inst_python disabled
    arch=noarch
  else
    snip cfg_perl $script
    if check "configure" "^configure$" $t.footprint; then
      snip cfg_autogen $script
      # use cfg_configure
      # cfg_perl disabled
      snip cfg_hard $script
      # use mk
      snip mk_PREFIX $script
      snip mk_prefix $script
      # inst_destdir?
      # inst_PREFIX?
      # inst_prefix?
      # inst?
      # inst_python disabled
    elif check "autogen.sh" "^autogen.sh$" $t.footprint; then
      # use cfg_autogen
      # use cfg_configure
      # cfg_perl disabled
      snip cfg_hard $script
      # use mk
      snip mk_PREFIX $script
      snip mk_prefix $script
      # inst_destdir?
      # inst_PREFIX?
      # inst_prefix?
      # inst?
      # inst_python disabled
    else
      error "Don't know how to build this package."
      failed=true
    fi
  fi
fi

# installation prefix
if check "Makefile" "^Makefile" $t.footprint; then
  if check "DESTDIR" "\<DESTDIR\>" "$t.src/$srcdir_prefix/Makefile*"; then
    # use inst_destdir
    snip inst_PREFIX $script
    snip inst_prefix $script
    snip inst $script
  else
    snip inst_destdir $script
    if check "PREFIX" "\<PREFIX\>" "$t.src/$srcdir_prefix/Makefile*"; then
      # inst_destdir disabled
      # use inst_PREFIX
      snip inst_prefix $script
      snip inst $script
    else
      snip inst_PREFIX $script
      if check "prefix" "\<prefix\>" "$t.src/$srcdir_prefix/Makefile*"; then
        # inst_destdir disabled
        # inst_PREFIX disabled
        # use inst_prefix
        snip inst $script
      else
        snip inst_prefix $script
        if check "hard coded /usr/local" "/usr/local" "$t.src/$srcdir_prefix/Makefile*"; then
          # inst_destdir disabled
          # inst_PREFIX disabled
          # inst_prefix diabled
          # use inst
          :
        else
          error "Don't know how to install this package (no install-prefix)."
          failed=true
        fi
      fi
    fi
  fi
else
  error "Don't know how to install this package (no Makefile)."
  failed=true
fi

# cflags
if check "CFLAGS" "\<CFLAGS\>" "$t.src/$srcdir_prefix/*"; then
  :
else
  snip cflags $script
fi

# cxxflags
if check "CXXFLAGS" "\<CXXFLAGS\>" "$t.src/$srcdir_prefix/*"; then
  :
else
  snip cxxflags $script
fi

# gconf schemas and scrollkeeper
check "gconf schemas" "\.schemas(|\.in|\.in\.in)$" $t.footprint && schemas=true || schemas=false
check "scrollkeeper" "\.omf$" $t.footprint && omfs=true || omfs=false
#check "mime database" "/mime-info$" "$t.src/$srcdir_prefix/*" && mimes=true || mimes=false
if $schemas || $omfs; then
  if ! grep -sq "^inst()$" $path/doinst.sh; then
    stanza "There's no inst() in your doinst.sh although you need it! I'll add it."
    cat $0 | sed '/^#\!doinst.sh.skel$/,/^#\!doinst.sh.skel$/!d' >>$path/doinst.sh
  fi
# only if not gconf or scrollkeeper
else
  snip config $script
  if [ -f $path/doinst.sh ]; then
    if grep -q "^inst()$" $path/doinst.sh; then
      stanza "There's a inst() in your doinst.sh although you don't need it! I'll remove it."
      sed -i "/^inst()$/,/^}$/d" $path/doinst.sh
    fi
  fi
fi

#check "wrong doc paths" "/share/doc\>" "$t.src/$srcdir_prefix/Makefile*" || snip pt_doc $script
#check "wrong man paths" "/share/man\>" "$t.src/$srcdir_prefix/Makefile*" || snip pt_man $script
## add mime-installation
#mime_inst="usr/bin/update-mime-database usr/share/mime >/dev/null 2>&1"
#if $mime && ! grep -sqx "$mime_inst" $path/doinst.sh; then
#  stanza "Adding mime database intallation to doinst.sh."
#  echo "$mime_str" >>$path/doinst.sh
#elif $mime && grep -sqx "$mime_inst" $path/doinst.sh; then
#  stanza "Remving unneeded mime database intallation from doinst.sh."
#  sed -i "\,^$mime_inst$,d" $path/doinst.sh
#fi

# anyways check old config()
if grep -sq "^config()$" $path/doinst.sh && ! grep -sq "^config .*\.new$" $path/doinst.sh; then
  stanza "There's an old config() in your doinst.sh although you don't need to config
.new-files! I'll remove it."
  sed -i "/^config()$/,/^}$/d" $path/doinst.sh
fi

# if doinst.sh is emtpy remove it
if [ -f $path/doinst.sh ] && ! [ -s $path/doinst.sh ]; then
  stanza "Removing empty doinst.sh."
  rm $path/doinst.sh
fi
[ -f $path/doinst.sh ] || snip doinst $script

# now arch should be known
case $arch in
  noarch)
    sed -i "s,%arch%,$arch," $script
    snip cflags $script
    snip strip $script;;
  *)
    # we know better than the user ;-)
    sed -i "s,%arch%,\${ARCH:-i486}," $script;;
esac

# are there patches?
if [ "`ls $path/*.patch 2>/dev/null`" ]; then
  stanza "There're patches. I'll include them in the SlackBuild, but you should check
them later."
else
  snip patch $script
fi

#if [ -f $path/install.autoport ]; then
#  stanza "Including install-replacement..."
#  sed "
#fi

# clean up
sed -i "/^#/d" $script
sed -i "s, *##[^ ]*,,g" $script
if [ -f $path/doinst.sh ]; then
  sed -i "/^#/d" $path/doinst.sh
  sed -i "s, *##[^ ]*,,g" $path/doinst.sh
fi

# summary
stanza "We're done. Port written in $path."
if [ -f $path/readme.autoport ]; then
  stanza "There's a readme for this port:"
  echo "==========================================="
  more $path/readme.autoport
  echo "==========================================="
fi

# any errors?
$failed && die "There's been an error. Please write SlackBuild by hand."

# portpkg?
if $build_port; then
  ask "* Next step: Call portpkg. Continue? (ctrl-c to quit)"
  portpkg $group/$name
fi

exit 0

#----------------------------------------

#!SlackBuild.skel
VERSION=%version%
#SRCVER=%srcver% ##srcver
ARCH=%arch%
BUILD=%build%

CWD=`pwd`
NAME=`basename $CWD`
PKG=/tmp/package-$NAME
rm -rf $PKG
mkdir -p $PKG/usr

#!cflags
if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
else
  SLKCFLAGS="-O2"
fi
# this seems to be the new style
#CHOST="$ARCH-slackware-linux"
#CFLAGS="-O2 ..."
#CXXFLAGS=$CFLAGS

#!cflags
cd /tmp || exit 1
mkdir -p $NAME-$VERSION ##extra_sdp
cd $NAME-$VERSION ##extra_sdp
#!rpm
rm -rf `basename %tarball% .rpm`.tar.gz
rpm2targz $CWD/%tarball%
tar xzvf `basename %tarball% .rpm`.tar.gz
tar xzvf `basename %tarball% .src.rpm`/$NAME-$VERSION.tar.gz
#!rpm
tar x%tarmode%vf $CWD/%tarball% || exit 1 ##tar
cd %srcdirprefix% || exit 1 ##cd_sdp
cat $CWD/*.patch | patch -p1 --verbose ##patch
chown -R root.root .
#find . -perm %perm644% -exec chmod 644 {} \; ##perms644
#find . -perm %perm755% -exec chmod 755 {} \; ##perms755
#---here begins configuration---
./autogen.sh || exit 1 ##cfg_autogen
#!cfg_configure
CFLAGS="$SLKCFLAGS" \ ##cflags
CXXFLAGS="$SLKCFLAGS" \ ##cxxflags
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --program-prefix="" \
  --disable-static \
  $ARCH-slackware-linux || exit 1
#!cfg_configure
perl Makefile.PL || exit 1 ##cfg_perl
sed -i "s,/usr/local/etc,$PKG/etc,g" Makefile ##cfg_hard
sed -i "s,/usr/local/var,$PKG/var,g" Makefile ##cfg_hard
sed -i "s,/usr/local,$PKG/usr,g" Makefile ##cfg_hard
#sed -i "s,/share/doc,/doc,g" Makefile ##pt_doc
#sed -i "s,/share/man,/man,g" Makefile ##pt_man
#---here begins making---
make || exit 1 ##mk
make PREFIX=/usr || exit 1 ##mk_PREFIX
make prefix=/usr || exit 1 ##mk_prefix
#---here begins installation---
make install DESTDIR=$PKG || exit 1 ##inst_destdir
make install PREFIX=$PKG/usr || exit 1 ##inst_PREFIX
make install prefix=$PKG/usr || exit 1 ##inst_prefix
make install || exit 1 ##inst
python setup.py build install --root=$PKG || exit 1 ##inst_python
#---installation done---
chown -R root.bin $PKG{,/usr}/{,s}bin 2>/dev/null
#!strip
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2>/dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2>/dev/null
)
#!strip
gzip -9 $PKG/usr/man/man?/*
#!docs
mkdir -p $PKG/usr/doc/$NAME-$VERSION
cp -a \
  %docs% \
  $PKG/usr/doc/$NAME-$VERSION
#!docs
mkdir -p $PKG/install
cat $CWD/slack-desc >$PKG/install/slack-desc
cat $CWD/doinst.sh >$PKG/install/doinst.sh ##doinst
#!config
find $PKG/ -name "*.schemas" -o -name "*.omf" \
| sed -r "s,^$PKG/(.*)$,inst \1," >>$PKG/install/doinst.sh
#!config

cd $PKG || exit 1
makepkg -p -l y -c n /tmp/$NAME-$VERSION-$ARCH-$BUILD.tgz
#!SlackBuild.skel

#!doinst.sh.skel
inst()
{
  case $1 in
  *.omf)
    scrollkeeper-update -p var/lib/scrollkeeper -o $1 >/dev/null 2>&1;;
  *.schemas)
    GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source` \
    gconftool-2 --makefile-install-rule $1 >/dev/null 2>&1;;
  esac
}
#!doinst.sh.skel
