#!/bin/sh -u
#
# Autoport -- An Automatic SlackBuild Generator
# Copyright (C) 2004, 2005 Thomas Pfaff <topf@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

source `which portpkg` || exit 1
t=`mktemp -d`

# hierarchy of sections
hier()
{
  local l s t
  l=""
  sed -n "/^#:SlackBuild.skel$/,/^#:SlackBuild.skel$/p" $0 \
  | sed "/^[^#]/s, ##\([^ ]*\),\n#:\1\n#:\1," \
  | grep -o "^#:[^ ]*" \
  | while read s; do
    t=${s#\#:}
    if echo "$l" | grep -sq " $t$"; then
      l=${l% $t}
    else
      l="$l $t"
    fi
    echo $l
  done
}

# test a file for a pattern
check() # regex files
{
  local pattern=$1
  shift
  if egrep -qe "$pattern" "$@" 2>/dev/null; then
    row "Checking for $pattern... yes"
    return 0
  else
    row "Checking for $pattern... no"
    return 1
  fi
}

# cut a marked block from a file
snip() # tag file
{
  local tag=$1 file=$2
  # the #:tag ... #:tag method
  sed -i "/^#:$tag$/,/^#:$tag$/d" $file
  # the xxx ##tag method
  sed -i "/ *##$tag$/d" $file
}

# snip() all sub-sections but one
sel() # tag sub file
{
  local tag=$1 sub=$2 file=$3
  local subs i
  # find all subsections of $tag
  subs=`hier | grep -o " $tag .*" | cut -s -d " " -f 3 | sort -u`
  # snip() all but $sub
  for i in $subs; do
    [ "$i" = "$sub" ] || snip $i $file
  done
}

# convert the value of $version to "$VERSION"
encode() # text >text
{
  local ver enc
  # prepare dots ("\.")
  ver=`echo $version | sed "s,\.,\.,g"`
  enc=`echo "$@" | sed "s,$ver,\\$VERSION,g"`
  # try ${NAME} and ${VERSION} if it fails
  [ "`decode "$enc"`" != "$@" ] && enc=`echo "$@" | sed "s,$ver,\\${VERSION},g"`
  echo "$enc"
}

# convert "$VERSION" to its value
decode() # text >text
{
  local NAME VERSION
  NAME=$name
  VERSION=$version
  eval "echo \"$@\""
}

# add a shell instruction to a shell script file
add_inst() # rel/path/to/command_to_add file
{
  local command=$1 file=$2
  local cmd_name file_name
  cmd_name=`basename $(echo $command | cut -d " " -f 1)`
  file_name=`basename $file`
  # check for old style ("command bla")
  if grep -sq "$cmd_name" $file && ! grep -sq "^if .*/$cmd_name" $file; then
    # one-liner: remove it
    sed -i "\,$cmd_name,d" $file
  fi
  # remove to make sure, it's correct
  [ -f $file ] && sed -i "/^if .*\/$cmd_name/,/^fi$/d" $file
  # check for new style ("if [ -x command ]; then...")
  if ! grep -sq "$cmd_name" $file; then
    row "Adding $cmd_name to $file_name"
    echo "if [ -x `echo $command | cut -d " " -f 1` ]; then" >>$file
    echo "  $command >/dev/null 2>&1" >>$file
    echo "fi" >>$file
  fi
}

# remove a shell instruction from a shell script file
remove_inst() # command_to_remove file
{
  local command=$1 file=$2
  local cmd_name file_name
  cmd_name=`basename $command`
  file_name=`basename $file`
  if grep -sq "$cmd_name" $file; then
    row "Removing unneeded $cmd_name from $file_name"
    # check for new style ("if [ -x command ]; then...")
    if grep -sq "^if .*/$cmd_name" $file; then
      sed -i "/^if .*\/$cmd_name/,/^fi$/d" $file
    else
      # old style ("command bla")
      sed -i "\,$cmd_name,d" $file
    fi
  fi
}

usage()
{
  stanza "Usage: autoport [options] [source url]

Options:
  -a             Run non-interactive (use defaults)
  -f             Force to re-autobuild a port when non-interactve
  -n name        Preset name of port
  -v version     Preset version of port
  -g group       Preset group of port
  -u port        (Re-)Use port (use this option first)
  -b             Execute portpkg after port generation
  -d             Try to find up-to-date version
  source url     Preset URL of source code (if not found via -u)
                 (Use cpan://file::mimeinfo to search for Perl modules
                   or gnome://tarball-1.0.tar.bz2 to shorten GNOME urls)"
  exit 0
}

# find recent version
up2date() # >version
{
  local s reg up2date ver
  [ "$sources" ] || die "-d must be set after -u!"
  warn "Guessing recent version (this is alpha code)!"
  s=`decode "$sources" | head -n 1`
  reg=`echo "[^ ]*/$(basename $s)" | sed "s,$version,\\\\\([0-9].*\\\\\),g"`
  up2date=`grep "^# UP2DATE:" $script | cut -d " " -f 3-`
  up2date=${up2date:-`dirname $s`}
  debug "up2date(): trying to find $reg on $up2date"
  ver=`lynx -dump $up2date | grep -o "$reg" | sed "s,^$reg$,\1,g" \
| tr . " " | sort -nrk 1 -k 2 -k 3 -k 4 -k 5 -k 6 | tr " " .`
  if ! [ "$ver" ]; then
    die "Couldn't find anything on $up2date!"
  else
    echo "Found versions (most recent first): "$ver | fmt -t >&2
    echo "$ver" | head -n 1
  fi
}

# query search.cpan.org
search_cpan() # query >url
{
  local query page
  has_prog lynx || die
  query=`echo $@ | sed "s,^cpan://,,;s,::,-,g;s,/,-,g"`
  page=`lynx -dump "http://search.cpan.org/search?query=$query&mode=module" \
| grep -i "http://.*/$query-[0-9].*/$" \
| grep -o "http://.*" | sort -u | head -n 1`
  lynx -dump $page \
| egrep -ie "http://.*/$query-[0-9].*\.(tgz|tar\.(gz|bz2))$" \
| grep -o "http://.*" | sort -u | head -n 1
}

init_autoport()
{
  # first: do we have tags?
  [ "$MY_TAG" ] || die "No tag set. Please run 'pp-config'!"

  force=false
  build_pkg=false
  failed=false
  sources=""
  name=""
  version=""
  group=local
  arch=$ARCH
  build=""
}

# parse options
parse_options()
{
  shorts="afv:g:n:u:bhdz"
  args=`getopt -qo $shorts -- "$@"`
  [ "$?" = "0" ] || die "Bad Arguments! Try: autoport -h"
  eval set -- "$args"
  while [ "$*" ]; do
    case $1 in
      -z)
	DEBUG=true;;
      -a)
        INTERACTIVE=false;;
      -f)
        force=true;;
      -v)
        version=$2
        shift;;
      -g)
        group=$2 #`echo $2 | any2dir`
        shift;;
      -n)
        name=$2
        shift;;
      -u)
#        get_info $2 || die
	get_info `explicit $2` || die
	case $package in *[0-9]$MY_TAG) ;; *)
	  warn "You're about to overwrite a port that is not yours!";;
	esac
        # use abstract url
        sources=`encode "$sources"`
        arch=`echo $package | rev | cut -d - -f 2 | rev`
        shift;;
      -b)
        build_pkg=true;;
      -d)
	version=`up2date` || die;;
      -h)
        usage;;
      cpan://*)
        sources=`search_cpan $@`;;
      gnome://*)
       tarball=${1#*://}
       name=`echo $tarball | rev | cut -d - -f 2- | rev`
       major_minor=`echo $tarball | rev | cut -d - -f 1 | rev | cut -d . -f 1-2`
       sources=http://ftp.gnome.org/pub/gnome/sources/$name/$major_minor/$tarball;;
      *://*)
        sources=$1;;
    esac
    shift
  done
}

set_info()
{
$INTERACTIVE && stanza "Autoport -- An Automatic SlackBuild Generator
Copyright (C) 2004, 2005 Thomas Pfaff <topf at users dot berlios dot de>
Autoport comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.

Autoport is quite experimental. A source code URL given, it will download and
unpack the code and searche for different keywords to adjust a suitable
SlackBuild script. If autoport doesn't work as expected, please mail at:
<topf at users dot berlios dot de>"

#[ "$sources" ] || die "No source url specified! Try: autoport --help"
#[ "$group" ] || group=local

pause "* First step: Collect information. Continue? (ctrl-c to quit)"

# sources
s=`pause "Source file URL [$sources]:"`
sources="${s:-$sources}"
[ "$sources" ] || die "Nothing entered. Eh? I can't help you this way!"
sources=`echo "$sources" | sed -e "s,://prdownloads\.,://dl.," -e "s,\?download$,,"`
# we can only handle _one_ source file
src=`echo "$sources" | head -n 1`
# name: guess it, if we haven't yet it
file=`basename $(decode $src)`
raw_name=`echo $file | rev | cut -d - -f 2- | rev`
[ "$name" ] || name=`echo $raw_name | tr "A-Z" "a-z"`
s=`pause "Name [$name]:"`
name=${s:-$name}
# group
s=`pause "Group [$group]:"`
group=${s:-$group}
# version
if ! [ "$version" ]; then
  # version: should be always guessed
  version=`echo $file | rev | cut -d - -f 1 | rev`
  version=`basename $version .tar.gz`
  version=`basename $version .tar.bz2`
  version=`basename $version .tgz`
fi
s=`pause "Version [$version]:"`
version=${s:-$version}
srcver=$version
# "-" is not allowed in $version, change it to "_"
version=`echo $version | tr - _`
# correct GNOME urls when updating an existing build script
if [ "$script" ]; then
  sver=`echo $version | cut -d . -f 1-2`
  case `decode $src` in
    *.gnome.org/pub/*/sources/$raw_name/$sver/$raw_name-$version.tar.*)
      ;; # good
    *.gnome.org/pub/*/sources/$raw_name/*/$raw_name-$version.tar.*)
      # wrong url
      wrong_sver=`echo "$src" | rev | cut -d / -f 2 | rev`
      src=`echo "$src" | sed "s,/$wrong_sver/,/$sver/,g"`
      sources=`echo "$sources" | sed "s,/$wrong_sver/,/$sver/,g"`;;
  esac
fi
# arch
s=`pause "Arch [$arch]:"`
arch=${s:-$arch}
# build: check if we need to increase it
n=1
gpkg=`ls_loc | any2gany | grep "^$group/$name-$version-$arch-[0-9]*$MY_TAG$" | head -n 1`
if [ $gpkg ]; then
  $INTERACTIVE && stanza "There is already $gpkg."
  # find it
  while [ "$group/$name-$version-$arch-$n$MY_TAG" != $gpkg ]; do
    ((n++))
    [ "$n" = "1000" ] && die "Strange: Cannot find build number!"
  done
  # now that we found it, we can find a bigger number too!
  ((n++))
fi
s=`pause "Build [$n$MY_TAG]:"`
build=${s:-$n$MY_TAG}
# desc
if [ "$description" ]; then
  desc1=`echo "$description" | sed "s,^$name:[ ]*,," | head -n 1`
  desc2=`echo "$description" | sed "s,^$name:[ ]*,," | sed "1,2d"`
else
  desc1=$raw_name
  desc2=""
fi
s=`pause "Description (1-liner) [$desc1]:"`
desc1=${s:-$desc1}
if $INTERACTIVE; then
  stanza "Description (details) (Write or paste and finish with a single '.')"
  echo "[$desc2]"
  s=""
  l=""
  while [ "$l" != "." ]; do
    read l
    s="$s
$l"
  done
  s=`echo "$s" | sed -e "1d" -e "/^\.$/d"`
fi
desc2=${s:-$desc2}
# combine $desc1 and $desc2
len=${#name}
desc=`{ \
echo "$name: $desc1"
echo "$name:"
echo "$desc2" | fmt -u -w $((75-len)) | sed "s,^,$name: ,"
for i in 1 2 3 4 5 6 7 8 9; do
  echo "$name:"
done; } | head -n 11`

if [ "$group" != "local" ] && [ "$script" ]; then
  path=`dirname $script`
else
  path=$PRT_DIR/$group/$name
  script=$path/SlackBuild
fi

if $INTERACTIVE; then
  echo
  echo "Creating now a port with this information:"
  echo
  echo "PACKAGE NAME:  $name-$version-$arch-$build"
  echo "SCRIPT LOCATION:  $script"
  echo "SOURCE LOCATION:  $sources" | fmt -u
  echo "PACKAGE DESCRIPTION:"
  echo "$desc"
fi

pause "Last chance to quit. Port scripts will now be written.
* Next step: Downloading and checking source code. Continue? (ctrl-c to quit)"

# now we should redecode the actual source name
sources=`decode "$sources"`
src=`echo "$sources" | head -n 1`
file=`basename $(decode $src)`

if [ -f $path/stop.autoport ]; then
  stanza "There's a warning not to autoport this source code:"
  echo "==========================================="
  more $path/stop.autoport
  echo "==========================================="
  die
fi
if [ -d $path ]; then
  pause "* This port ($path) already exists. Really go on? (ctrl-c to quit)"
  # quit if not -f in non-interactive mode
  if ! $INTERACTIVE && ! $force && \
  [ "`grep "^VERSION=" $script | cut -d = -f 2-`" = "$version" ]; then
    error "There's already a build script for that version. Skipping.
(Use -f to force a re-autoport!)"
    exit 0
  fi
  cp $script $script.new
  old_script=$script
  script=$script.new
fi
}

auto_port()
{
stanza "Autoporting $group/$name-$version-$arch-$build:"
mkdir -p $path
touch $script

# check for fixes in the script (style: #+post-config-fix)
#for i in $sections; do
grep -o "^#+.*-fix$" $script | cut -c 3- | sort -u | while read s; do
  row "Extracting inlined $s"
  sed -n "/^#+$s$/,/^#+$s$/p" $script >$path/$s.autoport
  sed -i "/^#+$s$/,/^#+$s$/d" $script
#  # ...and old-style (post-config-fix.autoport) files
#  if [ -f $path/$i-fix.autoport ]; then
#    echo "#+$i-fix" >$t/$i-fix
#    cat $path/$i-fix.autoport >>$t/$i-fix
#    echo "#+$i-fix" >>$t/$i-fix
#    # obsolete
#    rm $path/$i-fix.autoport
#  fi
#  [ -s $t/$i-fix ] && row "Found $i-fix" || rm $t/$i-fix
done
# (...and style #[+-=]section)
grep -o "^#+.*$" $script | cut -c 3- | sort -u | while read s; do
  row "Extracting inlined (new-style) post-$s"
  sed -n "/^#+$s$/,/^#+$s$/p" $script >$path/post-$s-fix.autoport
  sed -i "/^#+$s$/,/^#+$s$/d" $script
done
grep -o "^#=.*$" $script | cut -c 3- | sort -u | while read s; do
  row "Extracting inlined (new-style) $s"
  sed -n "/^#=$s$/,/^#=$s$/p" $script >$path/$s-fix.autoport
  sed -i "/^#=$s$/,/^#=$s$/d" $script
done
grep -o "^#-.*$" $script | cut -c 3- | sort -u | while read s; do
  row "Extracting inlined (new-style) $s"
  >$path/$s-fix.autoport
  sed -i "/^#-$s$/d" $script
done
# remove #[+-=] lines form .autoport files
sed -i "/^#[+-=]/d" $path/*.autoport 2>/dev/null

# downlaod source file
#file=`basename $src`
if [ -f $SRC_DIR/$file ]; then
  row "$file found in $SRC_DIR/"
else
  row "Downloading $file"
#  VERBOSE=true
#  output=/dev/stdout
  get `decode $src` $SRC_DIR/$file || die
fi

# write skeletons
#failed=false
sed '/^#:SlackBuild.skel$/,/^#:SlackBuild.skel$/!d' $0 >$script
# copy comment header from old script
case $script in *.new)
  sed -n "0,/^[^#]/p" $old_script | sed "\$d;/^$/d;s,\&,\&,g" >$t/script.head
  sed -i "/^#\!\/bin\/sh/d" $script
  sed -i "1r$t/script.head" $script
#  cat $t/script.head $script >$t/script.new
#  cat $t/script.new >$script
esac
#encode "$sources" >$path/sources
echo "$desc" >$path/slack-desc
sed -i "s,%version%,$version," $script
sed -i "s,%build%,$build," $script

# format
#echo -n "  --> Checking format... "
mkdir -p $t/src
case $file in
  *.tar.bz2)
    format=tarbz2
    tar xjf $SRC_DIR/$file -C $t/src/ || die "Error while unpacking, maybe wrong URL?"
    tar tjf $SRC_DIR/$file >$t/footprint
#    echo ".tar.bz2"
    row "Checking format... .tar.bz2"
    sed -i "s,%tarmode%,j," $script
    sel unpack tar $script;;
  *tar.gz|*.tgz) # yes, there was one file called "xxxtar.gz"!
    format=targz
    tar xzf $SRC_DIR/$file -C $t/src/ || die "Error while unpacking, maybe wrong URL?"
    tar tzf $SRC_DIR/$file >$t/footprint
#    echo ".tar.gz"
    row "Checking format... .tar.gz"
    sed -i "s,%tarmode%,z," $script
    sel unpack tar $script;;
  *.src.rpm)
    format=srpm
    ( cd $t/
      rm -rf `basename $file .rpm`.tar.gz
      cp $SRC_DIR/$file .
      rpm2targz $file
      tar xzf `basename $file .rpm`.tar.gz
      tar xzf `basename $file .src.rpm`/$name-$version.tar.gz -C $t/src/
      tar tzf `basename $file .src.rpm`/$name-$version.tar.gz >$t/footprint ) \
    || die "Error while unpacking, maybe wrong URL?"
#    echo ".src.rpm"
    row "Checking format... .src.rpm"
    sel unpack rpm $script;;
  *)
    if [ -d $SRC_DIR/$file ]; then
      row "Checking format... directory"
      format=dir
      cp -a $SRC_DIR/$file $t/src/
      ( cd $t/src; find * ) >$t/footprint
      sel unpack dir $script
    else
#    echo "unknown!"
      row "Checking format... unknown!"
      die "Unknown source format, please write SlackBuild by hand!"
    fi;;
esac
tarball=`encode "$file"`
sed -i "s,%tarball%,$tarball," $script

# source-prefix
#echo -n "  --> Checking source-prefix... "
srcdir_prefix=`cat $t/footprint | sed "s,^\./,,;s,/.*,," | sort -u`
if [ `echo "$srcdir_prefix" | wc -l` = 1 ] && [ "$srcdir_prefix" != "." ]; then
#  echo "$srcdir_prefix/"
  row "Checking source-prefix... $srcdir_prefix/"
  if [ "$format" = "srpm" ]; then
#    snip cd_sdp $script
    :
  else
    snip extra_sdp $script
  fi
  srcdir_prefix_out=`encode "$srcdir_prefix"`
  sed -i "s,%srcdirprefix%,$srcdir_prefix_out," $script
else
#  echo "no prefix"
  row "Checking source-prefix... no prefix"
  snip cd_sdp $script
  srcdir_prefix="."
  mkdir $t/src/$name-$version
  mv $t/src/* $t/src/$name-$version
  rm -rf $TMP/$name-$version
fi

# now, move it to $TMP as user expects it to be
[ "`whoami`" = "root" ] && chown nobody.nogroup -R $t/src/*
rm -rf $TMP/$srcdir_prefix
mv $t/src/* $TMP/

# snip srcdir_prefixed in footprint
sed -i "s,^\./,," $t/footprint
sed -i "s,^$srcdir_prefix/,," $t/footprint

# insert fixes
#for i in $sections; do
for i in `ls $path/*-fix.autoport 2>/dev/null`; do
  i=`basename $i -fix.autoport`
#  if [ -f $t/$i-fix ]; then
  if egrep -sq "^#%(|post-)$i-fix%$" $script; then
    row "Fixing $i"
    # if it's not a post-xxx, then it's meant to replace the section
    case $i in
      post-*)
        sed -i "\,^#%$i-fix%$,r$path/$i-fix.autoport" $script;;
      *)
        sed -i "\,^#%post-$i-fix%$,r$path/$i-fix.autoport" $script
        snip $i $script;;
    esac
  else
    die "Couldn't locate $i fix. Maybe you're using the wrong version of autoport?"
  fi
done

# include patches
if [ "`ls $path/*.patch 2>/dev/null`" ]; then
  row "Including patches (Please check them later!)"
else
  snip patch $script
fi

# docs
if grep -sq "#:doc" $script; then
  docs=`egrep "^ABOUT$|^ABOUT-NLS$|^ANNOUNCE$|^AUTHORS$|^CONFIGURATION$|^CHANGES$\
  |^COPYING$|^COPYRIGHT$|^CREDITS$|^ChangeLog$|^Changelog$|^CHANGELOG$\
  |^CONTRIBUTORS$|FAQ|^FEATURES$|^FILES$|^HACKING$|^History$|^HISTORY$|^INSTALL\
  |^LICENSE$|^LSM$|^MANIFEST$|^NEWS$|README|Readme|^SITES$|RELEASE|^RELNOTES$\
  |^THANKS$|^TIPS$|^TODO$|^VERSION$|^CONFIGURATION|^GPL$|^License$|^Doc$|^doc$\
  |^Docs|^docs|^Roadmap$|^ROADMAP$|BUGS|^index.ht|INDEX" $t/footprint \
  | grep -v / | sort -u | xargs`
  if [ "$docs" ]; then
    row "Checking docs... $docs."
    sed -i "s,%docs%,$docs," $script
  else
    row "Checking docs... none."
    snip docs $script
  fi
fi

# configure/make
if grep -sqe "#:config" -e "#:make" $script; then
  if check "^Makefile.PL$" $t/footprint; then
    # Makefile.PL is first choice
    sel config perl $script
    arch=noarch
  elif check "^configure$" $t/footprint; then
    sel config configure $script
    if check "KDEDIRS" $TMP/$srcdir_prefix/configure; then
      sed -i "s,%prefix%,opt/kde,g" $script
      snip ac_sysconfdir $script
      snip ac_localstatedir $script
    else
      check "--prefix" $TMP/$srcdir_prefix/configure || snip ac_prefix $script
      check "--sysconfdir" $TMP/$srcdir_prefix/configure || snip ac_sysconfdir $script
      check "--localstatedir" $TMP/$srcdir_prefix/configure || snip ac_localstatedir $script
    fi
    check "--program-prefix" $TMP/$srcdir_prefix/configure || snip ac_program_prefix $script
    check "--disable-static" $TMP/$srcdir_prefix/configure || snip ac_disable_static $script
    check "--disable-scrollkeeper" $TMP/$srcdir_prefix/configure || snip ac_disable_scrollkeeper $script
    check "--disable-update-mimedb" $TMP/$srcdir_prefix/configure || snip ac_disable_update_mimedb $script
    snip cfg_autogen $script
    snip pkgconfig $script
    # pkgconfig
    if check "PKG_CONFIG" $TMP/$srcdir_prefix/configure; then
      # find package strings in configure
      pc_files=`grep -oe "--exists.*" $TMP/$srcdir_prefix/configure \
| sed "s,--[^ ]*,,g;s,\\\\\,,g" | grep -o "[a-z$][a-z0-9A-Z$._+-]*" | grep -vx then | sort -u`
      # evaluate any variables
      pc_files=`\
set +u
eval $(grep "^[A-Z0-9_]*=[0-9.]*$" $TMP/$srcdir_prefix/configure)
eval "echo \"$pc_files\"" | grep -o "[a-z][a-z0-9A-Z._+-]*"`
      for f in $pc_files; do
	req=`( cd $ADM_DIR/packages; grep -l /$f\.pc$ * | pkg2name )`
	if [ "$req" ]; then
          row "Checking for $f.pc... found in "$req
#          echo "$req" >>$path/requires
#          sort -uo $path/requires $path/requires
	else
          row "Checking for $f.pc... not found, could be an optional dependency"
    	  warn "Consider installing package $f and run autoport again!"
    	fi
      done
    fi
  elif check "^autogen.sh$" $t/footprint; then
    sel config configure $script
  elif check "^setup\.py$" $t/footprint; then
    snip config $script
    snip mk $script
    arch=noarch
  else
    error "Don't know how to build this package."
    snip config $script
    failed=true
  fi
fi

# set the prefix to /usr if this is still undefined
sed -i "s,%prefix%,usr,g" $script
sed -i "s,%etc%,etc,g" $script

# installation prefix
if grep -sq "#:install" $script; then
  if check "^Makefile" $t/footprint; then
    sel install mk_inst $script
    check "CSC" $TMP/$srcdir_prefix/Makefile* || snip mono $script
    # Makefile.PL will always use DESTDIR
    if grep -sq "^Makefile.PL$" $t/footprint \
    || check "DESTDIR" $TMP/$srcdir_prefix/Makefile*; then
      sel mk_inst_root inst_destdir $script
    elif check "PREFIX" $TMP/$srcdir_prefix/Makefile*; then
      sel mk_inst_root inst_PREFIX $script
    elif check "prefix" $TMP/$srcdir_prefix/Makefile*; then
      sel mk_inst_root inst_prefix $script
    else
      error "Don't know how to install this package (no install-prefix)."
      snip mk_inst_root $script
      failed=true
    fi
  # as always, check setup.py at last! use configure if possible!
  elif check "^setup\.py$" $t/footprint; then
    sel install python $script
  else
    error "Don't know how to install this package (no Makefile)."
    snip install $script
    failed=true
  fi
fi

# cflags
if ! check "CFLAGS" $TMP/$srcdir_prefix/*; then
  snip cflags $script
fi

# cxxflags
use_cxxflags=true
if ! check "CXXFLAGS" $TMP/$srcdir_prefix/*; then
  snip cxxflags $script
fi

# slkcflags
grep -sqe "CFLAGS" -e "CXXFLAGS" $script || snip slkcflags $script

# gconf schemas
if check "\.schemas(|\.in|\.in\.in)$" $t/footprint; then
#  requires=`( echo "$requires"; echo "gconf" ) | sort -u`
  if ! grep -sq "^gconf()" $path/doinst.sh; then
    row "Adding gconf() to doinst.sh"
    sed '/^#:doinst.sh_gconf$/,/^#:doinst.sh_gconf$/!d' $0 >>$path/doinst.sh
  fi
else
  if grep -sq "^gconf()" $path/doinst.sh; then
    row "Removing unneeded gconf() from doinst.sh"
    sed -i "/^gconf()/,/^}$/d" $path/doinst.sh
  fi
  snip schemas $script
fi

# icon-cache
if check "^index.theme(|\.in|\.in\.in)$" $t/footprint; then
  if ! grep -sq "usr/bin/gtk-update-icon-cache " $path/doinst.sh; then
    row "Adding gtk-update-icon-cache to doinst.sh"
    sed '/^#:doinst.sh_icons$/,/^#:doinst.sh_icons$/!d' $0 >>$path/doinst.sh
  fi
else
  snip icons $script
fi

# old inst()
if grep -sq "^inst()" $path/doinst.sh; then
  row "Removing old inst() from doinst.sh"
  sed -i "/^inst()/,/^}$/d" $path/doinst.sh
fi

# scrollkeeper
if check "\.omf(|\.in)$" $t/footprint; then
  add_inst "usr/bin/scrollkeeper-update -p var/lib/scrollkeeper" $path/doinst.sh
else
  remove_inst "scrollkeeper-update" $path/doinst.sh
  snip scrollkeeper $script
fi

# mime-update
if check "\.(keys|mime)(|\.in|\.in\.in)$" $t/footprint \
|| check "SHARED_MIME_INFO" $TMP/$srcdir_prefix/configure; then
  add_inst "usr/bin/update-mime-database usr/share/mime" $path/doinst.sh
else
  remove_inst "update-mime-database" $path/doinst.sh
  snip mime-database $script
fi

# desktop-database
if check "\.desktop(|\.in|\.in\.in)$" $t/footprint; then
  add_inst "usr/bin/update-desktop-database" $path/doinst.sh
else
  #remove_inst "update-desktop-database" $path/doinst.sh
  grep -sq "update-desktop-database" $path/doinst.sh \
  && warn "update-desktop-database seems removed. Please check!"
fi

## wrong hard-coded doc paths
#if ! check "/share/doc" $TMP/$srcdir_prefix/{,*/}Makefile*; then
#  snip fix_mk_doc $script
#fi

## wrong hard-coded man paths (force on Makefile.PL)
#if ! grep -sq "^Makefile.PL$" $t/footprint \
#&& ! check "/share/man" $TMP/$srcdir_prefix/{,*/}Makefile*; then
#  snip fix_mk_man $script
#fi

# config() subroutine?
#if grep -sq "\.new" $script; then
if grep -sq "^[^#].*[^*]\.new" $script; then
  if ! grep -sq "^config()" $path/doinst.sh; then
    row "Adding config() to doinst.sh"
    sed '/^#:doinst.sh_config$/,/^#:doinst.sh_config$/!d' $0 >>$path/doinst.sh
  fi
else
  snip etc_config $script
  if grep -sq "^config()" $path/doinst.sh; then
    row "Removing unneeded config() from doinst.sh"
    sed -i "/^config()/,/^}$/d" $path/doinst.sh
  fi
fi

# if doinst.sh is emtpy, remove it
if [ -f $path/doinst.sh ] && ! [ -s $path/doinst.sh ]; then
  row "Removing empty doinst.sh"
  rm $path/doinst.sh
fi

# doinst.sh at all?
[ -f $path/doinst.sh ] || snip doinst $script

# now arch should be known
case $arch in
  noarch)
    sed -i "s,%arch%,$arch," $script
    snip cflags $script
    snip slkcflags $script
    snip strip $script;;
  *)
    # we know better than the user ;-)
    sed -i "s,%arch%,\${ARCH:-i486}," $script;;
esac

# clean up
sed -i "/^#[:#%]/d" $script
sed -i "s, *##[^ ]*,,g" $script
if [ -f $path/doinst.sh ]; then
  sed -i "/^#/d" $path/doinst.sh
  sed -i "s, *##[^ ]*,,g" $path/doinst.sh
fi

# summary
if [ -f $path/readme.autoport ]; then
  stanza "There's a readme for this port:"
  echo "==========================================="
  more $path/readme.autoport
  echo "==========================================="
fi

update_header

# any errors?
$failed && die "There's been an error. Please write SlackBuild by hand."

# rename the new script
case $script in *.new)
  script=${script%.new}
  mv $script.new $script
esac

# add new package to the cache
#echo $PRT_DIR/$group/$package >>$CACHE/loc
#echo $script >>$CACHE/slk
rm $CACHE/loc
rm $CACHE/slk
}

# portpkg?
run_portpkg()
{
if $build_pkg; then
  pause "* Next step: Call portpkg. Continue? (ctrl-c to quit)"
  # ok, if this port is new, it has no dependencies, if it's rewritten,
  # let's assume, the user wants to rebuild only this port
  cd $PRT_DIR/$group/$name
#  portpkg -b #-q $group/$name
  REBUILD=true
  REINSTALL=true
  do_add
fi
}

init_autoport
parse_options "$@"
set_info
auto_port
run_portpkg
exit 0

#----------------------------------------

#:SlackBuild.skel
#!/bin/sh

#:head
TMP=${TMP:-/tmp}
CWD=`pwd`
NAME=`basename $CWD`
PKG=$TMP/package-$NAME

#:head
#%post-head-fix%
#:vars
VERSION=%version%
##SRCVER=%srcver% ##srcver
ARCH=%arch%
BUILD=%build%

#:vars
#%post-vars-fix%
#:slkcflags
if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

#:slkcflags
#%post-slkcflags-fix%
#:prepare
rm -rf $PKG
mkdir -p $PKG/%prefix%
cd $TMP
rm -rf $NAME-$VERSION ##extra_sdp
mkdir -p $NAME-$VERSION ##extra_sdp
cd $NAME-$VERSION ##extra_sdp
##rm -rf %srcdirprefix% ##cd_sdp
#:unpack
rpm2targz $CWD/%tarball% ##rpm
tar xzvf `basename %tarball% .rpm`.tar.gz ##rpm
tar xzvf $NAME-$VERSION.tar.gz ##rpm
tar x%tarmode%vf $CWD/%tarball% ##tar
cp -r $CWD/%tarball% . || true ##dir
#:unpack
cd %srcdirprefix% ##cd_sdp
cat $CWD/*.patch | patch -p1 --verbose ##patch
chown -R root.root .
##find . -perm %perm644% -exec chmod 644 {} \; ##perms644
##find . -perm %perm755% -exec chmod 755 {} \; ##perms755
#:prepare
#%post-prepare-fix%
#:config
#:configure
./autogen.sh ##cfg_autogen
CFLAGS="$SLKCFLAGS" \ ##cflags
CXXFLAGS="$SLKCFLAGS" \ ##cxxflags
PKG_CONFIG_PATH=/%prefix%/lib/pkgconfig \ ##pkgconfig
./configure \
#:configure-opts
  --prefix=/%prefix% \ ##ac_prefix
  --sysconfdir=/%etc% \ ##ac_sysconfdir
  --localstatedir=/var/lib \ ##ac_localstatedir
  --program-prefix="" \ ##ac_program_prefix
  --disable-static \ ##ac_disable_static
  --disable-scrollkeeper \ ##ac_disable_scrollkeeper
  --disable-update-mimedb \ ##ac_disable_update_mimedb
#:configure-opts
#%post-configure-opts-fix%
  $ARCH-slackware-linux
#:configure
#%post-configure-fix%
perl Makefile.PL ##perl
##find -name Makefile | xargs sed -i "s,/usr/local/etc,$PKG/etc,g" ##cfg_mk_hard
##find -name Makefile | xargs sed -i "s,/usr/local/var,$PKG/var,g" ##cfg_mk_hard
##find -name Makefile | xargs sed -i "s,/usr/local,$PKG/usr,g" ##cfg_mk_hard
##find -name Makefile | xargs sed -i "s,/share/doc,/doc,g" ##fix_mk_doc
##find -name Makefile | xargs sed -i "s,/share/man,/man,g" ##fix_mk_man
#:config
#%post-config-fix%
#:install
#:mk_inst
MONO_SHARED_DIR=$TMP \ ##mono
make ##mk
##make PREFIX=/usr ##mk_PREFIX
##make prefix=/usr ##mk_prefix
GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1 \ ##schemas
MONO_SHARED_DIR=$TMP \ ##mono
#:mk_inst_root
make install DESTDIR=$PKG ##inst_destdir
make install PREFIX=$PKG/%prefix% ##inst_PREFIX
make install prefix=$PKG/%prefix% ##inst_prefix
#:mk_inst_root
#:mk_inst
##make install ##inst
python setup.py build install --root=$PKG ##python
#:install
#%post-install-fix%
#:refine
##mkdir -p $PKG/etc/gconf/gconf.xml.defaults ##schemas
##GCONF_CONFIG_SOURCE="xml::$PKG/etc/gconf/gconf.xml.defaults" \ ##schemas
##gconftool-2 --makefile-install-rule $PKG/etc/gconf/schemas/*.schemas ##schemas
##find $PKG/etc/gconf/ -name "%gconf.xml" | xargs -r rm ##schemas
find $PKG/ -name perllocal.pod | xargs -r rm -fv ##perl
rm -rf $PKG/var/lib/scrollkeeper ##scrollkeeper
rm -fv $PKG/%prefix%/info/dir
rm -fv $PKG/%prefix%/share/mime/* || true ##mime-database
find $PKG/ -name mimeinfo.cache | xargs -r rm -fv ##mime-database
##find $PKG/ -type d -name bin -o -name sbin | xargs -r chown -R root.bin
#:refine
#%post-refine-fix%
#:strip
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -d : -f 1 | xargs -r strip --strip-unneeded
  find . | xargs file | grep "shared object" | grep ELF | cut -d : -f 1 | xargs -r strip --strip-unneeded
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-debug
)
#:strip
#%post-strip-fix%
#:doc
mv $PKG/usr/share/{man,doc} $PKG/usr/ || true
mkdir -p $PKG/usr/doc/$NAME-$VERSION
#:docfiles
#:docs
cp -a \
#:docfiles2
  %docs% \
#:docfiles2
#%post-docfiles2-fix%
  $PKG/usr/doc/$NAME-$VERSION/
#:docs
#:docfiles
#%post-docfiles-fix%
find $PKG/usr/doc -type f | xargs -r chmod 644
find $PKG/usr/doc -type d | xargs -r chmod 755
find $PKG/usr/{man,info} -type f | xargs -r gzip -9
#:doc
#%post-doc-fix%
#:tail
mkdir -p $PKG/install
cat $CWD/slack-desc >$PKG/install/slack-desc
cat $CWD/doinst.sh >$PKG/install/doinst.sh ##doinst
( cd $PKG; find * -name "*.new" ) | xargs -r echo config >>$PKG/install/doinst.sh ##etc_config
( cd $PKG; find etc/gconf/schemas/ -name "*.schemas" ) | xargs -l echo gconf >>$PKG/install/doinst.sh ##schemas
( cd $PKG; find -name index.theme ) | xargs -l echo icons >>$PKG/install/doinst.sh ##icons

#:tail
#%post-tail-fix%
#:package
cd $PKG
makepkg -p -l y -c n $TMP/$NAME-$VERSION-$ARCH-$BUILD.tgz

#:package
#%post-package-fix%
#:cleanup
if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP/%srcdirprefix%
  rm -rf $PKG
fi
#:cleanup
#%post-cleanup-fix%
#:SlackBuild.skel

#:doinst.sh_config
config() {
  NEW="$1"
  OLD="`dirname $NEW`/`basename $NEW .new`"
  # If there's no config file by that name, mv it over:
  if [ ! -r $OLD ]; then
    mv $NEW $OLD
  elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then # toss the redundant copy
    rm $NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
#:doinst.sh_config
#:doinst.sh_gconf
gconf() {
  if [ -x usr/bin/gconftool-2 ]; then
    GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source` \
    gconftool-2 --makefile-install-rule $1 >/dev/null 2>&1
  fi
}
#:doinst.sh_gconf
#:doinst.sh_icons
icons() {
  if [ -x usr/bin/gtk-update-icon-cache ]; then
    usr/bin/gtk-update-icon-cache `dirname $1` >/dev/null 2>&1
  fi
}
#:doinst.sh_icons
