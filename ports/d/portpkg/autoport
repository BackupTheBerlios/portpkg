#!/bin/sh
#
# Autoport -- An Automatic SlackBuild Generator
# Copyright (C) 2004 Thomas Pfaff <toastbrot@web.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

source `which portpkg` || exit 1
t=`private`

ask()
{
    $i_act || return
    echo -n "$@  "
    read s
}

check()
{
    local desc=$1
    local pattern=$2
    local file=$3
    shift
    shift  
    echo -n "Checking for $desc... "
    if egrep -q "$pattern" $file; then
	echo "yes"
	return 0
    else
	echo "no"
	return 1
    fi
}

snip()
{
    sed -i "/^#\!$1$/,/^#\!$1$/d" $2
}

# preambel
stanza "Autoport -- An Automatic SlackBuild Generator
Copyright (C) 2004 Thomas Pfaff <toastbrot@web.de>
Autoport comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.

Autoport is quite experimental, but seems to work better than 'addport'. The
difference is, autoport will download the source code package you have to
enter and searches for different keywords to adjust a suitable SlackBuild
script.

If autoport doesnt't work as expected, please mail at:
<topf at users dot berlios dot de>"

# usage
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    stanza "Usage: autoport [url]"
    exit 1
fi

# interactive?
if [ "$*" ]; then
    i_act=false
    source=$1
else
    i_act=true
    echo
fi

ask "Continue? (ctrl-c to quit)"

while ! [ "$MY_TAG" ]; do
    $i_act && die "No tag specified!"
    ask "What is your tag? (e.g.: 'mich')"
    MY_TAG=`echo $s | tr "A-Z" "a-z" | sed "s,[^a-z],,g"`
    [ "$MY_TAG" ] && echo "MY_TAG=$MY_TAG" >>$PRT_DIR/local.conf
done

# source
ask "Source file:"	# http://ach.du.scheisse/auch/das/Noch-1.2.3.tar.bz2
source=${s:-$source}
[ "$source" ] || die "Nothing entered. Eh? I can't help you this way!"
file=`basename $source`					# Noch-1.2.3.tar.bz2
raw_name=`echo $file | rev | cut -d - -f 2- | rev`	# Noch
name=`echo $raw_name | tr "A-Z" "a-z"`			# noch
version=`echo $file | rev | cut -d - -f 1 | rev`	# 1.2.3
version=`basename $version .tar.gz`
version=`basename $version .tar.bz2`
version=`basename $version .tgz`
ask "Group [testing]:"
group=${s:-testing}
ask "Name [$name]:"
name=${s:-$name}
ask "Version [$version]:"
version=${s:-$version}
srcver=$version
version=`echo $version | sed "s,-,,g"`
source=`echo "$source" | sed \
-e "s,$version,\\$VERSION,g" \
-e "s,//prdownloads\.,//dl\.," \
-e "s,\?download$,,"`
ask "Arch [i486]:"
arch=${s:-i486}
ask "Build [1$MY_TAG]:"
build=${s:-1$MY_TAG}
if [ -f $PRT_DIR/$group/$name/slack-desc ]; then
    desc1=`grep "^$name:" $PRT_DIR/$group/$name/slack-desc | sed "s,^$name: ,," | head -n 1`
    desc2=`grep "^$name:" $PRT_DIR/$group/$name/slack-desc | sed "s,^$name: ,," | sed "1,2d"`
else
    desc1=$raw_name
    desc2=
fi
ask "Description (1-liner) [$desc1]:"
desc1=${s:-$desc1}
if $i_act; then
    echo "Description (details) [$desc2]:"
    echo "  (Write or paste and finish with a line '.')"
    s=""
    while [ "$l" != "." ]; do
	read l
	s="$s
$l"
    done
    s=`echo "$s" | sed -e "1d" -e "/^\.$/d"`
    desc2=${s:-$desc2}
fi
if [ "$desc2" ]; then
    len=${#name}
    echo "len: $len"
    desc=`echo "$name: $desc1"
    echo "$name:"
    echo "$desc2" | fmt -u -w $((75-len)) | sed "s,^,$name: ,"`
else
    desc="$name: $desc1"
fi
echo
echo "Creating a port with this information:"
echo
echo "PORT NAME:  $name-$version-$arch-$build"
echo "PORT LOCATION:  $PRT_DIR/$group/$name/SlackBuild"
echo "PORT SOURCE:  $source"
echo "PORT DESCRIPTION:"
echo "$desc"
$i_act && echo
ask "Continue? (ctrl-c to quit)"
if [ -d $PRT_DIR/$group/$name ]; then
    ask "Exists already. Really go on? (ctrl-c to quit)"
#    # unset $build if version and arch is the same
#    build=
fi

# downlaod source file
url=`echo $source | sed "s,\\$VERSION,$version,g"`
file=`basename $url`
[ -f $SRC_DIR/$file ] || get $url $SRC_DIR/$file || die
#cp SlackBuild.autoskel $t.SlackBuild
cat $0 | sed '/^#\!SlackBuild.skel$/,/^#\!SlackBuild.skel$/!d' >$t.SlackBuild
cat $0 | sed '/^#\!doinst.sh.skel$/,/^#\!doinst.sh.skel$/!d' >$t.doinst.sh
# checking
echo
# format
echo -n "Checking format... "
case $source in
    *.tar.bz2)
	format=tarbz2
	tar tjf $SRC_DIR/$file >$t.footprint \
	|| die "Error while unpacking, maybe wrong URL?"
	echo ".tar.bz2"
	snip targz $t.SlackBuild;;
    *.tar.gz|.tgz)
	format=targz
	tar tzf $SRC_DIR/$file >$t.footprint \
	|| die "Error while unpacking, maybe wrong URL?"
    	echo ".tar.gz"
	snip tarbz2 $t.SlackBuild;;
    *)	echo "unknown!"
	die "Unknown source format, please write SlackBuild by hand!";;
esac
# source-prefix
echo -n "Checking source-prefix... "
cat $t.footprint | cut -d / -f 1 | sort -u >$t.srcdir
if [ `cat $t.srcdir | wc -l` == "1" ]; then
    srcdir_prefix=`cat $t.srcdir`
    echo "$srcdir_prefix/"
else
    echo "no prefix!"
    die "This tarball has no prefix, please write SlackBuild by hand!"
fi
mkdir -p $t.src
case $format in
    tarbz2) tar xjf $SRC_DIR/$file -C $t.src/ "*/Makefile*";;
    targz)  tar xzf $SRC_DIR/$file -C $t.src/ "*/Makefile*";;
esac
# installation
if check "setup.py" "/setup\.py$" $t.footprint; then
    snip perl $t.SlackBuild
    snip configure $t.SlackBuild
    snip autogen $t.SlackBuild
    snip make $t.SlackBuild
    snip destdir $t.SlackBuild
    snip prefix $t.SlackBuild
    snip PREFIX $t.SlackBuild
    snip usrlocal $t.SlackBuild
    arch=noarch
else
    snip python $t.SlackBuild
    if check "Makefile.PL" "/Makefile.PL$" $t.footprint; then
	snip configure $t.SlackBuild
	snip autogen $t.SlackBuild
	snip PREFIX $t.SlackBuild
	snip prefix $t.SlackBuild
	snip usrlocal $t.SlackBuild
	arch=noarch
    else
	snip perl $t.SlackBuild
	if check "Makefile" "/Makefile$" $t.footprint; then
	    snip configure $t.SlackBuild
	    snip autogen $t.SlackBuild
        elif check "configure" "/configure$" $t.footprint; then
    	    snip autogen $t.SlackBuild
	elif check "autogen.sh" "/autogen.sh$" $t.footprint; then
	    :
	else
	    die "Don't know how to build this package, please write SlackBuild by hand!"
	fi
	# installation prefix
	if check "DESTDIR" "\<DESTDIR\>" "$t.src/$srcdir_prefix/*"; then
	    snip PREFIX $t.SlackBuild
	    snip prefix $t.SlackBuild
	    snip usrlocal $t.SlackBuild
	else
	    snip destdir $t.SlackBuild
	    if check "PREFIX" "\<PREFIX\>" "$t.src/$srcdir_prefix/*"; then
		snip prefix $t.SlackBuild
		snip usrlocal $t.SlackBuild
		snip make $t.SlackBuild
	    else
		snip PREFIX $t.SlackBuild
		if check "prefix" "\<prefix\>" "$t.src/$srcdir_prefix/*" "$t.src/$srcdir_prefix/*"; then
		    snip usrlocal $t.SlackBuild
		    snip make $t.SlackBuild
		else
		    snip prefix $t.SlackBuild
		    if check "hard coded /usr/local" "/usr/local" "$t.src/$srcdir_prefix/*"; then
			:
		    else
			die "Don't know how to install this package, please write SlackBuild by hand!"
		    fi
		fi
	    fi
	fi	
    fi
fi
if check "CFLAGS" "\<CFLAGS\>" "$t.src/$srcdir_prefix/*"; then
    :
else
    snip cflags $t.SlackBuild
fi
if check "CXXFLAGS" "\<CXXFLAGS\>" "$t.src/$srcdir_prefix/*"; then
    :
else
    snip cxxflags $t.SlackBuild
fi
#    arch=noarch
#    echo
#    echo "  It seems this is a script package with no architecure dependend code."
#    echo "  Set ARCH=noarch, please make a bug-report, if this is wrong:"
#    echo "    <topf at users dot berlios dot de>."
#    echo
#fi
check "gconf schemas" "\.schemas.in$|\.schemas$" $t.footprint && schemas=true || schemas=false
check "scrollkeeper" "\.omf$" $t.footprint && scrollkeeper=true || scrollkeeper=false
if ! $schemas && ! $scrollkeeper; then
    snip config $t.SlackBuild
    doinst=false
else
    doinst=true
#    grep "\.schemas.in$" $t.footprint | sed "s,\.in$,," | xargs -r -l echo config >>$t.doinst.sh
#    grep "\.omf$" $t.footprint | xargs -r -l echo config >>$t.doinst.sh
fi
echo -n "Checking for docs... "
egrep "/ABOUT$|/ABOUT-NLS$|/ANNOUNCE$|/AUTHORS$|/CONFIGURATION$|/CHANGES$\
|/COPYING$|/COPYRIGHT$|/CREDITS$|/ChangeLog$|/Changelog$|/CHANGELOG$\
|/CONTRIBUTORS$|FAQ|/FEATURES$|/FILES$|/HACKING$|/History$|/HISTORY$|/INSTALL\
|/LICENSE$|/LSM$|/MANIFEST$|/NEWS$|README|Readme|/SITES$|RELEASE|/RELNOTES$\
|/THANKS$|/TIPS$|/TODO$|/VERSION$|/CONFIGURATION|/GPL$|/License$|/Doc$|/doc$\
|/Docs|/docs|/Roadmap$|/ROADMAP$|BUGS|/index.ht|INDEX" $t.footprint \
| sed "s,^$srcdir_prefix/,," | grep -v / | sort -u >$t.docs
docs=`cat $t.docs | xargs`
echo "$docs."
[ "$docs" ] && sed -i "s,%%docs%%,$docs," $t.SlackBuild || snip docs $t.SlackBuild
sed -i "s,%%version%%,$version," $t.SlackBuild
case $arch in
  noarch)	sed -i "s,%%arch%%,$arch," $t.SlackBuild
		snip cflags $t.SlackBuild
		snip strip $t.SlackBuild;;
  *)		sed -i "s,%%arch%%,\${ARCH:-i486}," $t.SlackBuild;;
esac
# for now
snip patch $t.SlackBuild
snip srcver $t.SlackBuild
snip perms644 $t.SlackBuild
snip perms755 $t.SlackBuild
prefix=/usr
sed -i "s,%%prefix%%,$prefix,g" $t.SlackBuild
# only if we have $build
[ "$build" ] && sed -i "s,%%build%%,$build," $t.SlackBuild
srcdir_prefix=`echo $srcdir_prefix | sed -e "s,$name,\\$NAME,g" -e "s,$version,\\$VERSION,g"`
tarball=`echo $file | sed -e "s,$name,\\$NAME,g" -e "s,$version,\\$VERSION,g"`
sed -i "s,%%srcdirprefix%%,$srcdir_prefix," $t.SlackBuild
sed -i "s,%%tarball%%,$tarball," $t.SlackBuild
sed -i "/^#/d" $t.SlackBuild
sed -i "/^#/d" $t.doinst.sh
#if $i_act; then
#    echo
#    echo "SlackBuild would look like this:"
#    more $t.SlackBuild
#    if $doinst; then
#	echo
#	echo "doinst.sh would look like this:"
#	more $t.doinst.sh
#    fi
#fi
$i_act && echo
ask "Continue? (ctrl-c to abbort)"
mkdir -p $PRT_DIR/$group/$name
cat $t.SlackBuild >$PRT_DIR/$group/$name/SlackBuild
$doinst && cat $t.doinst.sh >$PRT_DIR/$group/$name/doinst.sh
echo "$source" >$PRT_DIR/$group/$name/sources
echo "$desc" >$PRT_DIR/$group/$name/slack-desc
echo "Port written in $PRT_DIR/$group/$name."
exit 0

#!SlackBuild.skel
VERSION=%%version%%
#!srcver
SRCVER=%%srcver%%
#!srcver
ARCH=%%arch%%
BUILD=%%build%%

CWD=`pwd`
NAME=`basename $CWD`
PKG=/tmp/package-$NAME
rm -rf $PKG
mkdir -p $PKG/usr

#!cflags
if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
else
  SLKCFLAGS="-O2"
fi

#!cflags
cd /tmp || exit 1
#!targz
tar xzvf $CWD/%%tarball%% || exit 1
#!targz
#!tarbz2
tar xjvf $CWD/%%tarball%% || exit 1
#!tarbz2
cd %%srcdirprefix%% || exit 1
#!patch
cat $CWD/*.patch | patch -p1 --verbose
#!patch
chown -R root.root .
#!perms644
find . -perm %%perm644%% -exec chmod 644 {} \;
#!perms644
#!perms755
find . -perm %%perm755%% -exec chmod 755 {} \;
#!perms755
#!autogen
./autogen.sh
#!autogen
#!configure
#!cflags
CFLAGS="$SLKCFLAGS" \
#!cflags
#!cxxflags
CXXFLAGS="$SLKCFLAGS" \
#!cxxflags
./configure \
  --prefix=%%prefix%% \
#!etcvar
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
#!etcvar
  --program-prefix="" \
  --disable-static \
  $ARCH-slackware-linux || exit 1
#!configure
#!perl
perl Makefile.PL PREFIX=/usr SYSCONFDIR=/etc LOCALSTATEDIR=/var/lib || exit 1
#!perl
#!usrlocal
#!etcvar
sed -i "s,/usr/local/etc,${PKG}/etc,g" Makefile
sed -i "s,/usr/local/var,${PKG}/var,g" Makefile
#!etcvar
sed -i "s,/usr/local,${PKG}%%prefix%%,g" Makefile
#!usrlocal
#!make
make || exit 1
#!make
#!destdir
make install DESTDIR=$PKG || exit 1
#!destdir
#!PREFIX
make PREFIX=/usr || exit 1
make install PREFIX=$PKG/usr || exit 1
#!PREFIX
#!prefix
make prefix=/usr || exit 1
make install prefix=$PKG/usr || exit 1
#!prefix
#!usrlocal
make install || exit 1
#!usrlocal
#!python
python setup.py build install --root=$PKG || exit 1
#!python
chown -R root.bin $PKG{,/usr}/{,s}bin 2>/dev/null
#!strip
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2>/dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2>/dev/null
)
#!strip
mv $PKG/usr/share/{man,doc} $PKG/usr/ 2>/dev/null
rmdir $PKG/usr/share 2>/dev/null
gzip -9 $PKG/usr/man/man?/*
#!docs
mkdir -p $PKG/usr/doc/$NAME-$VERSION
cp -a \
  %%docs%% \
  $PKG/usr/doc/$NAME-$VERSION
#!docs
mkdir -p $PKG/install
cat $CWD/slack-desc >$PKG/install/slack-desc
#!config
cat $CWD/doinst.sh >$PKG/install/doinst.sh
find $PKG/ -name "*.new" -o -name "*.schemas" -o -name "*.omf" \
| sed -r "s,^$PKG/(.*)$,config \1," >>$PKG/install/doinst.sh
#!config

cd $PKG || exit 1
makepkg -p -l y -c n /tmp/$NAME-$VERSION-$ARCH-$BUILD.tgz
#!SlackBuild.skel
#!doinst.sh.skel
config()
{
  case $1 in
    *.new)
      new=`echo $1 | sed "s,\.new$,,"`
      if [ ! -f $new ]; then
        mv $1 $new
      elif cmp -s $1 $new; then
        rm $1
      fi;;
    *.omf)
      scrollkeeper-update -p var/lib/scrollkeeper -o $1 >/dev/null 2>&1;;
    *.schemas)
      GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source` \
      gconftool-2 --makefile-install-rule $1 >/dev/null 2>&1;;
  esac
}
#!doinst.sh.skel
