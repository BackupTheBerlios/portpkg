#!/bin/bash
#BLURB="Configure Portpkg"

source `which portpkg` || exit 1
t=`mktemp -d`

if [ -f $PRT_DIR/portpkg.conf ]; then
  RC=$PRT_DIR/portpkg.conf
elif [ "`whoami`" = "root" ]; then
  RC=$CFG_DIR/local.conf
else
  RC=~/.portpkg.conf
fi

target()
{
  heading="DISTRIBUTION VERSION"
  dist_ver=`cut -d " " -f 2 /etc/slackware-version | cut -d . -f 1-2`
  dialog --title "$heading" --inputbox \
"What distribution do you focus?
/etc/slackware-version notes $dist_ver, but you can also choose 'current'.
If unsure enter '$dist_ver'." 0 0 \
    "$DIST_VER" 2>$t/dist-ver || exit
  DIST_VER=`cat $t/dist-ver`
  sed -i "/^DIST_VER=/d" $RC
  if [ "$DIST_VER" ]; then
    echo "DIST_VER=\"$DIST_VER\"" >>$RC
  fi
}

maintain()
{
  heading="MAINTAINER SETTINGS"
  dialog --title "$heading" --inputbox \
"If you plan to write ports, what tag would you like to use? Only lower case \
letters allowed (e.g. 'mich').
Leave this empty if unsure or you don't plan to write ports." 0 0 "$MY_TAG" 2>$t/my-tag || exit
  MY_TAG=`cat $t/my-tag | tr "A-Z" "a-z" | sed "s,[^a-z],,g"`
  sed -i "/^MY_TAG=/d" $RC
  sed -i "/^MY_EMAIL=/d" $RC
  sed -i "/^MY_REALNAME=/d" $RC
  if [ "$MY_TAG" ]; then
    echo "MY_TAG=\"$MY_TAG\"" >>$RC
    dialog --title "$heading" --inputbox \
"If you plan to contrib your ports to the Portpkg Project, you need to enter \
your mail address.
Leave this empty if you don't plan to contribute ports." 0 0 "$MY_EMAIL" 2>$t/my-email || exit
    MY_EMAIL=`cat $t/my-email`
    if [ "$MY_EMAIL" ]; then
      echo "MY_EMAIL=\"$MY_EMAIL\"" >>$RC
      dialog --title "$heading" --inputbox \
"Please enter your real name." 0 0 "$MY_REALNAME" 2>$t/my-realname || exit
      MY_REALNAME=`cat $t/my-realname`
      echo "MY_REALNAME=\"$MY_REALNAME\"" >>$RC
    fi
  fi
}

output()
{
  heading="OUTPUT SETTINGS"
  sed -i "/^VERBOSE=/d" $RC
  if dialog --title "$heading" --defaultno --yesno \
"Do you want to have always verbose mode? You will see more output.
If unsure answer 'no'." 0 0; then
    echo "VERBOSE=true" >>$RC
  fi
}

dependencies()
{
  heading="DEPENDENCIES SETTINGS"
  sed -i "/^NO_REQS=/d" $RC
  sed -i "/^LAZY_CHECKS=/d" $RC
  if dialog --title "$heading" --yesno \
"Do you want to have dependency resolution always enabled?
If unsure answer 'yes'." 0 0; then
    if dialog --title "$heading" --defaultno --yesno \
"Do you want to have lazy upgrading always enabled? Dependencies will normally \
being upgraded if possible. Lazy upgrading cuts that off, but can cause ports \
fail to build.
If unsure answer 'no'." 0 0; then
      echo "LAZY_CHECKS=true" >>$RC
    fi
  else
    echo "NO_REQS=true" >>$RC
  fi
}

plugins()
{
  heading="PLUGINS SETTINGS"
  echo -n "dialog --title \"$heading\" --single-quoted --checklist \
\"Select which plugins you want to enable when you sync your data base:\" 0 0 0 " >$t/menu
  local plugin
  for plugin in `find $CFG_DIR/plugins/sync.* $PRT_DIR/plugins/sync.* 2>/dev/null`; do
    echo -n `basename $plugin` \
      `grep ^#BLURB= $plugin | cut -d = -f 2` \
      `echo "$SYNC" | tr " " "\n" | grep -qx $(basename $plugin) && echo on || echo off`" "
  done >>$t/menu
  . $t/menu 2>$t/plugins
  [ "$?" != 0 ] && return

  # run sync.portpkg first as long as TREE=$PRT_DIR
  if grep -sqw sync.portpkg $t/plugins; then
    grep -sqx "TREE=\$PRT_DIR" $PRT_DIR/plugins/sync.portpkg $CFG_DIR/plugins/sync.portpkg \
    && sed -i "s, sync.portpkg , ,;s,^,sync.portpkg ," $t/plugins
  fi

  sed -i "/^SYNC=/d" $RC
  echo "SYNC=\"`cat $t/plugins`\"" >>$RC
  . $RC
}

cpu()
{
  # This subroutine has been "inspired" by the configure script from Mplayer.
  # Thanks to these people! :-)
  [ -f /proc/cpuinfo ] || die "Cannot determine CPU without /proc."
  vendor=`grep "vendor_id" /proc/cpuinfo | cut -d : -f 2 | xargs`
  family=`grep "cpu family" /proc/cpuinfo | cut -d : -f 2 | xargs`
  model=`grep "model" /proc/cpuinfo | grep -v "model name" | cut -d : -f 2 | xargs`
  stepping=`grep "stepping" /proc/cpuinfo | cut -d : -f 2 | xargs`
  case $vendor in
    AuthenticAMD)
      case $family in
        3) proc=i386;;
        4) proc=i486;;
        5) case $model in
             9|13) proc=k6-3;;
             8)    proc=k6-2;;
             6|7)  proc=k6;;
             *)    proc=i586;;
           esac;;
        6) case $model in
             1|2|3) proc=athlon;;
             4|5)   proc=athlon-tbird;;
             6)     case $stepping in
                      1) proc=athlon-4;;
                      *) grep -wsq "sse" /proc/cpuinfo \
                           && proc=athlon-xp \
                           || proc=athlon-4;;
                    esac;;
             *)     proc=athlon-4;;
           esac;;
        *) proc=athlon-xp;;
      esac;;
    GenuineIntel)
      case $family in
        3) proc=i386;;
        4) proc=i486;;
        5) case $model in
             1|2|3) proc=i586;;
             *)     proc=pentium-mmx;;
           esac;;
        6) case $model in
             1|2)     proc=i686;;
             3|4|5|6) proc=pentium2;;
             *)       proc=pentium3;;
           esac;;
        *) proc=pentium4;;
      esac;;
    *)
      case $family in
        3) proc=i386;;
        4) proc=i486;;
        *) proc=i586;;
      esac;;
  esac
  echo $proc
}

optimise()
{
  # get gcc-version for gcc-3.3.X from Slackware 10.1 uses -mcpu while
  # later releases use -mtune
  gccver="`gcc -v 2>&1 | awk '/gcc version/ { print $3 }'`"
  case $gccver in
    3.4*)       # the usage of -mcpu keeps gcc-3.4.X complaining about
		# deprecation of this flag.
                mycpuflag="-mtune";;
    *)          # for all others, we better use this.
                mycpuflag="-mcpu";;
  esac       

  heading="OPTIMISATION SETTINGS"
  case `arch` in
    s390|x86_64)
      if dialog --title "$heading" --yesno \
"Your are running `arch`. You should set ARCH to `arch`. Shall I do that for \
you?"; then
        sed -i "\,^ARCH=,d" $RC
        echo "ARCH=`arch`" >>$RC
      fi;;
    *)
      dialog --title "$heading" --menu \
"Do you want to optimise for your CPU? Your CPU is identified as `cpu` of \
family `arch`. You can only optimise for your current architecture. If you \
want to hack on different flags, edit $RC. Note, that not all \
SlackBuilds support custom compiler flags.
If unsure choose 'default'." 0 0 0 \
    "default"  "Build for i486, optimise for i686" \
    "optimise" "Build for `arch`, optimise for `cpu`" 2>$t/menu
      [ $? == 0 ] || return
      sed -i "/^ARCH=/d" $RC
      sed -i "/^CFLAGS=/d" $RC
      if [ `cat $t/menu` == optimise ]; then
        echo "ARCH=`arch`"
        echo "CFLAGS=\"-O2 -march=`arch` ${mycpuflag}=`cpu`\""
      fi >>$RC;;
  esac
}

settings()
{
  heading="VARIOUS SETTINGS"
  echo "dialog --title \"$heading\" --separate-output --checklist \"\" 0 0 0 \\" >$t/menu
  grep "^[A-Z_]*=\(true\|false\)" `which portpkg` | cut -d = -f 1 >$t/items
  cat $t/items | while read tag; do
    item=`grep "^$tag=" $(which portpkg) | cut -s -d \# -f 2 | cut -c 2-`
    state=`eval echo \\$$tag`
    state=`$state && echo ON || echo OFF`
    echo "$tag \"$item\" $state \\"
  done >>$t/menu
  . $t/menu 2>$t/out
  test $? != 0 && return
  # variables turned ON
  for i in `cat $t/out`; do
    sed -i "/^$i=/d" $RC
    grep -sq "^$i=true" `which portpkg` || echo "$i=true" >>$RC
  done
  # variables turned OFF
  for i in `cat $t/items | grep -vxf $t/out`; do
    sed -i "/^$i=/d" $RC
    grep -sq "^$i=false" `which portpkg` || echo "$i=false" >>$RC
  done
}

rc=0
while [ $rc == 0 ]; do 
  dialog --title "PORTPKG-CONFIGURATION MAIN MENU" \
  --cancel-label "Quit" --menu \
"This is a configuration tool for Portpkg.
Select what you want to configure:" 0 0 0 \
  target "Set distribution target" \
  plugins "Set which plugins to use" \
  maintain "Set ports tag string" \
  output "Set output level" \
  optimise "Set processor optimising" \
  settings "Various settings" \
  dependencies "Set dependency handling" 2>$t/sub
  rc=$?
  sub=`cat $t/sub`
  [ $rc == 0 ] && $sub
done
