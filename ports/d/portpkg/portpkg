#!/bin/bash -u
#
# Portpkg -- A ports system for Slackware Linux, written in Bash++
# Copyright (C) 2003-2005 Thomas Pfaff <topf at users dot berlios dot de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# configuration
MAINTAIN_ALL=false
VERBOSE=false
DRY_RUN=false
NO_REQS=false
LAZY_CHECKS=false
DEBUG=false
ARCH=i486
CFLAGS=""
MY_TAG=""
SYNC_ADDON=""
ADM_DIR=/var/log
SRC_DIR=/usr/src/dist
PKG_DIR=/usr/obj/pkg
PRT_DIR=/usr/ports
CFG_DIR=/etc/portpkg
TMP=/tmp
[ -f $CFG_DIR/local.conf ] && source $CFG_DIR/local.conf

# constants
ENGINE_VER=cvs
CVS_ROOT=:pserver:anonymous@cvs.portpkg.berlios.de:/cvsroot/portpkg
SUBMIT_URL=http://portpkg.berlios.de/upload.php
TMPDIR=`mktemp -d $TMP/portpkg-XXXXXX` || exit 1
export TMPDIR
ADD_SUM_CALL=`mktemp`
ADD_SUM_START=`mktemp`
ADD_SUM_FINISH=`mktemp`
FAKED_INST=`mktemp`

# default arguments
action=do_add
download_only=false
prepare_only=false
reinstall=false
rebuild=false
remaintain=false
output=/dev/null

# global variables
declare \
  ignore mirrors exclude \
  package name group \
  script description requires optional size u_size sources pkg_file \
  maintain slot_in pseudo no_fakeroot

# listers
ls_inst() { find $ADM_DIR/packages/ -type f | sed "s,^.*/,," 2>/dev/null
  cat $FAKED_INST 2>/dev/null; }
ls_pkg()  { find $PKG_DIR/ -name "*.tgz" -follow | sed -r "s,^.*/(.*/.*)\.tgz$,\1," 2>/dev/null; }
ls_slk()  { find $PRT_DIR/ -name "*SlackBuild" -follow \
  | sed "s,/local/,/0local/," | sort | sed "s,/0local/,/local/," 2>/dev/null; }

# converters
pkg2name()  { sed -r "s,^(.*)-.*-.*-.*$,\1,"; }
pkg2ver()   { sed -r "s,^.*-(.*)-.*-.*$,\1,"; }
pkg2rel()   { sed -r "s,^.*-(.*-.*-.*)$,\1,"; } 
loc2gpkg()  { sed -r "s,^.*/(.*/.*)$,\1," 2>/dev/null; }
slk2gname() { sed "s,.*/\(.*/.*\)/.*SlackBuild$,\1,"; }
slk2loc()   { xargs grep -sH "^VERSION=\|^ARCH=\|^BUILD=" -m 3 2>/dev/null \
  | sed -n "\,:VERSION=,{s,/[^/]*:VERSION=,-,;N;s,\n.*=,-,;N;s,\n.*=,-,;s,\${ARCH:-[^}]*},$ARCH,;s,\${[A-Z]*:-\([^}]*\)},\1,g;p}" 2>/dev/null; }
# FIXME: preset $BUILD and $VERSION is not supported, only reset!

# message system
stanza() { [ "$*" ] && echo -e "\n$@"; }
row()    { echo -e "  --> $@"; }
warn()   { echo -e "WARNING: $@"; }
error()  { [ "$*" ] && stanza "$@" >&2; return 1; }
die()    { error "$@"; exit 1; }
debug()  { $DEBUG && echo "$@" >&2; }

# checks
has_args()  { [ "$*" ] || error "Too few arguments! Try: portpkg --help"; }
is_root()   { [ "$UID" == "0" ] || error "You must be root to run this action!"; }
has_prog()  { which $1 >/dev/null 2>&1 || error "Cannot find $1!"; }
has_ports() { [ -d $PRT_DIR ] || error "No ports found! Try: portpkg --sync"; }

# download a file and make use of mirrors
get()
{
  local url=$1 dest=$2
  has_prog wget || die
  mkdir -p `dirname $dest`
  local o_url=$url
  # mirrors
  if [ "$mirrors" ]; then
    echo "$mirrors" >$t/mirrors
    local master mirror
    while read master mirror; do
      url=`echo $url | sed "s,^$master,$mirror,"`
    done <$t/mirrors
  fi
  debug "get(): \$url=$url"
  local log=$TMP/wget-`basename $dest`.log
  rm -rf $log || die
  $VERBOSE && log=/dev/stdout
  # try primary url if mirror fails
  if wget -c -O $dest.part $url >$log 2>&1 \
  || wget -c -O $dest.part $o_url >>$log 2>&1; then
    mv $dest.part $dest
    # at this point we don't need a log anymore (don't do that with stdout!)
    $VERBOSE || rm $log
  else
    $VERBOSE || tail $log
    error "Download failed!"
  fi
}

# generate a regular expression for grep from a pkgex-list
regex() # >regex_list
{
  local arg
  for arg; do
    case $arg in
      */)
        # groups
        echo -n " -e \(^\|\/\)$arg";;
      *)
        # (g_)names and (g_)packages
        echo -n " -e \(^\|\/\)$arg\(\|-[^-]*-[^-]*-[^-]*\)$";;
    esac
  done
  [ $# == 0 ] && echo "-e ^$" || true
}

# resolve groups/ to names
# note: do_list doesn't use explicit()!
explicit() # >pkgex-list
{
  local arg
  for arg; do
    case $arg in
      */) ls_slk | slk2gname | grep `regex $arg` | cut -d / -f 2;;
      *)  echo $arg;;
    esac
  done
}

# print non-available, but installed ports
ls_diff() # >list
{
  debug "ls_diff(): starting"
  local t=`mktemp -d`
  ls_slk | slk2loc | grep -v $exclude | loc2gpkg | cut -d / -f 2 >$t/avail
  ls_inst >$t/inst
  pkg2name <$t/avail >$t/avail.names
  pkg2name <$t/inst >$t/inst.names
  local check
  fgrep -xf $t/avail.names $t/inst.names \
  | sed "s,.*,&-[^-]*-[^-]*-[^-]*," | while read check; do
    grep -xm 1 "$check" $t/avail >>$t/avail.check
    grep -xm 1 "$check" $t/inst >>$t/inst.check
  done
#  $LAZY_CHECKS && sed -i "s,\(.*-.*\)-.*-.*,\1," $t/avail.check
#  $LAZY_CHECKS && sed -i "s,\(.*-.*\)-.*-.*,\1," $t/inst.check
  fgrep -vxf $t/inst.check $t/avail.check | sort -u
  debug "ls_diff(): finished"
}

# get information about a port and write it into global variables
get_info() # pkgex
{
  debug "get_info(): starting: $@"
  # if there are more than one, take the first
  local loc=`ls_slk | slk2loc | grep -v $exclude 2>/dev/null | grep -m 1 $(regex $1)`
  # maybe an exluded explicitly?
  [ "$loc" ] || case $1 in */*)
    loc=`ls_slk | slk2loc | grep -m 1 $(regex $1)`
    [ "$loc" ] && debug "get_info(): Excluded port specified explicitly!";;
  esac
  if ! [ "$loc" ]; then
    error "No such port: $1"
    return 1
  fi
  group=`echo $loc | loc2gpkg | cut -d / -f 1`
  package=`echo $loc | loc2gpkg | cut -d / -f 2`
  name=`echo $package | pkg2name`
  version=`echo $package | pkg2ver`
  local path=`dirname $loc`/$name
  script=`find $path/ -name "*SlackBuild" | head -n 1`
  description=`grep -s ^$name: $path/slack-desc`
  requires=`grep -sv ^# $path/requires`
  optional=`grep -sv ^# $path/optional`
  sources=`grep -sv ^# $path/sources | sed "s,[{}],,g;s,\\$NAME,$name,g;s,\\$VERSION,$version,g"`
  # info about cached .tgz-packages
  pkg_file=`find $PKG_DIR/{$group/,} -name $package.tgz 2>/dev/null | head -n 1`
  if [ "$pkg_file" ]; then
    local s=`gzip -l $pkg_file 2>/dev/null | tail -n 1`
    size=`echo $s | awk '{ print $1 }'`
    u_size=`echo $s | awk '{ print $2 }'`
    ((size/=1024))
    ((u_size/=1024))
  else
    size=""
    u_size=""
  fi
  # maintained port?
  maintain=false
  local build=`echo $package | sed -r "s,^.*-(.*)$,\1,"`
  [ "$MY_TAG" ] && case $build in *[0-9]$MY_TAG) maintain=true;; esac
  $MAINTAIN_ALL && maintain=true
  [ -f $path/slot-in ] && slot_in=true || slot_in=false
  [ -f $path/pseudo ] && pseudo=true || pseudo=false
  [ -f $path/no-fakeroot ] && no_fakeroot=true || no_fakeroot=false
  debug "get_info(): finished: $@"
  return 0
}

# check if all required packages are installed
check_reqs()
{
  $NO_REQS && return 0
  local t=`mktemp -d`
  ls_slk | slk2loc | grep -v $exclude | loc2gpkg >$t/avail
  ls_inst >$t/inst
  debug "check_reqs(): starting: $package"
  # remember that for a refresh later
  local gpkg=$group/$package
  $LAZY_CHECKS && debug "check_reqs(): being lazy"
  debug "check_reqs(): $name requires: "$requires
  local req
  for req in $requires; do
    debug "check_reqs(): checking $req"
    local inst_pkg=`grep -m 1 $(regex $req) $t/inst`
    local avail_pkg=`grep -m 1 $(regex $req) $t/avail | cut -d / -f 2`
    # is any version installed?
    if [ "$inst_pkg" ]; then
      debug "check_reqs(): $req is installed"
      # if not in strict mode then it's sufficient
      $LAZY_CHECKS && continue
    fi
    # anyway, is there an available port?
    if [ "$avail_pkg" ]; then
      debug "check_reqs(): $req available as $avail_pkg"
      # is it up-to-date?
      fgrep -qx $avail_pkg $t/inst && continue
      debug "check_reqs(): call: add_pkg $avail_pkg"
      if ! add_pkg $avail_pkg; then
        error "$avail_pkg is broken! Stopping `echo $gpkg | pkg2name | cut -d / -f 2`."
        return 1
      fi
      # after that add_pkg we have to refresh
      get_info $gpkg
    elif ! [ "$inst_pkg" ]; then
      error "Cannot find required package $req! Stopping."
      return 1
    fi
  done
  debug "check_reqs(): finished: $package"
  return 0
}

maintainer_mode()
{
  local t=`mktemp -d`
  row "Going maintainer mode"
  # assume we are in the script dir
  rm -rf PORT_IS_BROKEN
  rm -rf md5sums
  rm -rf footprint
  # write md5sum list first (don't md5sum footprint)
  row "Writing: footprint md5sums requires (assuming these files are integer!)"
  # ok, only source files, which are symlinks
  find . -type l | sed "s,^\./,," | sort | xargs -r md5sum >md5sums
#  if [ -d ~/.gnupg ]; then
#    row "Signing md5sums"
#    cat md5sums | gpg --clearsign >$path/md5sums
#  fi
  [ -s md5sums ] || rm md5sums
  # write a file list of the package (remove creation time)
  tar tzvf $TMP/$package.tgz | awk '{ printf "%s %-12s %8s %s\n",$1,$2,$3,$6 }' \
  | sort +3 >footprint
  # is there a package tree?
  if ! [ -d $TMP/package-$name ]; then
    rm -rf $TMP/package-$name
    mkdir $TMP/package-$name
    tar xzf $TMP/$package.tgz -C $TMP/package-$name/
  fi
  echo "$requires" >$t/old_req
  find $TMP/package-$name/ -type f | xargs file >$t/ftypes
  { # shared libraries
    grep ":.*ELF" $t/ftypes | cut -d : -f 1 | xargs -r ldd \
    | sed -n "\,=>,s,^.* => \(.*\) (.*)$,\1,p" | sort -u | cut -c 2- | xargs -i echo ^{}
    # perl modules
    grep -ie ":.*perl" -e ".pm:" $t/ftypes | cut -d : -f 1 \
    | xargs sed -n "s,.*use *\([A-Z][a-z][^;<> ]*\).*,\1,p" | xargs -i echo "/man./{}\."
  } | sed "s,/\./,/,g" | grep -lf - $ADM_DIR/packages/* | rev | cut -d / -f 1 \
  | cut -d - -f 4- | rev| pkg2name | rev | cut -d / -f 1 | rev \
  | sed -e "s,-solibs$,," -e "s,^x11$,&\nx11-devel," | grep -v ^$name$ >$t/auto_req_raw
  # perl and python?
  grep -qie ":.*perl" -e "\.pm:" $t/ftypes && echo perl >>$t/auto_req_raw
  grep -qie ":.*python" -e "\.py:" $t/ftypes && echo python >>$t/auto_req_raw
  # sort
  sort -uo $t/auto_req_raw $t/auto_req_raw
  # strip ignore list
  ls_slk | slk2loc | grep $ignore | loc2gpkg | pkg2name | cut -d / -f 2 >$t/ignore
  fgrep -vxf $t/ignore $t/auto_req_raw >$t/auto_req
  # now generate new "requires" file
  touch optional
  fgrep -hxvf optional $t/auto_req $t/old_req | grep -v ^$ | sort -u >requires
#  cat $t/auto_req $t/old_req | grep -ve ^$ $optional | sort -u >requires
  # show a few statistics
  fgrep -xf $t/ignore $t/auto_req_raw | xargs -r echo "  --> Ignoring dependencies:"
  fgrep -xvf $t/old_req requires | xargs -r echo "  --> New dependencies:"
  fgrep -xf optional $t/auto_req | xargs -r echo "  --> Dependant options:"
#  grep $optional $t/auto_req | xargs -r echo "  --> Dependant options:"
  fgrep -xvf requires $t/auto_req | fgrep -vxf optional | tee arbitrary \
  | xargs -r echo "  --> Arbitrary dependencies:"
#  fgrep -xvf requires $t/auto_req | grep -v $optional | tee arbitrary \
#  | xargs -r echo "  --> Arbitrary dependencies:"
  # check for common mistakes
  grep -woe "usr/local/.*" -e "usr/share/doc/.*" -e "usr/share/man/.*" \
  -e "usr/info/dir.*" -e "/$ARCH-slackware-linux-" footprint >$t/check_path
  grep "^........w" footprint >$t/check_perm
  grep -e "-upgraded$" $t/auto_req >$t/check_req
  ls_slk | slk2loc | grep -v $exclude | loc2gpkg | pkg2name | cut -d / -f 2 \
  | fgrep -vxf - $t/auto_req >>$t/check_req
  cat $t/check_path | xargs -r -l echo "WARNING: Check this path:"
  cat $t/check_perm | xargs -r -l echo "WARNING: Check these permissions:"
  cat $t/check_req | xargs -r echo "WARNING: Check these dependencies:"
  # remove empty files
  [ -s arbitrary ] || rm -f arbitrary
  [ -s requires ] || rm -f requires
  [ -s optional ] || rm -f optional
}

# build package
build_pkg()
{
  local t=`mktemp -d`
  stanza "Building $package:"
  if $maintain; then
    warn "Maintainer mode: Modifying files: requires md5sums footprint"
    $rebuild && warn "You shouldn't rebuild. Better change BUILD number!"
  fi
  cd `dirname $script` || return 1
  # assume, all symlinks here are links to source files
  find -type l | xargs -r rm
  # download the source files
  local src
  for src in $sources; do
    # if the source is a cgi- or php-script, the file name can be
    # written behind a % in sources
    local srcname=`basename "$src" | cut -d % -f 2`
    local src=`echo "$src" | cut -d % -f 1`
    if [ -f $SRC_DIR/$srcname ]; then
      row "$srcname found in $SRC_DIR/"
    else
      row "Downloading $srcname"
      $DRY_RUN || get $src $SRC_DIR/$srcname || return 1
    fi
    $DRY_RUN || ln -s $SRC_DIR/$srcname .
  done
  # check md5sums
  if ! $maintain && ! $DRY_RUN && [ -f md5sums ] \
  && ! md5sum -c md5sums >$t/md5sum 2>&1; then
    sed -n "/FAILED/s,\(.*\):.*,\1,p" $t/md5sum | xargs -r echo "  --> MD5SUM mismatch:"
    error "Integrity checking failed!"
    return 1
  fi
  $download_only && return 0
  # build package
  $DRY_RUN && return 0
  if ! $remaintain; then
    rm -rf $TMP/buildlog-$name
    rm -rf $TMP/package-$name
    rm -rf $TMP/$package.tgz
    local flags_var=`grep -o "CFLAGS=\\"*\\$[^ ]*" $script | cut -d = -f 2 | tail -n 1 | sed "s,[\"\$],,g"`
    if [ "$flags_var" ]; then
      row "SlackBuild seems to use $flags_var for CFLAGS"
    else
      row "No CFLAGS variable found! Compiling with default values"
      flags_var=CFLAGS
    fi
    if ! $no_fakeroot && has_prog fakeroot; then
      # run fakerooted SlackBuild as nobody
      row "Executing $script (fakerooted)"
      su nobody -c "ARCH=$ARCH $flags_var=\"$CFLAGS\" HOME=$TMP TMPDIR=$TMP \
        PATH=\$PATH:/sbin fakeroot sh $script" 2>&1 | tee $TMP/buildlog-$name >$output
    else
      $no_fakeroot && warn "Fakeroot disabled for this port!" \
      || warn "Please install fakeroot as soon as possible!"
      $prepare_only && warn "Preparing without fakeroot is not a good idea!"
      row "Executing $script"
      eval "ARCH=$ARCH $flags_var=\"$CFLAGS\" sh $script" 2>&1 | tee $TMP/buildlog-$name >$output
      # this is a hack-around for some faulty install scripts
      chmod 1777 /tmp
    fi
    # success? (this is the most promising test to ensure it worked)
    if ! [ -f $TMP/$package.tgz ]; then
      $VERBOSE || tail $TMP/buildlog-$name
      error "Compilation failed (see $TMP/buildlog-$name)!"
      $maintain && touch PORT_IS_BROKEN
      return 1
    fi
  else
    if ! [ "$pkg_file" ]; then
      error "Remaintaining not possible: No package file found!"
      return 1
    fi
    row "Skipping package building"
    cp $pkg_file $TMP/
  fi
  # cruft for maintainers of port scripts :)
  $maintain && maintainer_mode
  row "Moving $package to $PKG_DIR/$group/"
  mkdir -p $PKG_DIR/$group
  mv $TMP/$package.tgz $PKG_DIR/$group/
  row "Cleaning up"
  for src in $sources; do
    local srcname=`basename "$src" | cut -d % -f 2`
    # remove symlinks to sources
    rm -rf `dirname $script`/$srcname
    # pseudo ports: don't cache sources
    $pseudo && rm -rf $SRC_DIR/$srcname
  done
  rm -rf $TMP/package-$name
#  rm -f $TMP/buildlog-$name
}

# really (re)install/upgrade current port
add_pkg() # pkgex
{
  local t=`mktemp -d`
  # track argument and remove if found
  echo $1 >>$ADD_SUM_CALL
  get_info $1 || return 1
  sed -i "\,^$1$,d" $ADD_SUM_CALL
  # if it is already tracked as started and not finished, it is either broken
  # or a circular dependency and should fail now
  if fgrep -sqx "$group/$package" $ADD_SUM_START; then
    debug "add_pkg(): broke up $package intentionally"
    error "Circular dependency! Stopping $name."
    return 1
  fi
  # track as started and skip if we already did that (maybe because of a dependency)
  fgrep -sqx "$group/$package" $ADD_SUM_FINISH && return 0
  echo $group/$package >>$ADD_SUM_START
  # requirements check
  check_reqs || return 1
  # package file found in cache? (first in its group, then other places)
  if ! [ $pkg_file ] || $rebuild; then
    build_pkg || return 1
    pkg_file=$PKG_DIR/$group/$package.tgz
  elif $download_only; then
    stanza "Already built. No need to download source files. Skipping."
  fi
  # track as finished
  echo $group/$package >>$ADD_SUM_FINISH
  sed -i "\,^$group/$package$,d" $ADD_SUM_START
  $download_only && return 0
  $prepare_only && return 0
  # install the package
  if ls_inst | fgrep -qx $package && ! $reinstall; then
    stanza "$package is already installed. Skipping."
    return 0
  fi
  $slot_in && warn "Slot-in: Other releases will stay installed!"
  # what to display?
  ls_inst >$t/inst
  if ! $slot_in && fgrep -qx $package $t/inst; then
    stanza "Reinstalling $package..."
    local add="upgradepkg --reinstall"
  elif ! $slot_in && grep -qm 1 $(regex $name) $t/inst; then
    stanza "Upgrading $name to `echo $package | pkg2rel`..."
    local add="upgradepkg"
  else
    stanza "Installing $package..."
    local add="installpkg"
  fi
  echo $group/$package >>$FAKED_INST
  $DRY_RUN && return 0
  # call the install-command
  if ! su -c "$add $pkg_file | tee $t/install_log | grep -e ^PACKAGE \
  -e ^$name: -e ^Executing"; then
    cat $t/install_log
    error "Installation failed!"
    return 1
  fi
  return 0
}

# prepare and install ports
do_add() # pkgex-list
{
  debug "do_add(): starting: $@"
  has_args "$@" || die
  has_ports || die
  is_root || die
  local ret
  local arg
  for arg in `explicit "$@"`; do
    debug "do_add(): \$arg=$arg"
    add_pkg $arg
    ret=$?
  done
  # summary
  local stats=$ADM_DIR/portpkg.log
  echo "+--------------------+" >>$stats
  date >>$stats
  if [ "`cat $ADD_SUM_CALL $ADD_SUM_START $ADD_SUM_FINISH`" ]; then
    stanza "Summary of actions:"
    cat $ADD_SUM_FINISH | xargs -r -l echo "  --> Finished"
    cat $ADD_SUM_START | xargs -r -l echo "  --> Failed at"
    cat $ADD_SUM_CALL | xargs -r -l echo "  --> Couldn't find"
  fi | tee -a $stats >$output
  debug "do_add(): finished: $@"
  return $ret
}

do_diff()
{
  local t=`mktemp -d`
  has_ports || die
  local diff_list=`ls_diff`
  [ "$diff_list" ] || die "No differences found."
  stanza "PACKAGE NAME:\r\t\t\t\tAVAILABLE:\r\t\t\t\t\t\t\tINSTALLED:"
  ls_inst >$t/inst
  local pkg
  for pkg in $diff_list; do
    debug "do_diff(): \$pkg=$pkg"
    local avail_rel=`echo $pkg | pkg2rel`
    local name=`echo $pkg | pkg2name`
    local inst_rel=`grep -m 1 $(regex $name) $t/inst | pkg2rel`
    avail=${avail:-$name}
    avail_rel=${avail_rel:-(n/a)}
    echo -e "$name\r\t\t\t\t$avail_rel\r\t\t\t\t\t\t\t$inst_rel"
  done
}

do_export()
{
  has_args "$@" || die
  has_ports || die
  has_prog curl || die
  # hm, use at least 7.12.2 (Slackware 10.1)
  case `curl -V | head -n 1 | cut -d " " -f 2` in
    7.12.0|7.12.1) die "You need curl >= 7.12.2";;
    7.12.*)        ;;
    *)             die "You need curl >= 7.12.2";;
  esac
  [ "${MY_TAG:-}" ] || die "No tag configured. Please run: pp-config"
  [ "${MY_EMAIL:-}" ] || die "No mail address configured. Please run: pp-config"
  [ "${MY_REALNAME:-}" ] || die "No real name configured. Please run: pp-config"
  local t=`mktemp -d`
  stanza "Exporting ports to `echo $CVS_ROOT | cut -d @ -f 2 | cut -d : -f 1`:"
  local ret
  local arg
  for arg in `explicit "$@"`; do
    debug "do_export(): \$arg=$arg"
    get_info $arg || continue
    local path=`dirname $script`
    if [ -f $path/PORT_IS_BROKEN ]; then
      error "Cannot export broken ports. Please fix first!"
      continue
    fi
    row "Uploading $group/$package"
    rm -rf $TMP/$package.tar.bz2
    mkdir -p $t/$package/$name
    ( cd `dirname $script`
      cp -a . $t/$package/$name
      cd $t/$package/$name
      rm -rf .CVS CVS arbitrary
      echo "tag: $MY_TAG" >info
      echo "email: $MY_EMAIL" >>info
      echo "realname: $MY_REALNAME" >>info
      cd $t/$package
      tar cjf $TMP/$package.tar.bz2 .
    )
    $DRY_RUN  \
    || curl -F filetoupload=@$TMP/$package.tar.bz2 $SUBMIT_URL >/dev/null 2>&1 \
    || error "An error occured!"
    ret=$?
  done
  return $ret
}

# find ports by pattern
do_find() # text [..] >list
{
  local t=`mktemp -d`
  has_ports || die
  local arg
  for arg; do
    find $PRT_DIR/ -follow -name slack-desc | xargs grep -shi $arg
  done | grep "^[^ ]*: " | cut -d : -f 1 | sort -u >$t/list
  [ -s $t/list ] && do_list `cat $t/list`
}

# print information about a port
do_info() # pkgex-list
{
  has_ports || die
  has_args "$@" || die
  local ret=0
  local arg
  debug "do_info(): starting: $@"
  debug "do_info(): for arg in "`explicit "$@"`
  for arg in `explicit "$@"`; do
    ret=1
    debug "do_info(): testing $arg"
    get_info $arg || continue
    echo
    echo "PACKAGE NAME:  $package"
    [ "$size" ] && echo "COMPRESSED PACKAGE SIZE:  $size K"
    [ "$u_size" ] && echo "UNCOMPRESSED PACKAGE SIZE:  $u_size K"
    [ "$pkg_file" ] && echo "PACKAGE LOCATION:  $pkg_file"
    echo "SCRIPT LOCATION:  $script"
    [ "$requires" ] && echo "PACKAGE REQUIRES:  "$requires | fmt -t 2>/dev/null
    [ "$optional" ] && echo "PACKAGE SUGGESTS:  "$optional | fmt -t 2>/dev/null
    [ "$sources" ] && echo "SOURCE LOCATIONS:  "$sources | fmt -t 2>/dev/null
    [ "$description" ] && echo -e "PACKAGE DESCRIPTION:\n$description"
    ret=0
  done
  debug "do_info(): finished: $@"
  return $ret
}

# list available ports
do_list() # [pkgex-list] >glist
{
  has_ports || die
  # grep arguments
  local regex
  [ "$*" ] && regex=`regex $*` || regex="-v ^$"
  ls_slk | slk2loc | grep $regex 2>/dev/null | loc2gpkg
}

do_sync()
{
  is_root || die
  has_prog cvs || die
  stanza "Syncing your data base:"
  # sync port dir
  row "Syncing $PRT_DIR with `echo $CVS_ROOT | cut -d @ -f 2 | cut -d : -f 1`"
  mkdir -p $PRT_DIR
  local cvs
  # unhide .CVS
  find $PRT_DIR/ -name .CVS -type d | while read cvs; do mv $cvs `dirname $cvs`/CVS; done
  [ -f ~/.cvspass ] || touch ~/.cvspass
  if [ -d CVS ]; then
    cd $PRT_DIR || die
#    # if it's a CVS root with a CVS-account, then don't overwrite modified files
#    grep -sq anonymous CVS/Root && local opt="C" || local opt=""
#    cvs -qz9 up -dP$opt -I arbitrary,local,z
    cvs -qz9 up -dP -I arbitrary,local,z 2>/dev/null
  else
    cd `dirname $PRT_DIR` || die
    cvs -qz9 -d $CVS_ROOT co -Pd `basename $PRT_DIR` ports 2>/dev/null
  fi | sed -r \
  -e "s,^.*$,  --> &," \
  -e "s, U , Updating ," \
  -e "s, C , Conflict with ," \
  -e "s, P , Patching ," \
  -e "s, M , Locally modified ," \
  -e "s, \\? , Unknown entry ,"
#    -e "/\(.*\)/d" \
  # hide CVS
  find $PRT_DIR/ -name CVS -type d | while read cvs; do mv $cvs `dirname $cvs`/.CVS; done
  # sync addons?
  local addon
  if [ "$SYNC_ADDON" ]; then
    for addon in $SYNC_ADDON; do
      . $addon
    done
  fi
  # sync package dir
  local t=`mktemp -d`
  row "Syncing $PKG_DIR with $PRT_DIR"
  mkdir -p $PKG_DIR
  ls_slk | slk2loc | loc2gpkg >$t/avail
  # leave group local/ as is
  ls_pkg | grep -v "^local/" >$t/cache
  local gpkg
  local group
  # check groups
  fgrep -vxf $t/avail $t/cache | while read gpkg; do
    group=`grep -m 1 /$(echo $gpkg | cut -d / -f 2)$ $t/avail | cut -sd / -f 1`
    group=${group:-outdated}
    case $gpkg in $group/*) continue;; esac
    row "Moving $gpkg to $group/"
    mkdir -p $PKG_DIR/$group
    mv $PKG_DIR/$gpkg.tgz $PKG_DIR/$group/
  done
  local dir
  find $PKG_DIR/ -mindepth 1 -type d -empty | while read dir; do
    row "Deleting empty directory $dir/"
    rmdir $dir
  done
}

# upgrade all installed ports that are not available
do_upgrade() # [pkgex-list]
{
  has_ports || die
  local diff_list=`ls_diff | pkg2name`
  [ "$diff_list" ] || die "No upgrades available."
  debug "do_upgrade(): call: do_add $diff_list"
  do_add $diff_list
}

help()
{
  cat <<EOF

Usage: portpkg [action] [options] [list [...]]
  Build and install (or upgrade) a package.
Actions (alternative):
  -d, --diff	   Compare installed versions with availables
  -i, --info	   View information about specified ports
  -f, --find	   Find ports by pattern
  -l, --list	   List available ports
  -s, --sync	   Sync local ports tree
  -u, --upgrade	   Upgrade all (!) outdated ports (see --diff)
  -v, --version	   View version information
  -x, --export     Upload ports to portpkg.berlios.de
Options:
  -e, --reinstall  Reinstall package if already installed
  -b, --rebuild	   Rebuild package if already build (implies --reinstall)
  -p, --prepare    Build package, but don't install (implies --noreqs)
  -o, --download   Download source files only
  -g, --verbose	   Show compile output
  -y, --dryrun	   Simulate install/build/download/upload
  -q, --noreqs	   Don't install/upgrade dependencies
  -a, --lazy       Don't upgrade dependencies to newest version
Lists:
  group/ or [group/]name[-version-arch-build]
EOF
}

version()
{
  cat <<EOF
    
Portpkg version $ENGINE_VER.
Copyright (C) 2003-2005 Thomas Pfaff <topf at users dot berlios dot de>.
Portpkg comes with ABSOLUTELY NO WARRANTY. This is free software, and you
are welcome to redistribute it under certain conditions.
EOF
}

parse_options()
{
  local shorts="diflsuvhebogyqxzarpm"
  local longs="diff,info,find,list,sync,upgrade,version,help,reinstall,\
rebuild,download,verbose,dryrun,noreqs,debug,lazy,remaintain,prepare,\
maintain,export"
  local args
  args=`getopt -quo $shorts -l $longs -- "$@"`
  [ "$?" == "0" ] || die "Bad Arguments! Try: portpkg --help"
  local start_args="$@"
  eval set -- "$args"
  while [ "$1" ]; do
    case $1 in
      -d|--diff)        action=do_diff;;
      -i|--info)      	action=do_info;;
      -f|--find)        action=do_find;;
      -l|--list)      	action=do_list;;
      -s|--sync)        action=do_sync;;
      -u|--upgrade)     action=do_upgrade;;
      -v|--version)     action=version;;
      -x|--export)      action=do_export;;
      -h|--help)      	action=help;;
      -e|--reinstall)   reinstall=true;;
      -b|--rebuild)     rebuild=true;;
      -o|--download)    download_only=true;;
      -g|--verbose)   	VERBOSE=true;;
      -y|--dryrun)      DRY_RUN=true;;
      -q|--noreqs)      NO_REQS=true;;
      -z|--debug)       DEBUG=true;;
      -a|--lazy)        LAZY_CHECKS=true;;
      -r|--remaintain)  remaintain=true;;
      -p|--prepare)     prepare_only=true;;
      -m|--maintain)    MAINTAIN_ALL=true;;
      --)               shift
                        break;;
    esac
    shift
  done
  $prepare_only && NO_REQS=true
  $rebuild && reinstall=true
  $remaintain && rebuild=true
  $VERBOSE && output=/dev/stdout
  debug "init(): exclude=\"$exclude\""
  debug "init(): ignore=\"$ignore\""
#  debug "init(): optional=\"$optional\""
  debug "init(): ARCH=$ARCH"
  debug "parse_options(): starting: $start_args"
  debug "parse_options(): call: $action $@"
  $NO_REQS && warn "Dependency resolving disabled!"
  $LAZY_CHECKS && warn "Enable lazy dependency checking!"
  $DRY_RUN && warn "Up-/downloading, packaging and installing simulated!"
  $action "$@"
  exit $?
}

init()
{
  # make temporary directory
  [ -d $TMPDIR ] || die "Internal error!"
  # clean up on exit
  trap "rm -rf $TMPDIR" EXIT
  trap "" PIPE
  has_prog sed || die
  # check
  case $ARCH in *-*) die "ARCH value not allowed: $ARCH";; esac
  mirrors=`grep -vshe ^# -e ^$ $CFG_DIR/mirrors{.local,}`
  ignore=`grep -vshe ^# -e ^$ $CFG_DIR/ignore{.local,}`
  exclude=`grep -vshe ^# -e ^$ $CFG_DIR/exclude{.local,}`
#  optional=`grep -vshe ^# -e ^$ $CFG_DIR/optional{.local,}`
  ignore=`regex $ignore`
  exclude=`regex $exclude`
#  optional=`regex $optional`
  # if not used as include file then start me
  [ `basename $0` == "portpkg" ] && parse_options "$@"
  return 0
}

init "$@"
