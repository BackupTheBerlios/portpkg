#!/bin/bash -u
# pp-sync-dist -- A portpkg-addon to use Slackware's
#                .tgz-packages as if they were ports

source `which portpkg` || exit 1

TREE=/usr/ports/z/dist
# this will be mangled through our mirrors-list anyway
DIST=ftp://ftp.slackware.com/pub/slackware
SECTIONS=(patches extra slackware kernels pasture testing)

stanza "pp-sync-dist -- A portpkg-addon to use Slackware's .tgz-packages as if they
were ports. Since this script is kind of hack-around (a work-around-hack) it's
not that easy to use.

pp-sync-dist will download some informative files from a Slackware mirror and
generates a pseudo ports tree in $TREE.

What are 'pseudo ports'? Pseudo ports are SlackBuilds that do nothing else
than download binary packages and install them. You will probably have no need
for this if you use (alphabetical order) slack-get, slackpkg, slapt-get, swaret
or any other Slackware package manager that I missed to name here.

If this is the first time you use pp-sync-dist, you will be asked for a target
distribution version. Choose '10.0' or maybe 'current', but only if you use
Slackware-current. You can change this later in $PRT_DIR/local.conf.

Enjoy."

echo -ne "\nContinue (ctrl-c to abort) "
read me

t=`private`
is_root || die
rm -rf $TREE
mkdir -p $TREE
#[ -f $PRT_DIR/pseudo ] && . $PRT_DIR/pseudo
DIST_VER=${DIST_VER:-}
while ! [ "$DIST_VER" ]; do
  echo
  echo -n "What distribution is your target? (e.g. '10.0', 'current') "
  read DIST_VER
  echo "DIST_VER=$DIST_VER" >>$PRT_DIR/local.conf
done
DIST=$DIST/slackware-$DIST_VER
stanza "Syncing with `echo $DIST | cut -d / -f 3`:"
row "Retrieving meta data"
get $DIST/FILELIST.TXT $t.file_list >/dev/null
get $DIST/PACKAGES.TXT $t.packages >/dev/null
get $DIST/kernels/VERSIONS.TXT $t.kernel_versions >/dev/null
cat $t.file_list | tr -s " " | cut -d " " -f 8 | cut -c 3- >$t.files
n=-1
for section in ${SECTIONS[@]}; do
  cd $TREE || die
  # current has no patches
  [ "$DIST_VER" == "current" ] && [ "$section" == "patches" ] && continue
  ((n++))
  mkdir $n.$section
  cd $n.$section
  row "Preparing pseudo ports for $section/"
  if [ "$section" == "kernels" ]; then
    kver=`grep -o "[0-9]\.[0-9]\.[0-9][0-9]" $t.kernel_versions`
    karch=`grep -o "glibc-.*\.tgz$" $t.file_list \
    | grep $(regex glibc) | rev | cut -d - -f 2 | rev | head -n 1`
    grep \./kernels/ $t.file_list | grep ^d | rev | cut -d / -f 1 \
    | rev | grep -v modules | while read flavour; do
      path=kernels/$flavour
      mkdir -p $path
      cat <<EOF >$path/SlackBuild
NAME=$flavour
VERSION=$kver
ARCH=$karch
BUILD=1

CWD=\`pwd\`
PKG=/tmp/package-\$NAME
rm -rf \$PKG
mkdir -p \$PKG/boot
cd \$PKG/boot
cat \$CWD/bzImage >vmlinuz-$flavour-$kver
cat \$CWD/System.map.gz >System.map-$flavour-$kver.gz
cat \$CWD/config >config-$flavour-$kver
gunzip System.map-$flavour-$kver.gz
ln -s vmlinuz-$flavour-$kver vmlinuz
ln -s System.map-$flavour-$kver System.map
ln -s config-$flavour-$kver config
cd \$PKG
makepkg -l y -c n /tmp/\$NAME-\$VERSION-\$ARCH-\$BUILD.tgz
EOF
      cat <<EOF >$path/sources
$DIST/kernels/$flavour/bzImage
$DIST/kernels/$flavour/System.map.gz
$DIST/kernels/$flavour/config
EOF
      echo "$flavour: Linux-$kver ($flavour)" >$path/slack-desc
      touch $path/pseudo
      touch $path/slot-in
    done
    continue
  fi
  grep "^$section/.*\.tgz$" $t.files | grep -v /source/ \
  | sed -r "s,^[^/]*/(.*)\.tgz$,\1," \
  | while read s; do
    pkg=`echo $s | sed -r "s,^.*/(.*)$,\1,"`
    name=`echo $pkg | pkg2name`
    rel=`echo $pkg | pkg2rel`
    ver=`echo $rel | cut -d - -f 1`
    arch=`echo $rel | cut -d - -f 2`
    build=`echo $rel | cut -d - -f 3`
    if [ "$section" == "slackware" ]; then
      group=`echo $s | cut -d / -f 1`
#      path=$group/$name
    else
      group=$section
#      path=$name
    fi
    path=$group/$name
    mkdir -p $path
    cat <<EOF >$path/SlackBuild
VERSION=$ver
ARCH=$arch
BUILD=$build

CWD=\`pwd\`
cp \$CWD/$pkg.tgz /tmp
EOF
    echo "$DIST/$section/$s.tgz" >$path/sources
    grep "^$name:" $t.packages >$path/slack-desc
    touch $path/pseudo
  done
done
cd $TREE
# make slot-ins for kernel-modules to allow 2.6-modules co-exist with 2.4-modules
find -name kernel-source -exec touch {}/slot-in \;
find -name kernel-modules -exec touch {}/slot-in \;
find -name alsa-driver -exec touch {}/slot-in \;

stanza "Pseudo ports are now in $TREE."
