#!/bin/sh
# pp-sync-bin -- A portpkg-addon to use Slackware's .tgz-packages as if they
#                were ports

source `which portpkg` || exit 1
[ "$DIST_VER" ] || die "No distribution target set. Please run 'pp-config'!"
[ "$BIN_PRT_DIR" ] || die "No path set. Please run 'pp-config'!"
# this will be mangled through our mirrors-list anyway
DIST=ftp://ftp.slackware.com/pub/slackware/slackware-$DIST_VER

stanza "pp-sync-bin -- A portpkg-addon to use Slackware's .tgz-packages as if they
were ports. Since this script is kind of hack-around (a work-around-hack) it's
not that easy to use.

pp-sync-bin will download some informative files from a Slackware mirror and
generates a pseudo ports tree in $BIN_PRT_DIR.

What are 'pseudo ports'? Pseudo ports are SlackBuilds that do nothing else
than download binary packages and install them. You will probably have no need
for this if you use (alphabetical order) slack-get, slackpkg, slapt-get, swaret
or any other Slackware package manager that I missed to name here.

If this is the first time you use pp-sync-bin, you will be asked for a target
distribution version. Choose '10.0' or maybe 'current', but only if you use
Slackware-current. You can change this later in $PRT_DIR/local.conf.

Enjoy."

echo -ne "\nContinue (ctrl-c to abort) "
read me

t=`mktemp -d`
is_root || die
rm -rf $BIN_PRT_DIR
mkdir -p $BIN_PRT_DIR
cd $BIN_PRT_DIR || die
stanza "Syncing with `echo $DIST | cut -d / -f 3`:"
row "Retrieving file list"
get $DIST/FILELIST.TXT $t/file_list >/dev/null
row "Retrieving package info"
get $DIST/PACKAGES.TXT $t/packages >/dev/null
row "Retrieving md5sums"
get $DIST/CHECKSUMS.md5 $t/md5sums >/dev/null
row "Retrieving kernel version"
get $DIST/kernels/VERSIONS.TXT $t/kernel_versions >/dev/null
cat $t/file_list | tr -s " " | cut -d " " -f 8 | cut -c 3- >$t/files

sync_section()
{
  section=$1
  tree=$2
  # current has no patches
  [ "$DIST_VER" == "current" ] && [ "$section" == "patches" ] && return
  mkdir -p $tree
  cd $tree || die
  row "Preparing pseudo ports for $section/"
  if [ "$section" == "kernels" ]; then
    kver=`grep -o "[0-9]\.[0-9]\.[0-9][0-9]" $t/kernel_versions`
    karch=`grep -o "glibc-.*\.tgz$" $t/file_list \
    | grep $(regex glibc) | rev | cut -d - -f 2 | rev | head -n 1`
    grep \./kernels/ $t/file_list | grep ^d | rev | cut -d / -f 1 \
    | rev | grep -v modules | while read flavour; do
      path=kernels/$flavour
      mkdir -p $path
      cat <<EOF >$path/SlackBuild
NAME=$flavour
VERSION=$kver
ARCH=$karch
BUILD=1

CWD=\`pwd\`
PKG=/tmp/package-\$NAME
rm -rf \$PKG
mkdir -p \$PKG/boot
cd \$PKG/boot
cat \$CWD/bzImage >vmlinuz-$flavour-$kver
cat \$CWD/System.map.gz >System.map-$flavour-$kver.gz
cat \$CWD/config >config-$flavour-$kver
gunzip System.map-$flavour-$kver.gz
ln -s vmlinuz-$flavour-$kver vmlinuz
ln -s System.map-$flavour-$kver System.map
ln -s config-$flavour-$kver config
cd \$PKG
makepkg -l y -c n /tmp/\$NAME-\$VERSION-\$ARCH-\$BUILD.tgz
EOF
      cat <<EOF >$path/sources
$DIST/kernels/$flavour/bzImage
$DIST/kernels/$flavour/System.map.gz
$DIST/kernels/$flavour/config
EOF
      grep "\./kernels/$flavour/" $t/md5sums | sed "s,  .*/,  ," >$path/md5sums
      echo "$flavour: Linux-$kver ($flavour)" >$path/slack-desc
      touch $path/pseudo
      touch $path/slot-in
    done
    return
  fi
  grep "^$section/.*\.tgz$" $t/files | grep -v /source/ \
  | sed -r "s,^[^/]*/(.*)\.tgz$,\1," \
  | while read s; do
    pkg=`echo $s | sed -r "s,^.*/(.*)$,\1,"`
    name=`echo $pkg | pkg2name`
    rel=`echo $pkg | pkg2rel`
    ver=`echo $rel | cut -d - -f 1`
    arch=`echo $rel | cut -d - -f 2`
    build=`echo $rel | cut -d - -f 3`
    if [ "$section" == "slackware" ]; then
      group=`echo $s | cut -d / -f 1`
    else
      group=$section
    fi
    path=$group/$name
    mkdir -p $path
    cat <<EOF >$path/SlackBuild
VERSION=$ver
ARCH=$arch
BUILD=$build

CWD=\`pwd\`
cp \$CWD/$pkg.tgz /tmp
EOF
    echo "$DIST/$section/$s.tgz" >$path/sources
    grep "/$section/$s.tgz$" $t/md5sums | sed "s,  .*/,  ," >$path/md5sums
    grep "^$name:" $t/packages >$path/slack-desc
    touch $path/pseudo
  done
}

sync_section slackware $BIN_PRT_DIR/
# these are preferred
sync_section patches $BIN_PRT_DIR/0/
sync_section extra $BIN_PRT_DIR/0/
# and these are recessive
sync_section kernels $BIN_PRT_DIR/z/
sync_section pasture $BIN_PRT_DIR/z/
sync_section testing $BIN_PRT_DIR/z/
# make slot-ins for kernel-modules to allow 2.6-modules co-exist with 2.4-modules
find -name kernel-source -exec touch {}/slot-in \;
find -name kernel-modules -exec touch {}/slot-in \;
find -name alsa-driver -exec touch {}/slot-in \;
# done
stanza "Pseudo ports are now in $BIN_PRT_DIR."
