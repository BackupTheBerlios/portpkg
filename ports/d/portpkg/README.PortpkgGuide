PortpkgGuide

   This page addresses the how and why of the administration tool Portpkg and
   its inner work and development. This page is concrete incarnation of the
   term work in progress.

Terminology

   Port
           A set of scripts or files that describe how to make a certain
           binary package.

   Group, or series
           Directories that seperate ports and packages in topical pools.

   Package, or binary package
           A file that contains all files that belong together, prepared for
           a certain OS and architecture, mostly machine code and ready to
           run. In Slackware, ending always in .tgz.

   Source package
           A file that contains all files that belong together, mostly plain
           text, valid for several OSes and architectures, and have to be
           prepared for installation first. Ending in .tar.gz, .tar.bz2, .tgz
           or .src.rpm etc.

   SlackBuild
           A Bash-script that is executed to build a package.

   Ports tree
           Hierarchy of port scripts.

   Package name, or short name
           In Slackware, the first of the 4 segments in a package descriptor,
           delimited by -. E.g.: mplayer is the package name of the package
           mplayer-1.0pre5-i486-1tom.

   Build, or release
           In Slackware, the last of the 4 segments in a package descriptor,
           delimited by -. E.g.: 1tom is the build of the package
           mplayer-1.0pre5-i486-1tom.

   --------------------------------------------------------------------------

Theory

   "What is exactly the difference between the ports in Portpkg and the
   "ports" in Slackware?"

   Slackware doesn't call that ports! It's just the source code of Slackware.

   The most obvious difference seems to be the file source: While Slackware
   stores every source package in the same directory, Portpkg just gives a
   list of URLs, where to get them. The effect is the same, because they have
   to be downloaded anyway.

   Moreover the SlackBuilds in Portpkg are a little more consequential in
   declarations (each SlackBuild has to have the lines VERSION=, ARCH= and
   BUILD= and its values in plain text) and more consequential in
   implementation (each port has one SlackBuild, each SlackBuild makes one
   binary package). Have a look at the .build-scripts, the X11-SlackBuild and
   the KDE-scipts to see what I mean. This behaviour may change in future to
   make Portpkg more compatible with the Slackware sources.

   The concept of Portpkg's ports tree is to provide a functionality without
   Portpkg at all, although it's not that easy to use:

 # cd /usr/ports/ap/dbus
 # cat sources | sed "s#\$VERSION#1.2.3#" | wget -i -
 (...)
 # sh ./SlackBuild
 (...)
 # installpkg /tmp/dbus-*.tgz
 (...)

   Portpkg generates a list of available ports on-the-fly. That means a
   VERSION-change in one SlackBuild of a port is immediatly translated.

   Usage and output of Portpkg is mostly analogue to the usage and output of
   Slackware's installpkg. Again, layout of the ports tree is analogue to the
   layout of Slackware's source/ directory.

   --------------------------------------------------------------------------

File system

   "What directories are used for Portpkg and it's scripts?"

   +----------------------------------------+
   |/usr/ports   |Ports tree copy           |
   |-------------+--------------------------|
   |/usr/obj/pkg |Stored binary packages    |
   |-------------+--------------------------|
   |/usr/src/dist|Downloaded source packages|
   |-------------+--------------------------|
   |/usr/src/cvs |CVS-repositories^1        |
   +----------------------------------------+

   Notes: ^1 Planning

   --------------------------------------------------------------------------

Ports Tree

   This part is sort of phenomenology of the packages tree in Slackware.
   Let's start with the most common groups:

   +-------------------------------------------------------+
   |ap/   |Applications, console based                     |
   |------+------------------------------------------------|
   |d/    |Development tools                               |
   |------+------------------------------------------------|
   |gnome/|Applications, that require the GNOME-desktop    |
   |------+------------------------------------------------|
   |kde/  |Applications, that require the KDE              |
   |------+------------------------------------------------|
   |l/    |Libraries, but not X-dependent                  |
   |------+------------------------------------------------|
   |n/    |Network servers and clients, but not X-dependent|
   |------+------------------------------------------------|
   |xap/  |X-applications and X-libraries                  |
   +-------------------------------------------------------+

   These are special groups, that should better only be used for the
   Slackware distribution:

   +------------------------------------------------------------------------+
   |  |Base packages, that have to be installed first. Portpkg sorts the    |
   |a/|ports list, therefore a/ is listed before other groups, and that's   |
   |  |why pp-sync-dist uses group z/, to make sure, they are used as last  |
   |  |resort.                                                              |
   |--+---------------------------------------------------------------------|
   |x/|X-server and its fonts and drivers, sort of "a/" group of            |
   |  |X-applications                                                       |
   +------------------------------------------------------------------------+

   These groups have special meanings in Portpkg and are normally marked to
   be excluded:

   +------------------------------------------------------------------------+
   |pasture/|Packages for compatibility reasons, packages a                 |
   |        |release-based-system needs, but not a current-based-system     |
   |--------+---------------------------------------------------------------|
   |testing/|Packages for testing                                           |
   |--------+---------------------------------------------------------------|
   |open/   |The open group: a temporary place (special to Portpkg) for     |
   |        |ports that are uploaded by users with the web interface.       |
   +------------------------------------------------------------------------+

   Note: Smart slackers will yell when reading pasture/ and testing/ being a
   group or series. In fact these directories are located one level above the
   package tree. To be discussed :)

   --------------------------------------------------------------------------

Dealing With Ports

   Portpkg makes using port scripts easier by providing several functions for
   users and maintainers also. Maintainer mode is automatically initiated
   when the value of MY_TAG (in /usr/ports/local.conf) matches the build-tag
   of the port being built.

     o Downloads required source packages while resuming aborted downloads
     o Checks and completes (in maintainer mode) a list of required packages
       to build a port
     o Collects source packages and binary packages in seperate directories
     o Assists maintainers to check if the resulting package is built correct

   --------------------------------------------------------------------------


References

   Visible links
   . file:///usr/ports/d/portpkg/doc.php?page=links/PortpkgGuide
   . file:///usr/ports/d/portpkg/doc.php?page=edit/PortpkgGuide
   . file:///usr/ports/d/portpkg/doc.php?page=links/PortpkgGuide
   . file:///usr/ports/d/portpkg/doc.php?page=info/PortpkgGuide
